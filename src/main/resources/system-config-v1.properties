##########################---UserIncr Start---#######################
UserIncr.hdfs.dir=/user/log/hive/reg/

UserIncr.prepare.tmp.prefix = create table if not exists user_incr_tmp_
UserIncr.prepare.tmp.postfix = (appkey string,  platform string,  uid bigint,  report_timestamp bigint)  row format delimited fields terminated by  \'\\t\'
UserIncr.prepare = create table if not exists user_incr(appkey string, platform string, uid bigint, hms int)  partitioned by (month int, day int)  row format delimited fields terminated by \'\\t\'

UserIncr.load.prefix = load data inpath \'
UserIncr.load.postfix = \' into table user_incr_tmp_
UserIncr.load.insert = insert into table user_incr partition(month, day) select appkey, platform, uid, from_unixtime(cast(report_timestamp/1000 as int), \'HHmmss\'), from_unixtime(cast(report_timestamp/1000 as int), \'yyyyMM\'),from_unixtime(cast(report_timestamp/1000 as int), \'d\')  from user_incr_tmp_

#define indexName & index sql
UserIncr.stats.index = addup:user_incr
user_incr.stats.sql.prefix = select count(uid) as cnt, appkey, platform from user_incr where 
user_incr.stats.sql.postfix = group by appkey, platform 

UserIncr.clear.tmp = drop table user_incr_tmp_
##########################---UserIncr End---#######################



##########################---UserActive Start---#######################
UserActive.hdfs.dir=/user/log/hive/active/

UserActive.prepare.tmp.prefix = create table if not exists user_active_tmp_
UserActive.prepare.tmp.postfix=(appkey string, platform string,uid bigint,open int, active_time int, report_timestamp bigint) row format delimited fields terminated by \'\\t\'
UserActive.prepare =create table if not exists user_active( appkey string, platform string,uid bigint,open int,active_time int,hms int) partitioned by (month int, day int) row format delimited fields terminated by \'\\t\'

UserActive.load.prefix = load data inpath \'
UserActive.load.postfix = \' into table user_active_tmp_
UserActive.load.insert = insert  into table user_active partition(month, day) select appkey, platform, uid, open, active_time,from_unixtime(cast(report_timestamp/1000 as int), \'HHmmss\'), from_unixtime(cast(report_timestamp/1000 as int), \'yyyyMM\'),from_unixtime(cast(report_timestamp/1000 as int), \'d\') from user_active_tmp_

#define indexName & index sql 
UserActive.stats.index = addup:user_startup,addup:user_duration,distinct:user_active

user_startup.stats.sql.prefix = select count(open) as cnt,appkey, platform from user_active where open=0 and 
user_startup.stats.sql.postfix =  group by appkey, platform

user_duration.stats.sql.prefix = select sum(active_time) as cnt,appkey, platform from user_active where open=0 and 
user_duration.stats.sql.postfix =  group by appkey, platform

user_active.stats.sql.prefix = select count(distinct uid) as cnt, appkey, platform from user_active where open=0 and 
user_active.stats.sql.postfix = group by appkey, platform


UserActive.clear.tmp = drop table user_active_tmp_

##########################---UserActive End---#######################


##########################---business stat bigin---#######################
mysql.replace.local.appkey.cid=REPLACE INTO t_app_category_local SELECT * FROM t_app_category
mysql.create.view.appkey.cid=CREATE VIEW {0} AS SELECT a.`appkey`, b.`cid`, a.`itime`, a.`kpi_value` business_value FROM {1} a JOIN t_app_category_local b ON a.`appkey` = b.`appkey` and a.`itime`={2};
mysql.create.view.appkey.avg.statis=CREATE VIEW {4} AS SELECT a.appkey, a.itime, a.cid, a.`business_value` / b.`kpi_value` {5} FROM {0} a join {3} b ON a.`appkey`=b.`appkey` and a.`itime` = b.`itime`
mysql.create.view.business.avg.statis=CREATE VIEW {6} AS SELECT cid, itime, ROUND(AVG({5}), 2) AS {7} FROM {4} GROUP BY cid, itime
mysql.select.business.avg.statis=SELECT * FROM {6}
mysql.insert.business=REPLACE INTO t_off_d_business (`cid`, `itime`, `platform`, `statis_type`, `cid_avg`) VALUES(?,?,?,?,?)
mysql.drop.view=DROP VIEW IF EXISTS {0};

##########################---business stat end---#######################



