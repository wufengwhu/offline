/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package cn.jpush.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-3-23")
public class StatQueryService {

  public interface Iface {

    public Map<Integer,Map<Integer,Double>> queryHourKPIByApp(String appkey, String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException;

    public Map<Integer,Map<Integer,Double>> queryHourKPI(String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException;

    public Map<Integer,Double> queryDayKPIByApp(String appkey, String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException;

    public Map<Integer,Double> queryDayKPI(String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException;

    public Map<Integer,Double> queryMonthKPIByApp(String appkey, String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException;

    public Map<Integer,Double> queryMonthKPI(String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException;

    public Map<Integer,Map<Integer,Double>> queryRetention(String appkey, String scope, int begindate, int enddate, String platform) throws org.apache.thrift.TException;

    public Map<Integer,Map<Integer,Double>> queryHourKPIByGroup(List<String> applist, String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException;

    public Map<Integer,Double> queryDayKPIByGroup(List<String> applist, String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException;

    public Map<Integer,Double> queryMonthKPIByGroup(List<String> applist, String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException;

    public List<Map<String,String>> queryTOPNByDay(String code, int topn, int itime, String platform) throws org.apache.thrift.TException;

    public Map<String,String> queryTrendByDay(String code, int no, int begindate, int enddate, String platform) throws org.apache.thrift.TException;

    public Map<String,Map<Integer,Map<Integer,Double>>> queryPlatHourKPIByApp(String appkey, String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException;

    public Map<String,Map<Integer,Double>> queryPlatDayKPIByApp(String appkey, String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException;

    public Map<String,Map<Integer,Double>> queryPlatMonthKPIByApp(String appkey, String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void queryHourKPIByApp(String appkey, String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryHourKPI(String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryDayKPIByApp(String appkey, String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryDayKPI(String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryMonthKPIByApp(String appkey, String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryMonthKPI(String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryRetention(String appkey, String scope, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryHourKPIByGroup(List<String> applist, String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryDayKPIByGroup(List<String> applist, String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryMonthKPIByGroup(List<String> applist, String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryTOPNByDay(String code, int topn, int itime, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryTrendByDay(String code, int no, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryPlatHourKPIByApp(String appkey, String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryPlatDayKPIByApp(String appkey, String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void queryPlatMonthKPIByApp(String appkey, String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Map<Integer,Map<Integer,Double>> queryHourKPIByApp(String appkey, String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException
    {
      send_queryHourKPIByApp(appkey, code, begindate, enddate, platform);
      return recv_queryHourKPIByApp();
    }

    public void send_queryHourKPIByApp(String appkey, String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException
    {
      queryHourKPIByApp_args args = new queryHourKPIByApp_args();
      args.setAppkey(appkey);
      args.setCode(code);
      args.setBegindate(begindate);
      args.setEnddate(enddate);
      args.setPlatform(platform);
      sendBase("queryHourKPIByApp", args);
    }

    public Map<Integer,Map<Integer,Double>> recv_queryHourKPIByApp() throws org.apache.thrift.TException
    {
      queryHourKPIByApp_result result = new queryHourKPIByApp_result();
      receiveBase(result, "queryHourKPIByApp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryHourKPIByApp failed: unknown result");
    }

    public Map<Integer,Map<Integer,Double>> queryHourKPI(String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException
    {
      send_queryHourKPI(code, begindate, enddate, platform);
      return recv_queryHourKPI();
    }

    public void send_queryHourKPI(String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException
    {
      queryHourKPI_args args = new queryHourKPI_args();
      args.setCode(code);
      args.setBegindate(begindate);
      args.setEnddate(enddate);
      args.setPlatform(platform);
      sendBase("queryHourKPI", args);
    }

    public Map<Integer,Map<Integer,Double>> recv_queryHourKPI() throws org.apache.thrift.TException
    {
      queryHourKPI_result result = new queryHourKPI_result();
      receiveBase(result, "queryHourKPI");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryHourKPI failed: unknown result");
    }

    public Map<Integer,Double> queryDayKPIByApp(String appkey, String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException
    {
      send_queryDayKPIByApp(appkey, code, begindate, enddate, platform);
      return recv_queryDayKPIByApp();
    }

    public void send_queryDayKPIByApp(String appkey, String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException
    {
      queryDayKPIByApp_args args = new queryDayKPIByApp_args();
      args.setAppkey(appkey);
      args.setCode(code);
      args.setBegindate(begindate);
      args.setEnddate(enddate);
      args.setPlatform(platform);
      sendBase("queryDayKPIByApp", args);
    }

    public Map<Integer,Double> recv_queryDayKPIByApp() throws org.apache.thrift.TException
    {
      queryDayKPIByApp_result result = new queryDayKPIByApp_result();
      receiveBase(result, "queryDayKPIByApp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryDayKPIByApp failed: unknown result");
    }

    public Map<Integer,Double> queryDayKPI(String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException
    {
      send_queryDayKPI(code, begindate, enddate, platform);
      return recv_queryDayKPI();
    }

    public void send_queryDayKPI(String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException
    {
      queryDayKPI_args args = new queryDayKPI_args();
      args.setCode(code);
      args.setBegindate(begindate);
      args.setEnddate(enddate);
      args.setPlatform(platform);
      sendBase("queryDayKPI", args);
    }

    public Map<Integer,Double> recv_queryDayKPI() throws org.apache.thrift.TException
    {
      queryDayKPI_result result = new queryDayKPI_result();
      receiveBase(result, "queryDayKPI");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryDayKPI failed: unknown result");
    }

    public Map<Integer,Double> queryMonthKPIByApp(String appkey, String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException
    {
      send_queryMonthKPIByApp(appkey, code, begindate, enddate, platform);
      return recv_queryMonthKPIByApp();
    }

    public void send_queryMonthKPIByApp(String appkey, String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException
    {
      queryMonthKPIByApp_args args = new queryMonthKPIByApp_args();
      args.setAppkey(appkey);
      args.setCode(code);
      args.setBegindate(begindate);
      args.setEnddate(enddate);
      args.setPlatform(platform);
      sendBase("queryMonthKPIByApp", args);
    }

    public Map<Integer,Double> recv_queryMonthKPIByApp() throws org.apache.thrift.TException
    {
      queryMonthKPIByApp_result result = new queryMonthKPIByApp_result();
      receiveBase(result, "queryMonthKPIByApp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryMonthKPIByApp failed: unknown result");
    }

    public Map<Integer,Double> queryMonthKPI(String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException
    {
      send_queryMonthKPI(code, begindate, enddate, platform);
      return recv_queryMonthKPI();
    }

    public void send_queryMonthKPI(String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException
    {
      queryMonthKPI_args args = new queryMonthKPI_args();
      args.setCode(code);
      args.setBegindate(begindate);
      args.setEnddate(enddate);
      args.setPlatform(platform);
      sendBase("queryMonthKPI", args);
    }

    public Map<Integer,Double> recv_queryMonthKPI() throws org.apache.thrift.TException
    {
      queryMonthKPI_result result = new queryMonthKPI_result();
      receiveBase(result, "queryMonthKPI");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryMonthKPI failed: unknown result");
    }

    public Map<Integer,Map<Integer,Double>> queryRetention(String appkey, String scope, int begindate, int enddate, String platform) throws org.apache.thrift.TException
    {
      send_queryRetention(appkey, scope, begindate, enddate, platform);
      return recv_queryRetention();
    }

    public void send_queryRetention(String appkey, String scope, int begindate, int enddate, String platform) throws org.apache.thrift.TException
    {
      queryRetention_args args = new queryRetention_args();
      args.setAppkey(appkey);
      args.setScope(scope);
      args.setBegindate(begindate);
      args.setEnddate(enddate);
      args.setPlatform(platform);
      sendBase("queryRetention", args);
    }

    public Map<Integer,Map<Integer,Double>> recv_queryRetention() throws org.apache.thrift.TException
    {
      queryRetention_result result = new queryRetention_result();
      receiveBase(result, "queryRetention");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryRetention failed: unknown result");
    }

    public Map<Integer,Map<Integer,Double>> queryHourKPIByGroup(List<String> applist, String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException
    {
      send_queryHourKPIByGroup(applist, code, begindate, enddate, platform);
      return recv_queryHourKPIByGroup();
    }

    public void send_queryHourKPIByGroup(List<String> applist, String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException
    {
      queryHourKPIByGroup_args args = new queryHourKPIByGroup_args();
      args.setApplist(applist);
      args.setCode(code);
      args.setBegindate(begindate);
      args.setEnddate(enddate);
      args.setPlatform(platform);
      sendBase("queryHourKPIByGroup", args);
    }

    public Map<Integer,Map<Integer,Double>> recv_queryHourKPIByGroup() throws org.apache.thrift.TException
    {
      queryHourKPIByGroup_result result = new queryHourKPIByGroup_result();
      receiveBase(result, "queryHourKPIByGroup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryHourKPIByGroup failed: unknown result");
    }

    public Map<Integer,Double> queryDayKPIByGroup(List<String> applist, String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException
    {
      send_queryDayKPIByGroup(applist, code, begindate, enddate, platform);
      return recv_queryDayKPIByGroup();
    }

    public void send_queryDayKPIByGroup(List<String> applist, String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException
    {
      queryDayKPIByGroup_args args = new queryDayKPIByGroup_args();
      args.setApplist(applist);
      args.setCode(code);
      args.setBegindate(begindate);
      args.setEnddate(enddate);
      args.setPlatform(platform);
      sendBase("queryDayKPIByGroup", args);
    }

    public Map<Integer,Double> recv_queryDayKPIByGroup() throws org.apache.thrift.TException
    {
      queryDayKPIByGroup_result result = new queryDayKPIByGroup_result();
      receiveBase(result, "queryDayKPIByGroup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryDayKPIByGroup failed: unknown result");
    }

    public Map<Integer,Double> queryMonthKPIByGroup(List<String> applist, String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException
    {
      send_queryMonthKPIByGroup(applist, code, begindate, enddate, platform);
      return recv_queryMonthKPIByGroup();
    }

    public void send_queryMonthKPIByGroup(List<String> applist, String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException
    {
      queryMonthKPIByGroup_args args = new queryMonthKPIByGroup_args();
      args.setApplist(applist);
      args.setCode(code);
      args.setBegindate(begindate);
      args.setEnddate(enddate);
      args.setPlatform(platform);
      sendBase("queryMonthKPIByGroup", args);
    }

    public Map<Integer,Double> recv_queryMonthKPIByGroup() throws org.apache.thrift.TException
    {
      queryMonthKPIByGroup_result result = new queryMonthKPIByGroup_result();
      receiveBase(result, "queryMonthKPIByGroup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryMonthKPIByGroup failed: unknown result");
    }

    public List<Map<String,String>> queryTOPNByDay(String code, int topn, int itime, String platform) throws org.apache.thrift.TException
    {
      send_queryTOPNByDay(code, topn, itime, platform);
      return recv_queryTOPNByDay();
    }

    public void send_queryTOPNByDay(String code, int topn, int itime, String platform) throws org.apache.thrift.TException
    {
      queryTOPNByDay_args args = new queryTOPNByDay_args();
      args.setCode(code);
      args.setTopn(topn);
      args.setItime(itime);
      args.setPlatform(platform);
      sendBase("queryTOPNByDay", args);
    }

    public List<Map<String,String>> recv_queryTOPNByDay() throws org.apache.thrift.TException
    {
      queryTOPNByDay_result result = new queryTOPNByDay_result();
      receiveBase(result, "queryTOPNByDay");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryTOPNByDay failed: unknown result");
    }

    public Map<String,String> queryTrendByDay(String code, int no, int begindate, int enddate, String platform) throws org.apache.thrift.TException
    {
      send_queryTrendByDay(code, no, begindate, enddate, platform);
      return recv_queryTrendByDay();
    }

    public void send_queryTrendByDay(String code, int no, int begindate, int enddate, String platform) throws org.apache.thrift.TException
    {
      queryTrendByDay_args args = new queryTrendByDay_args();
      args.setCode(code);
      args.setNo(no);
      args.setBegindate(begindate);
      args.setEnddate(enddate);
      args.setPlatform(platform);
      sendBase("queryTrendByDay", args);
    }

    public Map<String,String> recv_queryTrendByDay() throws org.apache.thrift.TException
    {
      queryTrendByDay_result result = new queryTrendByDay_result();
      receiveBase(result, "queryTrendByDay");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryTrendByDay failed: unknown result");
    }

    public Map<String,Map<Integer,Map<Integer,Double>>> queryPlatHourKPIByApp(String appkey, String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException
    {
      send_queryPlatHourKPIByApp(appkey, code, begindate, enddate, platform);
      return recv_queryPlatHourKPIByApp();
    }

    public void send_queryPlatHourKPIByApp(String appkey, String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException
    {
      queryPlatHourKPIByApp_args args = new queryPlatHourKPIByApp_args();
      args.setAppkey(appkey);
      args.setCode(code);
      args.setBegindate(begindate);
      args.setEnddate(enddate);
      args.setPlatform(platform);
      sendBase("queryPlatHourKPIByApp", args);
    }

    public Map<String,Map<Integer,Map<Integer,Double>>> recv_queryPlatHourKPIByApp() throws org.apache.thrift.TException
    {
      queryPlatHourKPIByApp_result result = new queryPlatHourKPIByApp_result();
      receiveBase(result, "queryPlatHourKPIByApp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryPlatHourKPIByApp failed: unknown result");
    }

    public Map<String,Map<Integer,Double>> queryPlatDayKPIByApp(String appkey, String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException
    {
      send_queryPlatDayKPIByApp(appkey, code, begindate, enddate, platform);
      return recv_queryPlatDayKPIByApp();
    }

    public void send_queryPlatDayKPIByApp(String appkey, String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException
    {
      queryPlatDayKPIByApp_args args = new queryPlatDayKPIByApp_args();
      args.setAppkey(appkey);
      args.setCode(code);
      args.setBegindate(begindate);
      args.setEnddate(enddate);
      args.setPlatform(platform);
      sendBase("queryPlatDayKPIByApp", args);
    }

    public Map<String,Map<Integer,Double>> recv_queryPlatDayKPIByApp() throws org.apache.thrift.TException
    {
      queryPlatDayKPIByApp_result result = new queryPlatDayKPIByApp_result();
      receiveBase(result, "queryPlatDayKPIByApp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryPlatDayKPIByApp failed: unknown result");
    }

    public Map<String,Map<Integer,Double>> queryPlatMonthKPIByApp(String appkey, String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException
    {
      send_queryPlatMonthKPIByApp(appkey, code, begindate, enddate, platform);
      return recv_queryPlatMonthKPIByApp();
    }

    public void send_queryPlatMonthKPIByApp(String appkey, String code, int begindate, int enddate, String platform) throws org.apache.thrift.TException
    {
      queryPlatMonthKPIByApp_args args = new queryPlatMonthKPIByApp_args();
      args.setAppkey(appkey);
      args.setCode(code);
      args.setBegindate(begindate);
      args.setEnddate(enddate);
      args.setPlatform(platform);
      sendBase("queryPlatMonthKPIByApp", args);
    }

    public Map<String,Map<Integer,Double>> recv_queryPlatMonthKPIByApp() throws org.apache.thrift.TException
    {
      queryPlatMonthKPIByApp_result result = new queryPlatMonthKPIByApp_result();
      receiveBase(result, "queryPlatMonthKPIByApp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryPlatMonthKPIByApp failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void queryHourKPIByApp(String appkey, String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryHourKPIByApp_call method_call = new queryHourKPIByApp_call(appkey, code, begindate, enddate, platform, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryHourKPIByApp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appkey;
      private String code;
      private int begindate;
      private int enddate;
      private String platform;
      public queryHourKPIByApp_call(String appkey, String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appkey = appkey;
        this.code = code;
        this.begindate = begindate;
        this.enddate = enddate;
        this.platform = platform;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryHourKPIByApp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryHourKPIByApp_args args = new queryHourKPIByApp_args();
        args.setAppkey(appkey);
        args.setCode(code);
        args.setBegindate(begindate);
        args.setEnddate(enddate);
        args.setPlatform(platform);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Integer,Map<Integer,Double>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryHourKPIByApp();
      }
    }

    public void queryHourKPI(String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryHourKPI_call method_call = new queryHourKPI_call(code, begindate, enddate, platform, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryHourKPI_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String code;
      private int begindate;
      private int enddate;
      private String platform;
      public queryHourKPI_call(String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.code = code;
        this.begindate = begindate;
        this.enddate = enddate;
        this.platform = platform;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryHourKPI", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryHourKPI_args args = new queryHourKPI_args();
        args.setCode(code);
        args.setBegindate(begindate);
        args.setEnddate(enddate);
        args.setPlatform(platform);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Integer,Map<Integer,Double>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryHourKPI();
      }
    }

    public void queryDayKPIByApp(String appkey, String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryDayKPIByApp_call method_call = new queryDayKPIByApp_call(appkey, code, begindate, enddate, platform, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryDayKPIByApp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appkey;
      private String code;
      private int begindate;
      private int enddate;
      private String platform;
      public queryDayKPIByApp_call(String appkey, String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appkey = appkey;
        this.code = code;
        this.begindate = begindate;
        this.enddate = enddate;
        this.platform = platform;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryDayKPIByApp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryDayKPIByApp_args args = new queryDayKPIByApp_args();
        args.setAppkey(appkey);
        args.setCode(code);
        args.setBegindate(begindate);
        args.setEnddate(enddate);
        args.setPlatform(platform);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Integer,Double> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryDayKPIByApp();
      }
    }

    public void queryDayKPI(String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryDayKPI_call method_call = new queryDayKPI_call(code, begindate, enddate, platform, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryDayKPI_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String code;
      private int begindate;
      private int enddate;
      private String platform;
      public queryDayKPI_call(String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.code = code;
        this.begindate = begindate;
        this.enddate = enddate;
        this.platform = platform;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryDayKPI", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryDayKPI_args args = new queryDayKPI_args();
        args.setCode(code);
        args.setBegindate(begindate);
        args.setEnddate(enddate);
        args.setPlatform(platform);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Integer,Double> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryDayKPI();
      }
    }

    public void queryMonthKPIByApp(String appkey, String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryMonthKPIByApp_call method_call = new queryMonthKPIByApp_call(appkey, code, begindate, enddate, platform, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryMonthKPIByApp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appkey;
      private String code;
      private int begindate;
      private int enddate;
      private String platform;
      public queryMonthKPIByApp_call(String appkey, String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appkey = appkey;
        this.code = code;
        this.begindate = begindate;
        this.enddate = enddate;
        this.platform = platform;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryMonthKPIByApp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryMonthKPIByApp_args args = new queryMonthKPIByApp_args();
        args.setAppkey(appkey);
        args.setCode(code);
        args.setBegindate(begindate);
        args.setEnddate(enddate);
        args.setPlatform(platform);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Integer,Double> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryMonthKPIByApp();
      }
    }

    public void queryMonthKPI(String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryMonthKPI_call method_call = new queryMonthKPI_call(code, begindate, enddate, platform, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryMonthKPI_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String code;
      private int begindate;
      private int enddate;
      private String platform;
      public queryMonthKPI_call(String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.code = code;
        this.begindate = begindate;
        this.enddate = enddate;
        this.platform = platform;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryMonthKPI", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryMonthKPI_args args = new queryMonthKPI_args();
        args.setCode(code);
        args.setBegindate(begindate);
        args.setEnddate(enddate);
        args.setPlatform(platform);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Integer,Double> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryMonthKPI();
      }
    }

    public void queryRetention(String appkey, String scope, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryRetention_call method_call = new queryRetention_call(appkey, scope, begindate, enddate, platform, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryRetention_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appkey;
      private String scope;
      private int begindate;
      private int enddate;
      private String platform;
      public queryRetention_call(String appkey, String scope, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appkey = appkey;
        this.scope = scope;
        this.begindate = begindate;
        this.enddate = enddate;
        this.platform = platform;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryRetention", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryRetention_args args = new queryRetention_args();
        args.setAppkey(appkey);
        args.setScope(scope);
        args.setBegindate(begindate);
        args.setEnddate(enddate);
        args.setPlatform(platform);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Integer,Map<Integer,Double>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryRetention();
      }
    }

    public void queryHourKPIByGroup(List<String> applist, String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryHourKPIByGroup_call method_call = new queryHourKPIByGroup_call(applist, code, begindate, enddate, platform, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryHourKPIByGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> applist;
      private String code;
      private int begindate;
      private int enddate;
      private String platform;
      public queryHourKPIByGroup_call(List<String> applist, String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applist = applist;
        this.code = code;
        this.begindate = begindate;
        this.enddate = enddate;
        this.platform = platform;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryHourKPIByGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryHourKPIByGroup_args args = new queryHourKPIByGroup_args();
        args.setApplist(applist);
        args.setCode(code);
        args.setBegindate(begindate);
        args.setEnddate(enddate);
        args.setPlatform(platform);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Integer,Map<Integer,Double>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryHourKPIByGroup();
      }
    }

    public void queryDayKPIByGroup(List<String> applist, String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryDayKPIByGroup_call method_call = new queryDayKPIByGroup_call(applist, code, begindate, enddate, platform, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryDayKPIByGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> applist;
      private String code;
      private int begindate;
      private int enddate;
      private String platform;
      public queryDayKPIByGroup_call(List<String> applist, String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applist = applist;
        this.code = code;
        this.begindate = begindate;
        this.enddate = enddate;
        this.platform = platform;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryDayKPIByGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryDayKPIByGroup_args args = new queryDayKPIByGroup_args();
        args.setApplist(applist);
        args.setCode(code);
        args.setBegindate(begindate);
        args.setEnddate(enddate);
        args.setPlatform(platform);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Integer,Double> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryDayKPIByGroup();
      }
    }

    public void queryMonthKPIByGroup(List<String> applist, String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryMonthKPIByGroup_call method_call = new queryMonthKPIByGroup_call(applist, code, begindate, enddate, platform, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryMonthKPIByGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> applist;
      private String code;
      private int begindate;
      private int enddate;
      private String platform;
      public queryMonthKPIByGroup_call(List<String> applist, String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.applist = applist;
        this.code = code;
        this.begindate = begindate;
        this.enddate = enddate;
        this.platform = platform;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryMonthKPIByGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryMonthKPIByGroup_args args = new queryMonthKPIByGroup_args();
        args.setApplist(applist);
        args.setCode(code);
        args.setBegindate(begindate);
        args.setEnddate(enddate);
        args.setPlatform(platform);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<Integer,Double> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryMonthKPIByGroup();
      }
    }

    public void queryTOPNByDay(String code, int topn, int itime, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryTOPNByDay_call method_call = new queryTOPNByDay_call(code, topn, itime, platform, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryTOPNByDay_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String code;
      private int topn;
      private int itime;
      private String platform;
      public queryTOPNByDay_call(String code, int topn, int itime, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.code = code;
        this.topn = topn;
        this.itime = itime;
        this.platform = platform;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryTOPNByDay", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryTOPNByDay_args args = new queryTOPNByDay_args();
        args.setCode(code);
        args.setTopn(topn);
        args.setItime(itime);
        args.setPlatform(platform);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Map<String,String>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryTOPNByDay();
      }
    }

    public void queryTrendByDay(String code, int no, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryTrendByDay_call method_call = new queryTrendByDay_call(code, no, begindate, enddate, platform, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryTrendByDay_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String code;
      private int no;
      private int begindate;
      private int enddate;
      private String platform;
      public queryTrendByDay_call(String code, int no, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.code = code;
        this.no = no;
        this.begindate = begindate;
        this.enddate = enddate;
        this.platform = platform;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryTrendByDay", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryTrendByDay_args args = new queryTrendByDay_args();
        args.setCode(code);
        args.setNo(no);
        args.setBegindate(begindate);
        args.setEnddate(enddate);
        args.setPlatform(platform);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryTrendByDay();
      }
    }

    public void queryPlatHourKPIByApp(String appkey, String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryPlatHourKPIByApp_call method_call = new queryPlatHourKPIByApp_call(appkey, code, begindate, enddate, platform, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryPlatHourKPIByApp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appkey;
      private String code;
      private int begindate;
      private int enddate;
      private String platform;
      public queryPlatHourKPIByApp_call(String appkey, String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appkey = appkey;
        this.code = code;
        this.begindate = begindate;
        this.enddate = enddate;
        this.platform = platform;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryPlatHourKPIByApp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryPlatHourKPIByApp_args args = new queryPlatHourKPIByApp_args();
        args.setAppkey(appkey);
        args.setCode(code);
        args.setBegindate(begindate);
        args.setEnddate(enddate);
        args.setPlatform(platform);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Map<Integer,Map<Integer,Double>>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryPlatHourKPIByApp();
      }
    }

    public void queryPlatDayKPIByApp(String appkey, String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryPlatDayKPIByApp_call method_call = new queryPlatDayKPIByApp_call(appkey, code, begindate, enddate, platform, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryPlatDayKPIByApp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appkey;
      private String code;
      private int begindate;
      private int enddate;
      private String platform;
      public queryPlatDayKPIByApp_call(String appkey, String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appkey = appkey;
        this.code = code;
        this.begindate = begindate;
        this.enddate = enddate;
        this.platform = platform;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryPlatDayKPIByApp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryPlatDayKPIByApp_args args = new queryPlatDayKPIByApp_args();
        args.setAppkey(appkey);
        args.setCode(code);
        args.setBegindate(begindate);
        args.setEnddate(enddate);
        args.setPlatform(platform);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Map<Integer,Double>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryPlatDayKPIByApp();
      }
    }

    public void queryPlatMonthKPIByApp(String appkey, String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryPlatMonthKPIByApp_call method_call = new queryPlatMonthKPIByApp_call(appkey, code, begindate, enddate, platform, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryPlatMonthKPIByApp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String appkey;
      private String code;
      private int begindate;
      private int enddate;
      private String platform;
      public queryPlatMonthKPIByApp_call(String appkey, String code, int begindate, int enddate, String platform, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.appkey = appkey;
        this.code = code;
        this.begindate = begindate;
        this.enddate = enddate;
        this.platform = platform;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryPlatMonthKPIByApp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryPlatMonthKPIByApp_args args = new queryPlatMonthKPIByApp_args();
        args.setAppkey(appkey);
        args.setCode(code);
        args.setBegindate(begindate);
        args.setEnddate(enddate);
        args.setPlatform(platform);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,Map<Integer,Double>> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryPlatMonthKPIByApp();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("queryHourKPIByApp", new queryHourKPIByApp());
      processMap.put("queryHourKPI", new queryHourKPI());
      processMap.put("queryDayKPIByApp", new queryDayKPIByApp());
      processMap.put("queryDayKPI", new queryDayKPI());
      processMap.put("queryMonthKPIByApp", new queryMonthKPIByApp());
      processMap.put("queryMonthKPI", new queryMonthKPI());
      processMap.put("queryRetention", new queryRetention());
      processMap.put("queryHourKPIByGroup", new queryHourKPIByGroup());
      processMap.put("queryDayKPIByGroup", new queryDayKPIByGroup());
      processMap.put("queryMonthKPIByGroup", new queryMonthKPIByGroup());
      processMap.put("queryTOPNByDay", new queryTOPNByDay());
      processMap.put("queryTrendByDay", new queryTrendByDay());
      processMap.put("queryPlatHourKPIByApp", new queryPlatHourKPIByApp());
      processMap.put("queryPlatDayKPIByApp", new queryPlatDayKPIByApp());
      processMap.put("queryPlatMonthKPIByApp", new queryPlatMonthKPIByApp());
      return processMap;
    }

    public static class queryHourKPIByApp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryHourKPIByApp_args> {
      public queryHourKPIByApp() {
        super("queryHourKPIByApp");
      }

      public queryHourKPIByApp_args getEmptyArgsInstance() {
        return new queryHourKPIByApp_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryHourKPIByApp_result getResult(I iface, queryHourKPIByApp_args args) throws org.apache.thrift.TException {
        queryHourKPIByApp_result result = new queryHourKPIByApp_result();
        result.success = iface.queryHourKPIByApp(args.appkey, args.code, args.begindate, args.enddate, args.platform);
        return result;
      }
    }

    public static class queryHourKPI<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryHourKPI_args> {
      public queryHourKPI() {
        super("queryHourKPI");
      }

      public queryHourKPI_args getEmptyArgsInstance() {
        return new queryHourKPI_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryHourKPI_result getResult(I iface, queryHourKPI_args args) throws org.apache.thrift.TException {
        queryHourKPI_result result = new queryHourKPI_result();
        result.success = iface.queryHourKPI(args.code, args.begindate, args.enddate, args.platform);
        return result;
      }
    }

    public static class queryDayKPIByApp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryDayKPIByApp_args> {
      public queryDayKPIByApp() {
        super("queryDayKPIByApp");
      }

      public queryDayKPIByApp_args getEmptyArgsInstance() {
        return new queryDayKPIByApp_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryDayKPIByApp_result getResult(I iface, queryDayKPIByApp_args args) throws org.apache.thrift.TException {
        queryDayKPIByApp_result result = new queryDayKPIByApp_result();
        result.success = iface.queryDayKPIByApp(args.appkey, args.code, args.begindate, args.enddate, args.platform);
        return result;
      }
    }

    public static class queryDayKPI<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryDayKPI_args> {
      public queryDayKPI() {
        super("queryDayKPI");
      }

      public queryDayKPI_args getEmptyArgsInstance() {
        return new queryDayKPI_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryDayKPI_result getResult(I iface, queryDayKPI_args args) throws org.apache.thrift.TException {
        queryDayKPI_result result = new queryDayKPI_result();
        result.success = iface.queryDayKPI(args.code, args.begindate, args.enddate, args.platform);
        return result;
      }
    }

    public static class queryMonthKPIByApp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryMonthKPIByApp_args> {
      public queryMonthKPIByApp() {
        super("queryMonthKPIByApp");
      }

      public queryMonthKPIByApp_args getEmptyArgsInstance() {
        return new queryMonthKPIByApp_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryMonthKPIByApp_result getResult(I iface, queryMonthKPIByApp_args args) throws org.apache.thrift.TException {
        queryMonthKPIByApp_result result = new queryMonthKPIByApp_result();
        result.success = iface.queryMonthKPIByApp(args.appkey, args.code, args.begindate, args.enddate, args.platform);
        return result;
      }
    }

    public static class queryMonthKPI<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryMonthKPI_args> {
      public queryMonthKPI() {
        super("queryMonthKPI");
      }

      public queryMonthKPI_args getEmptyArgsInstance() {
        return new queryMonthKPI_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryMonthKPI_result getResult(I iface, queryMonthKPI_args args) throws org.apache.thrift.TException {
        queryMonthKPI_result result = new queryMonthKPI_result();
        result.success = iface.queryMonthKPI(args.code, args.begindate, args.enddate, args.platform);
        return result;
      }
    }

    public static class queryRetention<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryRetention_args> {
      public queryRetention() {
        super("queryRetention");
      }

      public queryRetention_args getEmptyArgsInstance() {
        return new queryRetention_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryRetention_result getResult(I iface, queryRetention_args args) throws org.apache.thrift.TException {
        queryRetention_result result = new queryRetention_result();
        result.success = iface.queryRetention(args.appkey, args.scope, args.begindate, args.enddate, args.platform);
        return result;
      }
    }

    public static class queryHourKPIByGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryHourKPIByGroup_args> {
      public queryHourKPIByGroup() {
        super("queryHourKPIByGroup");
      }

      public queryHourKPIByGroup_args getEmptyArgsInstance() {
        return new queryHourKPIByGroup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryHourKPIByGroup_result getResult(I iface, queryHourKPIByGroup_args args) throws org.apache.thrift.TException {
        queryHourKPIByGroup_result result = new queryHourKPIByGroup_result();
        result.success = iface.queryHourKPIByGroup(args.applist, args.code, args.begindate, args.enddate, args.platform);
        return result;
      }
    }

    public static class queryDayKPIByGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryDayKPIByGroup_args> {
      public queryDayKPIByGroup() {
        super("queryDayKPIByGroup");
      }

      public queryDayKPIByGroup_args getEmptyArgsInstance() {
        return new queryDayKPIByGroup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryDayKPIByGroup_result getResult(I iface, queryDayKPIByGroup_args args) throws org.apache.thrift.TException {
        queryDayKPIByGroup_result result = new queryDayKPIByGroup_result();
        result.success = iface.queryDayKPIByGroup(args.applist, args.code, args.begindate, args.enddate, args.platform);
        return result;
      }
    }

    public static class queryMonthKPIByGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryMonthKPIByGroup_args> {
      public queryMonthKPIByGroup() {
        super("queryMonthKPIByGroup");
      }

      public queryMonthKPIByGroup_args getEmptyArgsInstance() {
        return new queryMonthKPIByGroup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryMonthKPIByGroup_result getResult(I iface, queryMonthKPIByGroup_args args) throws org.apache.thrift.TException {
        queryMonthKPIByGroup_result result = new queryMonthKPIByGroup_result();
        result.success = iface.queryMonthKPIByGroup(args.applist, args.code, args.begindate, args.enddate, args.platform);
        return result;
      }
    }

    public static class queryTOPNByDay<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryTOPNByDay_args> {
      public queryTOPNByDay() {
        super("queryTOPNByDay");
      }

      public queryTOPNByDay_args getEmptyArgsInstance() {
        return new queryTOPNByDay_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryTOPNByDay_result getResult(I iface, queryTOPNByDay_args args) throws org.apache.thrift.TException {
        queryTOPNByDay_result result = new queryTOPNByDay_result();
        result.success = iface.queryTOPNByDay(args.code, args.topn, args.itime, args.platform);
        return result;
      }
    }

    public static class queryTrendByDay<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryTrendByDay_args> {
      public queryTrendByDay() {
        super("queryTrendByDay");
      }

      public queryTrendByDay_args getEmptyArgsInstance() {
        return new queryTrendByDay_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryTrendByDay_result getResult(I iface, queryTrendByDay_args args) throws org.apache.thrift.TException {
        queryTrendByDay_result result = new queryTrendByDay_result();
        result.success = iface.queryTrendByDay(args.code, args.no, args.begindate, args.enddate, args.platform);
        return result;
      }
    }

    public static class queryPlatHourKPIByApp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryPlatHourKPIByApp_args> {
      public queryPlatHourKPIByApp() {
        super("queryPlatHourKPIByApp");
      }

      public queryPlatHourKPIByApp_args getEmptyArgsInstance() {
        return new queryPlatHourKPIByApp_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryPlatHourKPIByApp_result getResult(I iface, queryPlatHourKPIByApp_args args) throws org.apache.thrift.TException {
        queryPlatHourKPIByApp_result result = new queryPlatHourKPIByApp_result();
        result.success = iface.queryPlatHourKPIByApp(args.appkey, args.code, args.begindate, args.enddate, args.platform);
        return result;
      }
    }

    public static class queryPlatDayKPIByApp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryPlatDayKPIByApp_args> {
      public queryPlatDayKPIByApp() {
        super("queryPlatDayKPIByApp");
      }

      public queryPlatDayKPIByApp_args getEmptyArgsInstance() {
        return new queryPlatDayKPIByApp_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryPlatDayKPIByApp_result getResult(I iface, queryPlatDayKPIByApp_args args) throws org.apache.thrift.TException {
        queryPlatDayKPIByApp_result result = new queryPlatDayKPIByApp_result();
        result.success = iface.queryPlatDayKPIByApp(args.appkey, args.code, args.begindate, args.enddate, args.platform);
        return result;
      }
    }

    public static class queryPlatMonthKPIByApp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryPlatMonthKPIByApp_args> {
      public queryPlatMonthKPIByApp() {
        super("queryPlatMonthKPIByApp");
      }

      public queryPlatMonthKPIByApp_args getEmptyArgsInstance() {
        return new queryPlatMonthKPIByApp_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryPlatMonthKPIByApp_result getResult(I iface, queryPlatMonthKPIByApp_args args) throws org.apache.thrift.TException {
        queryPlatMonthKPIByApp_result result = new queryPlatMonthKPIByApp_result();
        result.success = iface.queryPlatMonthKPIByApp(args.appkey, args.code, args.begindate, args.enddate, args.platform);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("queryHourKPIByApp", new queryHourKPIByApp());
      processMap.put("queryHourKPI", new queryHourKPI());
      processMap.put("queryDayKPIByApp", new queryDayKPIByApp());
      processMap.put("queryDayKPI", new queryDayKPI());
      processMap.put("queryMonthKPIByApp", new queryMonthKPIByApp());
      processMap.put("queryMonthKPI", new queryMonthKPI());
      processMap.put("queryRetention", new queryRetention());
      processMap.put("queryHourKPIByGroup", new queryHourKPIByGroup());
      processMap.put("queryDayKPIByGroup", new queryDayKPIByGroup());
      processMap.put("queryMonthKPIByGroup", new queryMonthKPIByGroup());
      processMap.put("queryTOPNByDay", new queryTOPNByDay());
      processMap.put("queryTrendByDay", new queryTrendByDay());
      processMap.put("queryPlatHourKPIByApp", new queryPlatHourKPIByApp());
      processMap.put("queryPlatDayKPIByApp", new queryPlatDayKPIByApp());
      processMap.put("queryPlatMonthKPIByApp", new queryPlatMonthKPIByApp());
      return processMap;
    }

    public static class queryHourKPIByApp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryHourKPIByApp_args, Map<Integer,Map<Integer,Double>>> {
      public queryHourKPIByApp() {
        super("queryHourKPIByApp");
      }

      public queryHourKPIByApp_args getEmptyArgsInstance() {
        return new queryHourKPIByApp_args();
      }

      public AsyncMethodCallback<Map<Integer,Map<Integer,Double>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<Integer,Map<Integer,Double>>>() { 
          public void onComplete(Map<Integer,Map<Integer,Double>> o) {
            queryHourKPIByApp_result result = new queryHourKPIByApp_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryHourKPIByApp_result result = new queryHourKPIByApp_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryHourKPIByApp_args args, org.apache.thrift.async.AsyncMethodCallback<Map<Integer,Map<Integer,Double>>> resultHandler) throws TException {
        iface.queryHourKPIByApp(args.appkey, args.code, args.begindate, args.enddate, args.platform,resultHandler);
      }
    }

    public static class queryHourKPI<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryHourKPI_args, Map<Integer,Map<Integer,Double>>> {
      public queryHourKPI() {
        super("queryHourKPI");
      }

      public queryHourKPI_args getEmptyArgsInstance() {
        return new queryHourKPI_args();
      }

      public AsyncMethodCallback<Map<Integer,Map<Integer,Double>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<Integer,Map<Integer,Double>>>() { 
          public void onComplete(Map<Integer,Map<Integer,Double>> o) {
            queryHourKPI_result result = new queryHourKPI_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryHourKPI_result result = new queryHourKPI_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryHourKPI_args args, org.apache.thrift.async.AsyncMethodCallback<Map<Integer,Map<Integer,Double>>> resultHandler) throws TException {
        iface.queryHourKPI(args.code, args.begindate, args.enddate, args.platform,resultHandler);
      }
    }

    public static class queryDayKPIByApp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryDayKPIByApp_args, Map<Integer,Double>> {
      public queryDayKPIByApp() {
        super("queryDayKPIByApp");
      }

      public queryDayKPIByApp_args getEmptyArgsInstance() {
        return new queryDayKPIByApp_args();
      }

      public AsyncMethodCallback<Map<Integer,Double>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<Integer,Double>>() { 
          public void onComplete(Map<Integer,Double> o) {
            queryDayKPIByApp_result result = new queryDayKPIByApp_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryDayKPIByApp_result result = new queryDayKPIByApp_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryDayKPIByApp_args args, org.apache.thrift.async.AsyncMethodCallback<Map<Integer,Double>> resultHandler) throws TException {
        iface.queryDayKPIByApp(args.appkey, args.code, args.begindate, args.enddate, args.platform,resultHandler);
      }
    }

    public static class queryDayKPI<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryDayKPI_args, Map<Integer,Double>> {
      public queryDayKPI() {
        super("queryDayKPI");
      }

      public queryDayKPI_args getEmptyArgsInstance() {
        return new queryDayKPI_args();
      }

      public AsyncMethodCallback<Map<Integer,Double>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<Integer,Double>>() { 
          public void onComplete(Map<Integer,Double> o) {
            queryDayKPI_result result = new queryDayKPI_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryDayKPI_result result = new queryDayKPI_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryDayKPI_args args, org.apache.thrift.async.AsyncMethodCallback<Map<Integer,Double>> resultHandler) throws TException {
        iface.queryDayKPI(args.code, args.begindate, args.enddate, args.platform,resultHandler);
      }
    }

    public static class queryMonthKPIByApp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryMonthKPIByApp_args, Map<Integer,Double>> {
      public queryMonthKPIByApp() {
        super("queryMonthKPIByApp");
      }

      public queryMonthKPIByApp_args getEmptyArgsInstance() {
        return new queryMonthKPIByApp_args();
      }

      public AsyncMethodCallback<Map<Integer,Double>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<Integer,Double>>() { 
          public void onComplete(Map<Integer,Double> o) {
            queryMonthKPIByApp_result result = new queryMonthKPIByApp_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryMonthKPIByApp_result result = new queryMonthKPIByApp_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryMonthKPIByApp_args args, org.apache.thrift.async.AsyncMethodCallback<Map<Integer,Double>> resultHandler) throws TException {
        iface.queryMonthKPIByApp(args.appkey, args.code, args.begindate, args.enddate, args.platform,resultHandler);
      }
    }

    public static class queryMonthKPI<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryMonthKPI_args, Map<Integer,Double>> {
      public queryMonthKPI() {
        super("queryMonthKPI");
      }

      public queryMonthKPI_args getEmptyArgsInstance() {
        return new queryMonthKPI_args();
      }

      public AsyncMethodCallback<Map<Integer,Double>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<Integer,Double>>() { 
          public void onComplete(Map<Integer,Double> o) {
            queryMonthKPI_result result = new queryMonthKPI_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryMonthKPI_result result = new queryMonthKPI_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryMonthKPI_args args, org.apache.thrift.async.AsyncMethodCallback<Map<Integer,Double>> resultHandler) throws TException {
        iface.queryMonthKPI(args.code, args.begindate, args.enddate, args.platform,resultHandler);
      }
    }

    public static class queryRetention<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryRetention_args, Map<Integer,Map<Integer,Double>>> {
      public queryRetention() {
        super("queryRetention");
      }

      public queryRetention_args getEmptyArgsInstance() {
        return new queryRetention_args();
      }

      public AsyncMethodCallback<Map<Integer,Map<Integer,Double>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<Integer,Map<Integer,Double>>>() { 
          public void onComplete(Map<Integer,Map<Integer,Double>> o) {
            queryRetention_result result = new queryRetention_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryRetention_result result = new queryRetention_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryRetention_args args, org.apache.thrift.async.AsyncMethodCallback<Map<Integer,Map<Integer,Double>>> resultHandler) throws TException {
        iface.queryRetention(args.appkey, args.scope, args.begindate, args.enddate, args.platform,resultHandler);
      }
    }

    public static class queryHourKPIByGroup<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryHourKPIByGroup_args, Map<Integer,Map<Integer,Double>>> {
      public queryHourKPIByGroup() {
        super("queryHourKPIByGroup");
      }

      public queryHourKPIByGroup_args getEmptyArgsInstance() {
        return new queryHourKPIByGroup_args();
      }

      public AsyncMethodCallback<Map<Integer,Map<Integer,Double>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<Integer,Map<Integer,Double>>>() { 
          public void onComplete(Map<Integer,Map<Integer,Double>> o) {
            queryHourKPIByGroup_result result = new queryHourKPIByGroup_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryHourKPIByGroup_result result = new queryHourKPIByGroup_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryHourKPIByGroup_args args, org.apache.thrift.async.AsyncMethodCallback<Map<Integer,Map<Integer,Double>>> resultHandler) throws TException {
        iface.queryHourKPIByGroup(args.applist, args.code, args.begindate, args.enddate, args.platform,resultHandler);
      }
    }

    public static class queryDayKPIByGroup<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryDayKPIByGroup_args, Map<Integer,Double>> {
      public queryDayKPIByGroup() {
        super("queryDayKPIByGroup");
      }

      public queryDayKPIByGroup_args getEmptyArgsInstance() {
        return new queryDayKPIByGroup_args();
      }

      public AsyncMethodCallback<Map<Integer,Double>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<Integer,Double>>() { 
          public void onComplete(Map<Integer,Double> o) {
            queryDayKPIByGroup_result result = new queryDayKPIByGroup_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryDayKPIByGroup_result result = new queryDayKPIByGroup_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryDayKPIByGroup_args args, org.apache.thrift.async.AsyncMethodCallback<Map<Integer,Double>> resultHandler) throws TException {
        iface.queryDayKPIByGroup(args.applist, args.code, args.begindate, args.enddate, args.platform,resultHandler);
      }
    }

    public static class queryMonthKPIByGroup<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryMonthKPIByGroup_args, Map<Integer,Double>> {
      public queryMonthKPIByGroup() {
        super("queryMonthKPIByGroup");
      }

      public queryMonthKPIByGroup_args getEmptyArgsInstance() {
        return new queryMonthKPIByGroup_args();
      }

      public AsyncMethodCallback<Map<Integer,Double>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<Integer,Double>>() { 
          public void onComplete(Map<Integer,Double> o) {
            queryMonthKPIByGroup_result result = new queryMonthKPIByGroup_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryMonthKPIByGroup_result result = new queryMonthKPIByGroup_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryMonthKPIByGroup_args args, org.apache.thrift.async.AsyncMethodCallback<Map<Integer,Double>> resultHandler) throws TException {
        iface.queryMonthKPIByGroup(args.applist, args.code, args.begindate, args.enddate, args.platform,resultHandler);
      }
    }

    public static class queryTOPNByDay<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryTOPNByDay_args, List<Map<String,String>>> {
      public queryTOPNByDay() {
        super("queryTOPNByDay");
      }

      public queryTOPNByDay_args getEmptyArgsInstance() {
        return new queryTOPNByDay_args();
      }

      public AsyncMethodCallback<List<Map<String,String>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Map<String,String>>>() { 
          public void onComplete(List<Map<String,String>> o) {
            queryTOPNByDay_result result = new queryTOPNByDay_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryTOPNByDay_result result = new queryTOPNByDay_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryTOPNByDay_args args, org.apache.thrift.async.AsyncMethodCallback<List<Map<String,String>>> resultHandler) throws TException {
        iface.queryTOPNByDay(args.code, args.topn, args.itime, args.platform,resultHandler);
      }
    }

    public static class queryTrendByDay<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryTrendByDay_args, Map<String,String>> {
      public queryTrendByDay() {
        super("queryTrendByDay");
      }

      public queryTrendByDay_args getEmptyArgsInstance() {
        return new queryTrendByDay_args();
      }

      public AsyncMethodCallback<Map<String,String>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,String>>() { 
          public void onComplete(Map<String,String> o) {
            queryTrendByDay_result result = new queryTrendByDay_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryTrendByDay_result result = new queryTrendByDay_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryTrendByDay_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,String>> resultHandler) throws TException {
        iface.queryTrendByDay(args.code, args.no, args.begindate, args.enddate, args.platform,resultHandler);
      }
    }

    public static class queryPlatHourKPIByApp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryPlatHourKPIByApp_args, Map<String,Map<Integer,Map<Integer,Double>>>> {
      public queryPlatHourKPIByApp() {
        super("queryPlatHourKPIByApp");
      }

      public queryPlatHourKPIByApp_args getEmptyArgsInstance() {
        return new queryPlatHourKPIByApp_args();
      }

      public AsyncMethodCallback<Map<String,Map<Integer,Map<Integer,Double>>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,Map<Integer,Map<Integer,Double>>>>() { 
          public void onComplete(Map<String,Map<Integer,Map<Integer,Double>>> o) {
            queryPlatHourKPIByApp_result result = new queryPlatHourKPIByApp_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryPlatHourKPIByApp_result result = new queryPlatHourKPIByApp_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryPlatHourKPIByApp_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,Map<Integer,Map<Integer,Double>>>> resultHandler) throws TException {
        iface.queryPlatHourKPIByApp(args.appkey, args.code, args.begindate, args.enddate, args.platform,resultHandler);
      }
    }

    public static class queryPlatDayKPIByApp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryPlatDayKPIByApp_args, Map<String,Map<Integer,Double>>> {
      public queryPlatDayKPIByApp() {
        super("queryPlatDayKPIByApp");
      }

      public queryPlatDayKPIByApp_args getEmptyArgsInstance() {
        return new queryPlatDayKPIByApp_args();
      }

      public AsyncMethodCallback<Map<String,Map<Integer,Double>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,Map<Integer,Double>>>() { 
          public void onComplete(Map<String,Map<Integer,Double>> o) {
            queryPlatDayKPIByApp_result result = new queryPlatDayKPIByApp_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryPlatDayKPIByApp_result result = new queryPlatDayKPIByApp_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryPlatDayKPIByApp_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,Map<Integer,Double>>> resultHandler) throws TException {
        iface.queryPlatDayKPIByApp(args.appkey, args.code, args.begindate, args.enddate, args.platform,resultHandler);
      }
    }

    public static class queryPlatMonthKPIByApp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryPlatMonthKPIByApp_args, Map<String,Map<Integer,Double>>> {
      public queryPlatMonthKPIByApp() {
        super("queryPlatMonthKPIByApp");
      }

      public queryPlatMonthKPIByApp_args getEmptyArgsInstance() {
        return new queryPlatMonthKPIByApp_args();
      }

      public AsyncMethodCallback<Map<String,Map<Integer,Double>>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,Map<Integer,Double>>>() { 
          public void onComplete(Map<String,Map<Integer,Double>> o) {
            queryPlatMonthKPIByApp_result result = new queryPlatMonthKPIByApp_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryPlatMonthKPIByApp_result result = new queryPlatMonthKPIByApp_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryPlatMonthKPIByApp_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,Map<Integer,Double>>> resultHandler) throws TException {
        iface.queryPlatMonthKPIByApp(args.appkey, args.code, args.begindate, args.enddate, args.platform,resultHandler);
      }
    }

  }

  public static class queryHourKPIByApp_args implements org.apache.thrift.TBase<queryHourKPIByApp_args, queryHourKPIByApp_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryHourKPIByApp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryHourKPIByApp_args");

    private static final org.apache.thrift.protocol.TField APPKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appkey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BEGINDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("begindate", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ENDDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("enddate", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryHourKPIByApp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryHourKPIByApp_argsTupleSchemeFactory());
    }

    public String appkey; // required
    public String code; // required
    public int begindate; // required
    public int enddate; // required
    public String platform; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPKEY((short)1, "appkey"),
      CODE((short)2, "code"),
      BEGINDATE((short)3, "begindate"),
      ENDDATE((short)4, "enddate"),
      PLATFORM((short)5, "platform");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPKEY
            return APPKEY;
          case 2: // CODE
            return CODE;
          case 3: // BEGINDATE
            return BEGINDATE;
          case 4: // ENDDATE
            return ENDDATE;
          case 5: // PLATFORM
            return PLATFORM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BEGINDATE_ISSET_ID = 0;
    private static final int __ENDDATE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPKEY, new org.apache.thrift.meta_data.FieldMetaData("appkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEGINDATE, new org.apache.thrift.meta_data.FieldMetaData("begindate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ENDDATE, new org.apache.thrift.meta_data.FieldMetaData("enddate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryHourKPIByApp_args.class, metaDataMap);
    }

    public queryHourKPIByApp_args() {
    }

    public queryHourKPIByApp_args(
      String appkey,
      String code,
      int begindate,
      int enddate,
      String platform)
    {
      this();
      this.appkey = appkey;
      this.code = code;
      this.begindate = begindate;
      setBegindateIsSet(true);
      this.enddate = enddate;
      setEnddateIsSet(true);
      this.platform = platform;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryHourKPIByApp_args(queryHourKPIByApp_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAppkey()) {
        this.appkey = other.appkey;
      }
      if (other.isSetCode()) {
        this.code = other.code;
      }
      this.begindate = other.begindate;
      this.enddate = other.enddate;
      if (other.isSetPlatform()) {
        this.platform = other.platform;
      }
    }

    public queryHourKPIByApp_args deepCopy() {
      return new queryHourKPIByApp_args(this);
    }

    @Override
    public void clear() {
      this.appkey = null;
      this.code = null;
      setBegindateIsSet(false);
      this.begindate = 0;
      setEnddateIsSet(false);
      this.enddate = 0;
      this.platform = null;
    }

    public String getAppkey() {
      return this.appkey;
    }

    public queryHourKPIByApp_args setAppkey(String appkey) {
      this.appkey = appkey;
      return this;
    }

    public void unsetAppkey() {
      this.appkey = null;
    }

    /** Returns true if field appkey is set (has been assigned a value) and false otherwise */
    public boolean isSetAppkey() {
      return this.appkey != null;
    }

    public void setAppkeyIsSet(boolean value) {
      if (!value) {
        this.appkey = null;
      }
    }

    public String getCode() {
      return this.code;
    }

    public queryHourKPIByApp_args setCode(String code) {
      this.code = code;
      return this;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public int getBegindate() {
      return this.begindate;
    }

    public queryHourKPIByApp_args setBegindate(int begindate) {
      this.begindate = begindate;
      setBegindateIsSet(true);
      return this;
    }

    public void unsetBegindate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGINDATE_ISSET_ID);
    }

    /** Returns true if field begindate is set (has been assigned a value) and false otherwise */
    public boolean isSetBegindate() {
      return EncodingUtils.testBit(__isset_bitfield, __BEGINDATE_ISSET_ID);
    }

    public void setBegindateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGINDATE_ISSET_ID, value);
    }

    public int getEnddate() {
      return this.enddate;
    }

    public queryHourKPIByApp_args setEnddate(int enddate) {
      this.enddate = enddate;
      setEnddateIsSet(true);
      return this;
    }

    public void unsetEnddate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    /** Returns true if field enddate is set (has been assigned a value) and false otherwise */
    public boolean isSetEnddate() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    public void setEnddateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDATE_ISSET_ID, value);
    }

    public String getPlatform() {
      return this.platform;
    }

    public queryHourKPIByApp_args setPlatform(String platform) {
      this.platform = platform;
      return this;
    }

    public void unsetPlatform() {
      this.platform = null;
    }

    /** Returns true if field platform is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatform() {
      return this.platform != null;
    }

    public void setPlatformIsSet(boolean value) {
      if (!value) {
        this.platform = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPKEY:
        if (value == null) {
          unsetAppkey();
        } else {
          setAppkey((String)value);
        }
        break;

      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((String)value);
        }
        break;

      case BEGINDATE:
        if (value == null) {
          unsetBegindate();
        } else {
          setBegindate((Integer)value);
        }
        break;

      case ENDDATE:
        if (value == null) {
          unsetEnddate();
        } else {
          setEnddate((Integer)value);
        }
        break;

      case PLATFORM:
        if (value == null) {
          unsetPlatform();
        } else {
          setPlatform((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPKEY:
        return getAppkey();

      case CODE:
        return getCode();

      case BEGINDATE:
        return Integer.valueOf(getBegindate());

      case ENDDATE:
        return Integer.valueOf(getEnddate());

      case PLATFORM:
        return getPlatform();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPKEY:
        return isSetAppkey();
      case CODE:
        return isSetCode();
      case BEGINDATE:
        return isSetBegindate();
      case ENDDATE:
        return isSetEnddate();
      case PLATFORM:
        return isSetPlatform();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryHourKPIByApp_args)
        return this.equals((queryHourKPIByApp_args)that);
      return false;
    }

    public boolean equals(queryHourKPIByApp_args that) {
      if (that == null)
        return false;

      boolean this_present_appkey = true && this.isSetAppkey();
      boolean that_present_appkey = true && that.isSetAppkey();
      if (this_present_appkey || that_present_appkey) {
        if (!(this_present_appkey && that_present_appkey))
          return false;
        if (!this.appkey.equals(that.appkey))
          return false;
      }

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      boolean this_present_begindate = true;
      boolean that_present_begindate = true;
      if (this_present_begindate || that_present_begindate) {
        if (!(this_present_begindate && that_present_begindate))
          return false;
        if (this.begindate != that.begindate)
          return false;
      }

      boolean this_present_enddate = true;
      boolean that_present_enddate = true;
      if (this_present_enddate || that_present_enddate) {
        if (!(this_present_enddate && that_present_enddate))
          return false;
        if (this.enddate != that.enddate)
          return false;
      }

      boolean this_present_platform = true && this.isSetPlatform();
      boolean that_present_platform = true && that.isSetPlatform();
      if (this_present_platform || that_present_platform) {
        if (!(this_present_platform && that_present_platform))
          return false;
        if (!this.platform.equals(that.platform))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_appkey = true && (isSetAppkey());
      list.add(present_appkey);
      if (present_appkey)
        list.add(appkey);

      boolean present_code = true && (isSetCode());
      list.add(present_code);
      if (present_code)
        list.add(code);

      boolean present_begindate = true;
      list.add(present_begindate);
      if (present_begindate)
        list.add(begindate);

      boolean present_enddate = true;
      list.add(present_enddate);
      if (present_enddate)
        list.add(enddate);

      boolean present_platform = true && (isSetPlatform());
      list.add(present_platform);
      if (present_platform)
        list.add(platform);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryHourKPIByApp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppkey()).compareTo(other.isSetAppkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appkey, other.appkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBegindate()).compareTo(other.isSetBegindate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBegindate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.begindate, other.begindate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnddate()).compareTo(other.isSetEnddate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnddate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enddate, other.enddate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(other.isSetPlatform());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatform()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, other.platform);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryHourKPIByApp_args(");
      boolean first = true;

      sb.append("appkey:");
      if (this.appkey == null) {
        sb.append("null");
      } else {
        sb.append(this.appkey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("begindate:");
      sb.append(this.begindate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("enddate:");
      sb.append(this.enddate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("platform:");
      if (this.platform == null) {
        sb.append("null");
      } else {
        sb.append(this.platform);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryHourKPIByApp_argsStandardSchemeFactory implements SchemeFactory {
      public queryHourKPIByApp_argsStandardScheme getScheme() {
        return new queryHourKPIByApp_argsStandardScheme();
      }
    }

    private static class queryHourKPIByApp_argsStandardScheme extends StandardScheme<queryHourKPIByApp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryHourKPIByApp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPKEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appkey = iprot.readString();
                struct.setAppkeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BEGINDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.begindate = iprot.readI32();
                struct.setBegindateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ENDDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.enddate = iprot.readI32();
                struct.setEnddateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PLATFORM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.platform = iprot.readString();
                struct.setPlatformIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryHourKPIByApp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appkey != null) {
          oprot.writeFieldBegin(APPKEY_FIELD_DESC);
          oprot.writeString(struct.appkey);
          oprot.writeFieldEnd();
        }
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BEGINDATE_FIELD_DESC);
        oprot.writeI32(struct.begindate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ENDDATE_FIELD_DESC);
        oprot.writeI32(struct.enddate);
        oprot.writeFieldEnd();
        if (struct.platform != null) {
          oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
          oprot.writeString(struct.platform);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryHourKPIByApp_argsTupleSchemeFactory implements SchemeFactory {
      public queryHourKPIByApp_argsTupleScheme getScheme() {
        return new queryHourKPIByApp_argsTupleScheme();
      }
    }

    private static class queryHourKPIByApp_argsTupleScheme extends TupleScheme<queryHourKPIByApp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryHourKPIByApp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppkey()) {
          optionals.set(0);
        }
        if (struct.isSetCode()) {
          optionals.set(1);
        }
        if (struct.isSetBegindate()) {
          optionals.set(2);
        }
        if (struct.isSetEnddate()) {
          optionals.set(3);
        }
        if (struct.isSetPlatform()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetAppkey()) {
          oprot.writeString(struct.appkey);
        }
        if (struct.isSetCode()) {
          oprot.writeString(struct.code);
        }
        if (struct.isSetBegindate()) {
          oprot.writeI32(struct.begindate);
        }
        if (struct.isSetEnddate()) {
          oprot.writeI32(struct.enddate);
        }
        if (struct.isSetPlatform()) {
          oprot.writeString(struct.platform);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryHourKPIByApp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.appkey = iprot.readString();
          struct.setAppkeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.code = iprot.readString();
          struct.setCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.begindate = iprot.readI32();
          struct.setBegindateIsSet(true);
        }
        if (incoming.get(3)) {
          struct.enddate = iprot.readI32();
          struct.setEnddateIsSet(true);
        }
        if (incoming.get(4)) {
          struct.platform = iprot.readString();
          struct.setPlatformIsSet(true);
        }
      }
    }

  }

  public static class queryHourKPIByApp_result implements org.apache.thrift.TBase<queryHourKPIByApp_result, queryHourKPIByApp_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryHourKPIByApp_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryHourKPIByApp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryHourKPIByApp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryHourKPIByApp_resultTupleSchemeFactory());
    }

    public Map<Integer,Map<Integer,Double>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryHourKPIByApp_result.class, metaDataMap);
    }

    public queryHourKPIByApp_result() {
    }

    public queryHourKPIByApp_result(
      Map<Integer,Map<Integer,Double>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryHourKPIByApp_result(queryHourKPIByApp_result other) {
      if (other.isSetSuccess()) {
        Map<Integer,Map<Integer,Double>> __this__success = new HashMap<Integer,Map<Integer,Double>>(other.success.size());
        for (Map.Entry<Integer, Map<Integer,Double>> other_element : other.success.entrySet()) {

          Integer other_element_key = other_element.getKey();
          Map<Integer,Double> other_element_value = other_element.getValue();

          Integer __this__success_copy_key = other_element_key;

          Map<Integer,Double> __this__success_copy_value = new HashMap<Integer,Double>(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public queryHourKPIByApp_result deepCopy() {
      return new queryHourKPIByApp_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(int key, Map<Integer,Double> val) {
      if (this.success == null) {
        this.success = new HashMap<Integer,Map<Integer,Double>>();
      }
      this.success.put(key, val);
    }

    public Map<Integer,Map<Integer,Double>> getSuccess() {
      return this.success;
    }

    public queryHourKPIByApp_result setSuccess(Map<Integer,Map<Integer,Double>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<Integer,Map<Integer,Double>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryHourKPIByApp_result)
        return this.equals((queryHourKPIByApp_result)that);
      return false;
    }

    public boolean equals(queryHourKPIByApp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryHourKPIByApp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryHourKPIByApp_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryHourKPIByApp_resultStandardSchemeFactory implements SchemeFactory {
      public queryHourKPIByApp_resultStandardScheme getScheme() {
        return new queryHourKPIByApp_resultStandardScheme();
      }
    }

    private static class queryHourKPIByApp_resultStandardScheme extends StandardScheme<queryHourKPIByApp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryHourKPIByApp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.success = new HashMap<Integer,Map<Integer,Double>>(2*_map0.size);
                  int _key1;
                  Map<Integer,Double> _val2;
                  for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                  {
                    _key1 = iprot.readI32();
                    {
                      org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                      _val2 = new HashMap<Integer,Double>(2*_map4.size);
                      int _key5;
                      double _val6;
                      for (int _i7 = 0; _i7 < _map4.size; ++_i7)
                      {
                        _key5 = iprot.readI32();
                        _val6 = iprot.readDouble();
                        _val2.put(_key5, _val6);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.put(_key1, _val2);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryHourKPIByApp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map.Entry<Integer, Map<Integer,Double>> _iter8 : struct.success.entrySet())
            {
              oprot.writeI32(_iter8.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, _iter8.getValue().size()));
                for (Map.Entry<Integer, Double> _iter9 : _iter8.getValue().entrySet())
                {
                  oprot.writeI32(_iter9.getKey());
                  oprot.writeDouble(_iter9.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryHourKPIByApp_resultTupleSchemeFactory implements SchemeFactory {
      public queryHourKPIByApp_resultTupleScheme getScheme() {
        return new queryHourKPIByApp_resultTupleScheme();
      }
    }

    private static class queryHourKPIByApp_resultTupleScheme extends TupleScheme<queryHourKPIByApp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryHourKPIByApp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<Integer, Map<Integer,Double>> _iter10 : struct.success.entrySet())
            {
              oprot.writeI32(_iter10.getKey());
              {
                oprot.writeI32(_iter10.getValue().size());
                for (Map.Entry<Integer, Double> _iter11 : _iter10.getValue().entrySet())
                {
                  oprot.writeI32(_iter11.getKey());
                  oprot.writeDouble(_iter11.getValue());
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryHourKPIByApp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map12 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new HashMap<Integer,Map<Integer,Double>>(2*_map12.size);
            int _key13;
            Map<Integer,Double> _val14;
            for (int _i15 = 0; _i15 < _map12.size; ++_i15)
            {
              _key13 = iprot.readI32();
              {
                org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
                _val14 = new HashMap<Integer,Double>(2*_map16.size);
                int _key17;
                double _val18;
                for (int _i19 = 0; _i19 < _map16.size; ++_i19)
                {
                  _key17 = iprot.readI32();
                  _val18 = iprot.readDouble();
                  _val14.put(_key17, _val18);
                }
              }
              struct.success.put(_key13, _val14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryHourKPI_args implements org.apache.thrift.TBase<queryHourKPI_args, queryHourKPI_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryHourKPI_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryHourKPI_args");

    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BEGINDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("begindate", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField ENDDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("enddate", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryHourKPI_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryHourKPI_argsTupleSchemeFactory());
    }

    public String code; // required
    public int begindate; // required
    public int enddate; // required
    public String platform; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CODE((short)1, "code"),
      BEGINDATE((short)2, "begindate"),
      ENDDATE((short)3, "enddate"),
      PLATFORM((short)4, "platform");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CODE
            return CODE;
          case 2: // BEGINDATE
            return BEGINDATE;
          case 3: // ENDDATE
            return ENDDATE;
          case 4: // PLATFORM
            return PLATFORM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BEGINDATE_ISSET_ID = 0;
    private static final int __ENDDATE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEGINDATE, new org.apache.thrift.meta_data.FieldMetaData("begindate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ENDDATE, new org.apache.thrift.meta_data.FieldMetaData("enddate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryHourKPI_args.class, metaDataMap);
    }

    public queryHourKPI_args() {
    }

    public queryHourKPI_args(
      String code,
      int begindate,
      int enddate,
      String platform)
    {
      this();
      this.code = code;
      this.begindate = begindate;
      setBegindateIsSet(true);
      this.enddate = enddate;
      setEnddateIsSet(true);
      this.platform = platform;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryHourKPI_args(queryHourKPI_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCode()) {
        this.code = other.code;
      }
      this.begindate = other.begindate;
      this.enddate = other.enddate;
      if (other.isSetPlatform()) {
        this.platform = other.platform;
      }
    }

    public queryHourKPI_args deepCopy() {
      return new queryHourKPI_args(this);
    }

    @Override
    public void clear() {
      this.code = null;
      setBegindateIsSet(false);
      this.begindate = 0;
      setEnddateIsSet(false);
      this.enddate = 0;
      this.platform = null;
    }

    public String getCode() {
      return this.code;
    }

    public queryHourKPI_args setCode(String code) {
      this.code = code;
      return this;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public int getBegindate() {
      return this.begindate;
    }

    public queryHourKPI_args setBegindate(int begindate) {
      this.begindate = begindate;
      setBegindateIsSet(true);
      return this;
    }

    public void unsetBegindate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGINDATE_ISSET_ID);
    }

    /** Returns true if field begindate is set (has been assigned a value) and false otherwise */
    public boolean isSetBegindate() {
      return EncodingUtils.testBit(__isset_bitfield, __BEGINDATE_ISSET_ID);
    }

    public void setBegindateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGINDATE_ISSET_ID, value);
    }

    public int getEnddate() {
      return this.enddate;
    }

    public queryHourKPI_args setEnddate(int enddate) {
      this.enddate = enddate;
      setEnddateIsSet(true);
      return this;
    }

    public void unsetEnddate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    /** Returns true if field enddate is set (has been assigned a value) and false otherwise */
    public boolean isSetEnddate() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    public void setEnddateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDATE_ISSET_ID, value);
    }

    public String getPlatform() {
      return this.platform;
    }

    public queryHourKPI_args setPlatform(String platform) {
      this.platform = platform;
      return this;
    }

    public void unsetPlatform() {
      this.platform = null;
    }

    /** Returns true if field platform is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatform() {
      return this.platform != null;
    }

    public void setPlatformIsSet(boolean value) {
      if (!value) {
        this.platform = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((String)value);
        }
        break;

      case BEGINDATE:
        if (value == null) {
          unsetBegindate();
        } else {
          setBegindate((Integer)value);
        }
        break;

      case ENDDATE:
        if (value == null) {
          unsetEnddate();
        } else {
          setEnddate((Integer)value);
        }
        break;

      case PLATFORM:
        if (value == null) {
          unsetPlatform();
        } else {
          setPlatform((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CODE:
        return getCode();

      case BEGINDATE:
        return Integer.valueOf(getBegindate());

      case ENDDATE:
        return Integer.valueOf(getEnddate());

      case PLATFORM:
        return getPlatform();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CODE:
        return isSetCode();
      case BEGINDATE:
        return isSetBegindate();
      case ENDDATE:
        return isSetEnddate();
      case PLATFORM:
        return isSetPlatform();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryHourKPI_args)
        return this.equals((queryHourKPI_args)that);
      return false;
    }

    public boolean equals(queryHourKPI_args that) {
      if (that == null)
        return false;

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      boolean this_present_begindate = true;
      boolean that_present_begindate = true;
      if (this_present_begindate || that_present_begindate) {
        if (!(this_present_begindate && that_present_begindate))
          return false;
        if (this.begindate != that.begindate)
          return false;
      }

      boolean this_present_enddate = true;
      boolean that_present_enddate = true;
      if (this_present_enddate || that_present_enddate) {
        if (!(this_present_enddate && that_present_enddate))
          return false;
        if (this.enddate != that.enddate)
          return false;
      }

      boolean this_present_platform = true && this.isSetPlatform();
      boolean that_present_platform = true && that.isSetPlatform();
      if (this_present_platform || that_present_platform) {
        if (!(this_present_platform && that_present_platform))
          return false;
        if (!this.platform.equals(that.platform))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_code = true && (isSetCode());
      list.add(present_code);
      if (present_code)
        list.add(code);

      boolean present_begindate = true;
      list.add(present_begindate);
      if (present_begindate)
        list.add(begindate);

      boolean present_enddate = true;
      list.add(present_enddate);
      if (present_enddate)
        list.add(enddate);

      boolean present_platform = true && (isSetPlatform());
      list.add(present_platform);
      if (present_platform)
        list.add(platform);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryHourKPI_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBegindate()).compareTo(other.isSetBegindate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBegindate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.begindate, other.begindate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnddate()).compareTo(other.isSetEnddate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnddate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enddate, other.enddate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(other.isSetPlatform());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatform()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, other.platform);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryHourKPI_args(");
      boolean first = true;

      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("begindate:");
      sb.append(this.begindate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("enddate:");
      sb.append(this.enddate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("platform:");
      if (this.platform == null) {
        sb.append("null");
      } else {
        sb.append(this.platform);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryHourKPI_argsStandardSchemeFactory implements SchemeFactory {
      public queryHourKPI_argsStandardScheme getScheme() {
        return new queryHourKPI_argsStandardScheme();
      }
    }

    private static class queryHourKPI_argsStandardScheme extends StandardScheme<queryHourKPI_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryHourKPI_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BEGINDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.begindate = iprot.readI32();
                struct.setBegindateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ENDDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.enddate = iprot.readI32();
                struct.setEnddateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PLATFORM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.platform = iprot.readString();
                struct.setPlatformIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryHourKPI_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BEGINDATE_FIELD_DESC);
        oprot.writeI32(struct.begindate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ENDDATE_FIELD_DESC);
        oprot.writeI32(struct.enddate);
        oprot.writeFieldEnd();
        if (struct.platform != null) {
          oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
          oprot.writeString(struct.platform);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryHourKPI_argsTupleSchemeFactory implements SchemeFactory {
      public queryHourKPI_argsTupleScheme getScheme() {
        return new queryHourKPI_argsTupleScheme();
      }
    }

    private static class queryHourKPI_argsTupleScheme extends TupleScheme<queryHourKPI_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryHourKPI_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCode()) {
          optionals.set(0);
        }
        if (struct.isSetBegindate()) {
          optionals.set(1);
        }
        if (struct.isSetEnddate()) {
          optionals.set(2);
        }
        if (struct.isSetPlatform()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCode()) {
          oprot.writeString(struct.code);
        }
        if (struct.isSetBegindate()) {
          oprot.writeI32(struct.begindate);
        }
        if (struct.isSetEnddate()) {
          oprot.writeI32(struct.enddate);
        }
        if (struct.isSetPlatform()) {
          oprot.writeString(struct.platform);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryHourKPI_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.code = iprot.readString();
          struct.setCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.begindate = iprot.readI32();
          struct.setBegindateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.enddate = iprot.readI32();
          struct.setEnddateIsSet(true);
        }
        if (incoming.get(3)) {
          struct.platform = iprot.readString();
          struct.setPlatformIsSet(true);
        }
      }
    }

  }

  public static class queryHourKPI_result implements org.apache.thrift.TBase<queryHourKPI_result, queryHourKPI_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryHourKPI_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryHourKPI_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryHourKPI_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryHourKPI_resultTupleSchemeFactory());
    }

    public Map<Integer,Map<Integer,Double>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryHourKPI_result.class, metaDataMap);
    }

    public queryHourKPI_result() {
    }

    public queryHourKPI_result(
      Map<Integer,Map<Integer,Double>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryHourKPI_result(queryHourKPI_result other) {
      if (other.isSetSuccess()) {
        Map<Integer,Map<Integer,Double>> __this__success = new HashMap<Integer,Map<Integer,Double>>(other.success.size());
        for (Map.Entry<Integer, Map<Integer,Double>> other_element : other.success.entrySet()) {

          Integer other_element_key = other_element.getKey();
          Map<Integer,Double> other_element_value = other_element.getValue();

          Integer __this__success_copy_key = other_element_key;

          Map<Integer,Double> __this__success_copy_value = new HashMap<Integer,Double>(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public queryHourKPI_result deepCopy() {
      return new queryHourKPI_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(int key, Map<Integer,Double> val) {
      if (this.success == null) {
        this.success = new HashMap<Integer,Map<Integer,Double>>();
      }
      this.success.put(key, val);
    }

    public Map<Integer,Map<Integer,Double>> getSuccess() {
      return this.success;
    }

    public queryHourKPI_result setSuccess(Map<Integer,Map<Integer,Double>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<Integer,Map<Integer,Double>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryHourKPI_result)
        return this.equals((queryHourKPI_result)that);
      return false;
    }

    public boolean equals(queryHourKPI_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryHourKPI_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryHourKPI_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryHourKPI_resultStandardSchemeFactory implements SchemeFactory {
      public queryHourKPI_resultStandardScheme getScheme() {
        return new queryHourKPI_resultStandardScheme();
      }
    }

    private static class queryHourKPI_resultStandardScheme extends StandardScheme<queryHourKPI_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryHourKPI_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map20 = iprot.readMapBegin();
                  struct.success = new HashMap<Integer,Map<Integer,Double>>(2*_map20.size);
                  int _key21;
                  Map<Integer,Double> _val22;
                  for (int _i23 = 0; _i23 < _map20.size; ++_i23)
                  {
                    _key21 = iprot.readI32();
                    {
                      org.apache.thrift.protocol.TMap _map24 = iprot.readMapBegin();
                      _val22 = new HashMap<Integer,Double>(2*_map24.size);
                      int _key25;
                      double _val26;
                      for (int _i27 = 0; _i27 < _map24.size; ++_i27)
                      {
                        _key25 = iprot.readI32();
                        _val26 = iprot.readDouble();
                        _val22.put(_key25, _val26);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.put(_key21, _val22);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryHourKPI_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map.Entry<Integer, Map<Integer,Double>> _iter28 : struct.success.entrySet())
            {
              oprot.writeI32(_iter28.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, _iter28.getValue().size()));
                for (Map.Entry<Integer, Double> _iter29 : _iter28.getValue().entrySet())
                {
                  oprot.writeI32(_iter29.getKey());
                  oprot.writeDouble(_iter29.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryHourKPI_resultTupleSchemeFactory implements SchemeFactory {
      public queryHourKPI_resultTupleScheme getScheme() {
        return new queryHourKPI_resultTupleScheme();
      }
    }

    private static class queryHourKPI_resultTupleScheme extends TupleScheme<queryHourKPI_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryHourKPI_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<Integer, Map<Integer,Double>> _iter30 : struct.success.entrySet())
            {
              oprot.writeI32(_iter30.getKey());
              {
                oprot.writeI32(_iter30.getValue().size());
                for (Map.Entry<Integer, Double> _iter31 : _iter30.getValue().entrySet())
                {
                  oprot.writeI32(_iter31.getKey());
                  oprot.writeDouble(_iter31.getValue());
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryHourKPI_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map32 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new HashMap<Integer,Map<Integer,Double>>(2*_map32.size);
            int _key33;
            Map<Integer,Double> _val34;
            for (int _i35 = 0; _i35 < _map32.size; ++_i35)
            {
              _key33 = iprot.readI32();
              {
                org.apache.thrift.protocol.TMap _map36 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
                _val34 = new HashMap<Integer,Double>(2*_map36.size);
                int _key37;
                double _val38;
                for (int _i39 = 0; _i39 < _map36.size; ++_i39)
                {
                  _key37 = iprot.readI32();
                  _val38 = iprot.readDouble();
                  _val34.put(_key37, _val38);
                }
              }
              struct.success.put(_key33, _val34);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryDayKPIByApp_args implements org.apache.thrift.TBase<queryDayKPIByApp_args, queryDayKPIByApp_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryDayKPIByApp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryDayKPIByApp_args");

    private static final org.apache.thrift.protocol.TField APPKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appkey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BEGINDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("begindate", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ENDDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("enddate", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryDayKPIByApp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryDayKPIByApp_argsTupleSchemeFactory());
    }

    public String appkey; // required
    public String code; // required
    public int begindate; // required
    public int enddate; // required
    public String platform; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPKEY((short)1, "appkey"),
      CODE((short)2, "code"),
      BEGINDATE((short)3, "begindate"),
      ENDDATE((short)4, "enddate"),
      PLATFORM((short)5, "platform");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPKEY
            return APPKEY;
          case 2: // CODE
            return CODE;
          case 3: // BEGINDATE
            return BEGINDATE;
          case 4: // ENDDATE
            return ENDDATE;
          case 5: // PLATFORM
            return PLATFORM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BEGINDATE_ISSET_ID = 0;
    private static final int __ENDDATE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPKEY, new org.apache.thrift.meta_data.FieldMetaData("appkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEGINDATE, new org.apache.thrift.meta_data.FieldMetaData("begindate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ENDDATE, new org.apache.thrift.meta_data.FieldMetaData("enddate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryDayKPIByApp_args.class, metaDataMap);
    }

    public queryDayKPIByApp_args() {
    }

    public queryDayKPIByApp_args(
      String appkey,
      String code,
      int begindate,
      int enddate,
      String platform)
    {
      this();
      this.appkey = appkey;
      this.code = code;
      this.begindate = begindate;
      setBegindateIsSet(true);
      this.enddate = enddate;
      setEnddateIsSet(true);
      this.platform = platform;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryDayKPIByApp_args(queryDayKPIByApp_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAppkey()) {
        this.appkey = other.appkey;
      }
      if (other.isSetCode()) {
        this.code = other.code;
      }
      this.begindate = other.begindate;
      this.enddate = other.enddate;
      if (other.isSetPlatform()) {
        this.platform = other.platform;
      }
    }

    public queryDayKPIByApp_args deepCopy() {
      return new queryDayKPIByApp_args(this);
    }

    @Override
    public void clear() {
      this.appkey = null;
      this.code = null;
      setBegindateIsSet(false);
      this.begindate = 0;
      setEnddateIsSet(false);
      this.enddate = 0;
      this.platform = null;
    }

    public String getAppkey() {
      return this.appkey;
    }

    public queryDayKPIByApp_args setAppkey(String appkey) {
      this.appkey = appkey;
      return this;
    }

    public void unsetAppkey() {
      this.appkey = null;
    }

    /** Returns true if field appkey is set (has been assigned a value) and false otherwise */
    public boolean isSetAppkey() {
      return this.appkey != null;
    }

    public void setAppkeyIsSet(boolean value) {
      if (!value) {
        this.appkey = null;
      }
    }

    public String getCode() {
      return this.code;
    }

    public queryDayKPIByApp_args setCode(String code) {
      this.code = code;
      return this;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public int getBegindate() {
      return this.begindate;
    }

    public queryDayKPIByApp_args setBegindate(int begindate) {
      this.begindate = begindate;
      setBegindateIsSet(true);
      return this;
    }

    public void unsetBegindate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGINDATE_ISSET_ID);
    }

    /** Returns true if field begindate is set (has been assigned a value) and false otherwise */
    public boolean isSetBegindate() {
      return EncodingUtils.testBit(__isset_bitfield, __BEGINDATE_ISSET_ID);
    }

    public void setBegindateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGINDATE_ISSET_ID, value);
    }

    public int getEnddate() {
      return this.enddate;
    }

    public queryDayKPIByApp_args setEnddate(int enddate) {
      this.enddate = enddate;
      setEnddateIsSet(true);
      return this;
    }

    public void unsetEnddate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    /** Returns true if field enddate is set (has been assigned a value) and false otherwise */
    public boolean isSetEnddate() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    public void setEnddateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDATE_ISSET_ID, value);
    }

    public String getPlatform() {
      return this.platform;
    }

    public queryDayKPIByApp_args setPlatform(String platform) {
      this.platform = platform;
      return this;
    }

    public void unsetPlatform() {
      this.platform = null;
    }

    /** Returns true if field platform is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatform() {
      return this.platform != null;
    }

    public void setPlatformIsSet(boolean value) {
      if (!value) {
        this.platform = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPKEY:
        if (value == null) {
          unsetAppkey();
        } else {
          setAppkey((String)value);
        }
        break;

      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((String)value);
        }
        break;

      case BEGINDATE:
        if (value == null) {
          unsetBegindate();
        } else {
          setBegindate((Integer)value);
        }
        break;

      case ENDDATE:
        if (value == null) {
          unsetEnddate();
        } else {
          setEnddate((Integer)value);
        }
        break;

      case PLATFORM:
        if (value == null) {
          unsetPlatform();
        } else {
          setPlatform((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPKEY:
        return getAppkey();

      case CODE:
        return getCode();

      case BEGINDATE:
        return Integer.valueOf(getBegindate());

      case ENDDATE:
        return Integer.valueOf(getEnddate());

      case PLATFORM:
        return getPlatform();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPKEY:
        return isSetAppkey();
      case CODE:
        return isSetCode();
      case BEGINDATE:
        return isSetBegindate();
      case ENDDATE:
        return isSetEnddate();
      case PLATFORM:
        return isSetPlatform();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryDayKPIByApp_args)
        return this.equals((queryDayKPIByApp_args)that);
      return false;
    }

    public boolean equals(queryDayKPIByApp_args that) {
      if (that == null)
        return false;

      boolean this_present_appkey = true && this.isSetAppkey();
      boolean that_present_appkey = true && that.isSetAppkey();
      if (this_present_appkey || that_present_appkey) {
        if (!(this_present_appkey && that_present_appkey))
          return false;
        if (!this.appkey.equals(that.appkey))
          return false;
      }

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      boolean this_present_begindate = true;
      boolean that_present_begindate = true;
      if (this_present_begindate || that_present_begindate) {
        if (!(this_present_begindate && that_present_begindate))
          return false;
        if (this.begindate != that.begindate)
          return false;
      }

      boolean this_present_enddate = true;
      boolean that_present_enddate = true;
      if (this_present_enddate || that_present_enddate) {
        if (!(this_present_enddate && that_present_enddate))
          return false;
        if (this.enddate != that.enddate)
          return false;
      }

      boolean this_present_platform = true && this.isSetPlatform();
      boolean that_present_platform = true && that.isSetPlatform();
      if (this_present_platform || that_present_platform) {
        if (!(this_present_platform && that_present_platform))
          return false;
        if (!this.platform.equals(that.platform))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_appkey = true && (isSetAppkey());
      list.add(present_appkey);
      if (present_appkey)
        list.add(appkey);

      boolean present_code = true && (isSetCode());
      list.add(present_code);
      if (present_code)
        list.add(code);

      boolean present_begindate = true;
      list.add(present_begindate);
      if (present_begindate)
        list.add(begindate);

      boolean present_enddate = true;
      list.add(present_enddate);
      if (present_enddate)
        list.add(enddate);

      boolean present_platform = true && (isSetPlatform());
      list.add(present_platform);
      if (present_platform)
        list.add(platform);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryDayKPIByApp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppkey()).compareTo(other.isSetAppkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appkey, other.appkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBegindate()).compareTo(other.isSetBegindate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBegindate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.begindate, other.begindate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnddate()).compareTo(other.isSetEnddate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnddate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enddate, other.enddate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(other.isSetPlatform());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatform()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, other.platform);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryDayKPIByApp_args(");
      boolean first = true;

      sb.append("appkey:");
      if (this.appkey == null) {
        sb.append("null");
      } else {
        sb.append(this.appkey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("begindate:");
      sb.append(this.begindate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("enddate:");
      sb.append(this.enddate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("platform:");
      if (this.platform == null) {
        sb.append("null");
      } else {
        sb.append(this.platform);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryDayKPIByApp_argsStandardSchemeFactory implements SchemeFactory {
      public queryDayKPIByApp_argsStandardScheme getScheme() {
        return new queryDayKPIByApp_argsStandardScheme();
      }
    }

    private static class queryDayKPIByApp_argsStandardScheme extends StandardScheme<queryDayKPIByApp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryDayKPIByApp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPKEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appkey = iprot.readString();
                struct.setAppkeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BEGINDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.begindate = iprot.readI32();
                struct.setBegindateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ENDDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.enddate = iprot.readI32();
                struct.setEnddateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PLATFORM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.platform = iprot.readString();
                struct.setPlatformIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryDayKPIByApp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appkey != null) {
          oprot.writeFieldBegin(APPKEY_FIELD_DESC);
          oprot.writeString(struct.appkey);
          oprot.writeFieldEnd();
        }
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BEGINDATE_FIELD_DESC);
        oprot.writeI32(struct.begindate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ENDDATE_FIELD_DESC);
        oprot.writeI32(struct.enddate);
        oprot.writeFieldEnd();
        if (struct.platform != null) {
          oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
          oprot.writeString(struct.platform);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryDayKPIByApp_argsTupleSchemeFactory implements SchemeFactory {
      public queryDayKPIByApp_argsTupleScheme getScheme() {
        return new queryDayKPIByApp_argsTupleScheme();
      }
    }

    private static class queryDayKPIByApp_argsTupleScheme extends TupleScheme<queryDayKPIByApp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryDayKPIByApp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppkey()) {
          optionals.set(0);
        }
        if (struct.isSetCode()) {
          optionals.set(1);
        }
        if (struct.isSetBegindate()) {
          optionals.set(2);
        }
        if (struct.isSetEnddate()) {
          optionals.set(3);
        }
        if (struct.isSetPlatform()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetAppkey()) {
          oprot.writeString(struct.appkey);
        }
        if (struct.isSetCode()) {
          oprot.writeString(struct.code);
        }
        if (struct.isSetBegindate()) {
          oprot.writeI32(struct.begindate);
        }
        if (struct.isSetEnddate()) {
          oprot.writeI32(struct.enddate);
        }
        if (struct.isSetPlatform()) {
          oprot.writeString(struct.platform);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryDayKPIByApp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.appkey = iprot.readString();
          struct.setAppkeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.code = iprot.readString();
          struct.setCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.begindate = iprot.readI32();
          struct.setBegindateIsSet(true);
        }
        if (incoming.get(3)) {
          struct.enddate = iprot.readI32();
          struct.setEnddateIsSet(true);
        }
        if (incoming.get(4)) {
          struct.platform = iprot.readString();
          struct.setPlatformIsSet(true);
        }
      }
    }

  }

  public static class queryDayKPIByApp_result implements org.apache.thrift.TBase<queryDayKPIByApp_result, queryDayKPIByApp_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryDayKPIByApp_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryDayKPIByApp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryDayKPIByApp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryDayKPIByApp_resultTupleSchemeFactory());
    }

    public Map<Integer,Double> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryDayKPIByApp_result.class, metaDataMap);
    }

    public queryDayKPIByApp_result() {
    }

    public queryDayKPIByApp_result(
      Map<Integer,Double> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryDayKPIByApp_result(queryDayKPIByApp_result other) {
      if (other.isSetSuccess()) {
        Map<Integer,Double> __this__success = new HashMap<Integer,Double>(other.success);
        this.success = __this__success;
      }
    }

    public queryDayKPIByApp_result deepCopy() {
      return new queryDayKPIByApp_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(int key, double val) {
      if (this.success == null) {
        this.success = new HashMap<Integer,Double>();
      }
      this.success.put(key, val);
    }

    public Map<Integer,Double> getSuccess() {
      return this.success;
    }

    public queryDayKPIByApp_result setSuccess(Map<Integer,Double> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<Integer,Double>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryDayKPIByApp_result)
        return this.equals((queryDayKPIByApp_result)that);
      return false;
    }

    public boolean equals(queryDayKPIByApp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryDayKPIByApp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryDayKPIByApp_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryDayKPIByApp_resultStandardSchemeFactory implements SchemeFactory {
      public queryDayKPIByApp_resultStandardScheme getScheme() {
        return new queryDayKPIByApp_resultStandardScheme();
      }
    }

    private static class queryDayKPIByApp_resultStandardScheme extends StandardScheme<queryDayKPIByApp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryDayKPIByApp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map40 = iprot.readMapBegin();
                  struct.success = new HashMap<Integer,Double>(2*_map40.size);
                  int _key41;
                  double _val42;
                  for (int _i43 = 0; _i43 < _map40.size; ++_i43)
                  {
                    _key41 = iprot.readI32();
                    _val42 = iprot.readDouble();
                    struct.success.put(_key41, _val42);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryDayKPIByApp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, struct.success.size()));
            for (Map.Entry<Integer, Double> _iter44 : struct.success.entrySet())
            {
              oprot.writeI32(_iter44.getKey());
              oprot.writeDouble(_iter44.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryDayKPIByApp_resultTupleSchemeFactory implements SchemeFactory {
      public queryDayKPIByApp_resultTupleScheme getScheme() {
        return new queryDayKPIByApp_resultTupleScheme();
      }
    }

    private static class queryDayKPIByApp_resultTupleScheme extends TupleScheme<queryDayKPIByApp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryDayKPIByApp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<Integer, Double> _iter45 : struct.success.entrySet())
            {
              oprot.writeI32(_iter45.getKey());
              oprot.writeDouble(_iter45.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryDayKPIByApp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map46 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.success = new HashMap<Integer,Double>(2*_map46.size);
            int _key47;
            double _val48;
            for (int _i49 = 0; _i49 < _map46.size; ++_i49)
            {
              _key47 = iprot.readI32();
              _val48 = iprot.readDouble();
              struct.success.put(_key47, _val48);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryDayKPI_args implements org.apache.thrift.TBase<queryDayKPI_args, queryDayKPI_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryDayKPI_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryDayKPI_args");

    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BEGINDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("begindate", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField ENDDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("enddate", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryDayKPI_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryDayKPI_argsTupleSchemeFactory());
    }

    public String code; // required
    public int begindate; // required
    public int enddate; // required
    public String platform; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CODE((short)1, "code"),
      BEGINDATE((short)2, "begindate"),
      ENDDATE((short)3, "enddate"),
      PLATFORM((short)4, "platform");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CODE
            return CODE;
          case 2: // BEGINDATE
            return BEGINDATE;
          case 3: // ENDDATE
            return ENDDATE;
          case 4: // PLATFORM
            return PLATFORM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BEGINDATE_ISSET_ID = 0;
    private static final int __ENDDATE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEGINDATE, new org.apache.thrift.meta_data.FieldMetaData("begindate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ENDDATE, new org.apache.thrift.meta_data.FieldMetaData("enddate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryDayKPI_args.class, metaDataMap);
    }

    public queryDayKPI_args() {
    }

    public queryDayKPI_args(
      String code,
      int begindate,
      int enddate,
      String platform)
    {
      this();
      this.code = code;
      this.begindate = begindate;
      setBegindateIsSet(true);
      this.enddate = enddate;
      setEnddateIsSet(true);
      this.platform = platform;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryDayKPI_args(queryDayKPI_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCode()) {
        this.code = other.code;
      }
      this.begindate = other.begindate;
      this.enddate = other.enddate;
      if (other.isSetPlatform()) {
        this.platform = other.platform;
      }
    }

    public queryDayKPI_args deepCopy() {
      return new queryDayKPI_args(this);
    }

    @Override
    public void clear() {
      this.code = null;
      setBegindateIsSet(false);
      this.begindate = 0;
      setEnddateIsSet(false);
      this.enddate = 0;
      this.platform = null;
    }

    public String getCode() {
      return this.code;
    }

    public queryDayKPI_args setCode(String code) {
      this.code = code;
      return this;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public int getBegindate() {
      return this.begindate;
    }

    public queryDayKPI_args setBegindate(int begindate) {
      this.begindate = begindate;
      setBegindateIsSet(true);
      return this;
    }

    public void unsetBegindate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGINDATE_ISSET_ID);
    }

    /** Returns true if field begindate is set (has been assigned a value) and false otherwise */
    public boolean isSetBegindate() {
      return EncodingUtils.testBit(__isset_bitfield, __BEGINDATE_ISSET_ID);
    }

    public void setBegindateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGINDATE_ISSET_ID, value);
    }

    public int getEnddate() {
      return this.enddate;
    }

    public queryDayKPI_args setEnddate(int enddate) {
      this.enddate = enddate;
      setEnddateIsSet(true);
      return this;
    }

    public void unsetEnddate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    /** Returns true if field enddate is set (has been assigned a value) and false otherwise */
    public boolean isSetEnddate() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    public void setEnddateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDATE_ISSET_ID, value);
    }

    public String getPlatform() {
      return this.platform;
    }

    public queryDayKPI_args setPlatform(String platform) {
      this.platform = platform;
      return this;
    }

    public void unsetPlatform() {
      this.platform = null;
    }

    /** Returns true if field platform is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatform() {
      return this.platform != null;
    }

    public void setPlatformIsSet(boolean value) {
      if (!value) {
        this.platform = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((String)value);
        }
        break;

      case BEGINDATE:
        if (value == null) {
          unsetBegindate();
        } else {
          setBegindate((Integer)value);
        }
        break;

      case ENDDATE:
        if (value == null) {
          unsetEnddate();
        } else {
          setEnddate((Integer)value);
        }
        break;

      case PLATFORM:
        if (value == null) {
          unsetPlatform();
        } else {
          setPlatform((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CODE:
        return getCode();

      case BEGINDATE:
        return Integer.valueOf(getBegindate());

      case ENDDATE:
        return Integer.valueOf(getEnddate());

      case PLATFORM:
        return getPlatform();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CODE:
        return isSetCode();
      case BEGINDATE:
        return isSetBegindate();
      case ENDDATE:
        return isSetEnddate();
      case PLATFORM:
        return isSetPlatform();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryDayKPI_args)
        return this.equals((queryDayKPI_args)that);
      return false;
    }

    public boolean equals(queryDayKPI_args that) {
      if (that == null)
        return false;

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      boolean this_present_begindate = true;
      boolean that_present_begindate = true;
      if (this_present_begindate || that_present_begindate) {
        if (!(this_present_begindate && that_present_begindate))
          return false;
        if (this.begindate != that.begindate)
          return false;
      }

      boolean this_present_enddate = true;
      boolean that_present_enddate = true;
      if (this_present_enddate || that_present_enddate) {
        if (!(this_present_enddate && that_present_enddate))
          return false;
        if (this.enddate != that.enddate)
          return false;
      }

      boolean this_present_platform = true && this.isSetPlatform();
      boolean that_present_platform = true && that.isSetPlatform();
      if (this_present_platform || that_present_platform) {
        if (!(this_present_platform && that_present_platform))
          return false;
        if (!this.platform.equals(that.platform))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_code = true && (isSetCode());
      list.add(present_code);
      if (present_code)
        list.add(code);

      boolean present_begindate = true;
      list.add(present_begindate);
      if (present_begindate)
        list.add(begindate);

      boolean present_enddate = true;
      list.add(present_enddate);
      if (present_enddate)
        list.add(enddate);

      boolean present_platform = true && (isSetPlatform());
      list.add(present_platform);
      if (present_platform)
        list.add(platform);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryDayKPI_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBegindate()).compareTo(other.isSetBegindate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBegindate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.begindate, other.begindate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnddate()).compareTo(other.isSetEnddate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnddate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enddate, other.enddate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(other.isSetPlatform());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatform()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, other.platform);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryDayKPI_args(");
      boolean first = true;

      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("begindate:");
      sb.append(this.begindate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("enddate:");
      sb.append(this.enddate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("platform:");
      if (this.platform == null) {
        sb.append("null");
      } else {
        sb.append(this.platform);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryDayKPI_argsStandardSchemeFactory implements SchemeFactory {
      public queryDayKPI_argsStandardScheme getScheme() {
        return new queryDayKPI_argsStandardScheme();
      }
    }

    private static class queryDayKPI_argsStandardScheme extends StandardScheme<queryDayKPI_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryDayKPI_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BEGINDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.begindate = iprot.readI32();
                struct.setBegindateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ENDDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.enddate = iprot.readI32();
                struct.setEnddateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PLATFORM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.platform = iprot.readString();
                struct.setPlatformIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryDayKPI_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BEGINDATE_FIELD_DESC);
        oprot.writeI32(struct.begindate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ENDDATE_FIELD_DESC);
        oprot.writeI32(struct.enddate);
        oprot.writeFieldEnd();
        if (struct.platform != null) {
          oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
          oprot.writeString(struct.platform);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryDayKPI_argsTupleSchemeFactory implements SchemeFactory {
      public queryDayKPI_argsTupleScheme getScheme() {
        return new queryDayKPI_argsTupleScheme();
      }
    }

    private static class queryDayKPI_argsTupleScheme extends TupleScheme<queryDayKPI_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryDayKPI_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCode()) {
          optionals.set(0);
        }
        if (struct.isSetBegindate()) {
          optionals.set(1);
        }
        if (struct.isSetEnddate()) {
          optionals.set(2);
        }
        if (struct.isSetPlatform()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCode()) {
          oprot.writeString(struct.code);
        }
        if (struct.isSetBegindate()) {
          oprot.writeI32(struct.begindate);
        }
        if (struct.isSetEnddate()) {
          oprot.writeI32(struct.enddate);
        }
        if (struct.isSetPlatform()) {
          oprot.writeString(struct.platform);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryDayKPI_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.code = iprot.readString();
          struct.setCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.begindate = iprot.readI32();
          struct.setBegindateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.enddate = iprot.readI32();
          struct.setEnddateIsSet(true);
        }
        if (incoming.get(3)) {
          struct.platform = iprot.readString();
          struct.setPlatformIsSet(true);
        }
      }
    }

  }

  public static class queryDayKPI_result implements org.apache.thrift.TBase<queryDayKPI_result, queryDayKPI_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryDayKPI_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryDayKPI_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryDayKPI_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryDayKPI_resultTupleSchemeFactory());
    }

    public Map<Integer,Double> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryDayKPI_result.class, metaDataMap);
    }

    public queryDayKPI_result() {
    }

    public queryDayKPI_result(
      Map<Integer,Double> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryDayKPI_result(queryDayKPI_result other) {
      if (other.isSetSuccess()) {
        Map<Integer,Double> __this__success = new HashMap<Integer,Double>(other.success);
        this.success = __this__success;
      }
    }

    public queryDayKPI_result deepCopy() {
      return new queryDayKPI_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(int key, double val) {
      if (this.success == null) {
        this.success = new HashMap<Integer,Double>();
      }
      this.success.put(key, val);
    }

    public Map<Integer,Double> getSuccess() {
      return this.success;
    }

    public queryDayKPI_result setSuccess(Map<Integer,Double> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<Integer,Double>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryDayKPI_result)
        return this.equals((queryDayKPI_result)that);
      return false;
    }

    public boolean equals(queryDayKPI_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryDayKPI_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryDayKPI_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryDayKPI_resultStandardSchemeFactory implements SchemeFactory {
      public queryDayKPI_resultStandardScheme getScheme() {
        return new queryDayKPI_resultStandardScheme();
      }
    }

    private static class queryDayKPI_resultStandardScheme extends StandardScheme<queryDayKPI_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryDayKPI_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map50 = iprot.readMapBegin();
                  struct.success = new HashMap<Integer,Double>(2*_map50.size);
                  int _key51;
                  double _val52;
                  for (int _i53 = 0; _i53 < _map50.size; ++_i53)
                  {
                    _key51 = iprot.readI32();
                    _val52 = iprot.readDouble();
                    struct.success.put(_key51, _val52);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryDayKPI_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, struct.success.size()));
            for (Map.Entry<Integer, Double> _iter54 : struct.success.entrySet())
            {
              oprot.writeI32(_iter54.getKey());
              oprot.writeDouble(_iter54.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryDayKPI_resultTupleSchemeFactory implements SchemeFactory {
      public queryDayKPI_resultTupleScheme getScheme() {
        return new queryDayKPI_resultTupleScheme();
      }
    }

    private static class queryDayKPI_resultTupleScheme extends TupleScheme<queryDayKPI_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryDayKPI_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<Integer, Double> _iter55 : struct.success.entrySet())
            {
              oprot.writeI32(_iter55.getKey());
              oprot.writeDouble(_iter55.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryDayKPI_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map56 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.success = new HashMap<Integer,Double>(2*_map56.size);
            int _key57;
            double _val58;
            for (int _i59 = 0; _i59 < _map56.size; ++_i59)
            {
              _key57 = iprot.readI32();
              _val58 = iprot.readDouble();
              struct.success.put(_key57, _val58);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryMonthKPIByApp_args implements org.apache.thrift.TBase<queryMonthKPIByApp_args, queryMonthKPIByApp_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryMonthKPIByApp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryMonthKPIByApp_args");

    private static final org.apache.thrift.protocol.TField APPKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appkey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BEGINDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("begindate", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ENDDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("enddate", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryMonthKPIByApp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryMonthKPIByApp_argsTupleSchemeFactory());
    }

    public String appkey; // required
    public String code; // required
    public int begindate; // required
    public int enddate; // required
    public String platform; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPKEY((short)1, "appkey"),
      CODE((short)2, "code"),
      BEGINDATE((short)3, "begindate"),
      ENDDATE((short)4, "enddate"),
      PLATFORM((short)5, "platform");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPKEY
            return APPKEY;
          case 2: // CODE
            return CODE;
          case 3: // BEGINDATE
            return BEGINDATE;
          case 4: // ENDDATE
            return ENDDATE;
          case 5: // PLATFORM
            return PLATFORM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BEGINDATE_ISSET_ID = 0;
    private static final int __ENDDATE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPKEY, new org.apache.thrift.meta_data.FieldMetaData("appkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEGINDATE, new org.apache.thrift.meta_data.FieldMetaData("begindate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ENDDATE, new org.apache.thrift.meta_data.FieldMetaData("enddate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryMonthKPIByApp_args.class, metaDataMap);
    }

    public queryMonthKPIByApp_args() {
    }

    public queryMonthKPIByApp_args(
      String appkey,
      String code,
      int begindate,
      int enddate,
      String platform)
    {
      this();
      this.appkey = appkey;
      this.code = code;
      this.begindate = begindate;
      setBegindateIsSet(true);
      this.enddate = enddate;
      setEnddateIsSet(true);
      this.platform = platform;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryMonthKPIByApp_args(queryMonthKPIByApp_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAppkey()) {
        this.appkey = other.appkey;
      }
      if (other.isSetCode()) {
        this.code = other.code;
      }
      this.begindate = other.begindate;
      this.enddate = other.enddate;
      if (other.isSetPlatform()) {
        this.platform = other.platform;
      }
    }

    public queryMonthKPIByApp_args deepCopy() {
      return new queryMonthKPIByApp_args(this);
    }

    @Override
    public void clear() {
      this.appkey = null;
      this.code = null;
      setBegindateIsSet(false);
      this.begindate = 0;
      setEnddateIsSet(false);
      this.enddate = 0;
      this.platform = null;
    }

    public String getAppkey() {
      return this.appkey;
    }

    public queryMonthKPIByApp_args setAppkey(String appkey) {
      this.appkey = appkey;
      return this;
    }

    public void unsetAppkey() {
      this.appkey = null;
    }

    /** Returns true if field appkey is set (has been assigned a value) and false otherwise */
    public boolean isSetAppkey() {
      return this.appkey != null;
    }

    public void setAppkeyIsSet(boolean value) {
      if (!value) {
        this.appkey = null;
      }
    }

    public String getCode() {
      return this.code;
    }

    public queryMonthKPIByApp_args setCode(String code) {
      this.code = code;
      return this;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public int getBegindate() {
      return this.begindate;
    }

    public queryMonthKPIByApp_args setBegindate(int begindate) {
      this.begindate = begindate;
      setBegindateIsSet(true);
      return this;
    }

    public void unsetBegindate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGINDATE_ISSET_ID);
    }

    /** Returns true if field begindate is set (has been assigned a value) and false otherwise */
    public boolean isSetBegindate() {
      return EncodingUtils.testBit(__isset_bitfield, __BEGINDATE_ISSET_ID);
    }

    public void setBegindateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGINDATE_ISSET_ID, value);
    }

    public int getEnddate() {
      return this.enddate;
    }

    public queryMonthKPIByApp_args setEnddate(int enddate) {
      this.enddate = enddate;
      setEnddateIsSet(true);
      return this;
    }

    public void unsetEnddate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    /** Returns true if field enddate is set (has been assigned a value) and false otherwise */
    public boolean isSetEnddate() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    public void setEnddateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDATE_ISSET_ID, value);
    }

    public String getPlatform() {
      return this.platform;
    }

    public queryMonthKPIByApp_args setPlatform(String platform) {
      this.platform = platform;
      return this;
    }

    public void unsetPlatform() {
      this.platform = null;
    }

    /** Returns true if field platform is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatform() {
      return this.platform != null;
    }

    public void setPlatformIsSet(boolean value) {
      if (!value) {
        this.platform = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPKEY:
        if (value == null) {
          unsetAppkey();
        } else {
          setAppkey((String)value);
        }
        break;

      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((String)value);
        }
        break;

      case BEGINDATE:
        if (value == null) {
          unsetBegindate();
        } else {
          setBegindate((Integer)value);
        }
        break;

      case ENDDATE:
        if (value == null) {
          unsetEnddate();
        } else {
          setEnddate((Integer)value);
        }
        break;

      case PLATFORM:
        if (value == null) {
          unsetPlatform();
        } else {
          setPlatform((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPKEY:
        return getAppkey();

      case CODE:
        return getCode();

      case BEGINDATE:
        return Integer.valueOf(getBegindate());

      case ENDDATE:
        return Integer.valueOf(getEnddate());

      case PLATFORM:
        return getPlatform();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPKEY:
        return isSetAppkey();
      case CODE:
        return isSetCode();
      case BEGINDATE:
        return isSetBegindate();
      case ENDDATE:
        return isSetEnddate();
      case PLATFORM:
        return isSetPlatform();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryMonthKPIByApp_args)
        return this.equals((queryMonthKPIByApp_args)that);
      return false;
    }

    public boolean equals(queryMonthKPIByApp_args that) {
      if (that == null)
        return false;

      boolean this_present_appkey = true && this.isSetAppkey();
      boolean that_present_appkey = true && that.isSetAppkey();
      if (this_present_appkey || that_present_appkey) {
        if (!(this_present_appkey && that_present_appkey))
          return false;
        if (!this.appkey.equals(that.appkey))
          return false;
      }

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      boolean this_present_begindate = true;
      boolean that_present_begindate = true;
      if (this_present_begindate || that_present_begindate) {
        if (!(this_present_begindate && that_present_begindate))
          return false;
        if (this.begindate != that.begindate)
          return false;
      }

      boolean this_present_enddate = true;
      boolean that_present_enddate = true;
      if (this_present_enddate || that_present_enddate) {
        if (!(this_present_enddate && that_present_enddate))
          return false;
        if (this.enddate != that.enddate)
          return false;
      }

      boolean this_present_platform = true && this.isSetPlatform();
      boolean that_present_platform = true && that.isSetPlatform();
      if (this_present_platform || that_present_platform) {
        if (!(this_present_platform && that_present_platform))
          return false;
        if (!this.platform.equals(that.platform))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_appkey = true && (isSetAppkey());
      list.add(present_appkey);
      if (present_appkey)
        list.add(appkey);

      boolean present_code = true && (isSetCode());
      list.add(present_code);
      if (present_code)
        list.add(code);

      boolean present_begindate = true;
      list.add(present_begindate);
      if (present_begindate)
        list.add(begindate);

      boolean present_enddate = true;
      list.add(present_enddate);
      if (present_enddate)
        list.add(enddate);

      boolean present_platform = true && (isSetPlatform());
      list.add(present_platform);
      if (present_platform)
        list.add(platform);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryMonthKPIByApp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppkey()).compareTo(other.isSetAppkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appkey, other.appkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBegindate()).compareTo(other.isSetBegindate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBegindate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.begindate, other.begindate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnddate()).compareTo(other.isSetEnddate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnddate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enddate, other.enddate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(other.isSetPlatform());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatform()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, other.platform);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryMonthKPIByApp_args(");
      boolean first = true;

      sb.append("appkey:");
      if (this.appkey == null) {
        sb.append("null");
      } else {
        sb.append(this.appkey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("begindate:");
      sb.append(this.begindate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("enddate:");
      sb.append(this.enddate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("platform:");
      if (this.platform == null) {
        sb.append("null");
      } else {
        sb.append(this.platform);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryMonthKPIByApp_argsStandardSchemeFactory implements SchemeFactory {
      public queryMonthKPIByApp_argsStandardScheme getScheme() {
        return new queryMonthKPIByApp_argsStandardScheme();
      }
    }

    private static class queryMonthKPIByApp_argsStandardScheme extends StandardScheme<queryMonthKPIByApp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryMonthKPIByApp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPKEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appkey = iprot.readString();
                struct.setAppkeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BEGINDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.begindate = iprot.readI32();
                struct.setBegindateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ENDDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.enddate = iprot.readI32();
                struct.setEnddateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PLATFORM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.platform = iprot.readString();
                struct.setPlatformIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryMonthKPIByApp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appkey != null) {
          oprot.writeFieldBegin(APPKEY_FIELD_DESC);
          oprot.writeString(struct.appkey);
          oprot.writeFieldEnd();
        }
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BEGINDATE_FIELD_DESC);
        oprot.writeI32(struct.begindate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ENDDATE_FIELD_DESC);
        oprot.writeI32(struct.enddate);
        oprot.writeFieldEnd();
        if (struct.platform != null) {
          oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
          oprot.writeString(struct.platform);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryMonthKPIByApp_argsTupleSchemeFactory implements SchemeFactory {
      public queryMonthKPIByApp_argsTupleScheme getScheme() {
        return new queryMonthKPIByApp_argsTupleScheme();
      }
    }

    private static class queryMonthKPIByApp_argsTupleScheme extends TupleScheme<queryMonthKPIByApp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryMonthKPIByApp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppkey()) {
          optionals.set(0);
        }
        if (struct.isSetCode()) {
          optionals.set(1);
        }
        if (struct.isSetBegindate()) {
          optionals.set(2);
        }
        if (struct.isSetEnddate()) {
          optionals.set(3);
        }
        if (struct.isSetPlatform()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetAppkey()) {
          oprot.writeString(struct.appkey);
        }
        if (struct.isSetCode()) {
          oprot.writeString(struct.code);
        }
        if (struct.isSetBegindate()) {
          oprot.writeI32(struct.begindate);
        }
        if (struct.isSetEnddate()) {
          oprot.writeI32(struct.enddate);
        }
        if (struct.isSetPlatform()) {
          oprot.writeString(struct.platform);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryMonthKPIByApp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.appkey = iprot.readString();
          struct.setAppkeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.code = iprot.readString();
          struct.setCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.begindate = iprot.readI32();
          struct.setBegindateIsSet(true);
        }
        if (incoming.get(3)) {
          struct.enddate = iprot.readI32();
          struct.setEnddateIsSet(true);
        }
        if (incoming.get(4)) {
          struct.platform = iprot.readString();
          struct.setPlatformIsSet(true);
        }
      }
    }

  }

  public static class queryMonthKPIByApp_result implements org.apache.thrift.TBase<queryMonthKPIByApp_result, queryMonthKPIByApp_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryMonthKPIByApp_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryMonthKPIByApp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryMonthKPIByApp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryMonthKPIByApp_resultTupleSchemeFactory());
    }

    public Map<Integer,Double> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryMonthKPIByApp_result.class, metaDataMap);
    }

    public queryMonthKPIByApp_result() {
    }

    public queryMonthKPIByApp_result(
      Map<Integer,Double> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryMonthKPIByApp_result(queryMonthKPIByApp_result other) {
      if (other.isSetSuccess()) {
        Map<Integer,Double> __this__success = new HashMap<Integer,Double>(other.success);
        this.success = __this__success;
      }
    }

    public queryMonthKPIByApp_result deepCopy() {
      return new queryMonthKPIByApp_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(int key, double val) {
      if (this.success == null) {
        this.success = new HashMap<Integer,Double>();
      }
      this.success.put(key, val);
    }

    public Map<Integer,Double> getSuccess() {
      return this.success;
    }

    public queryMonthKPIByApp_result setSuccess(Map<Integer,Double> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<Integer,Double>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryMonthKPIByApp_result)
        return this.equals((queryMonthKPIByApp_result)that);
      return false;
    }

    public boolean equals(queryMonthKPIByApp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryMonthKPIByApp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryMonthKPIByApp_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryMonthKPIByApp_resultStandardSchemeFactory implements SchemeFactory {
      public queryMonthKPIByApp_resultStandardScheme getScheme() {
        return new queryMonthKPIByApp_resultStandardScheme();
      }
    }

    private static class queryMonthKPIByApp_resultStandardScheme extends StandardScheme<queryMonthKPIByApp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryMonthKPIByApp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map60 = iprot.readMapBegin();
                  struct.success = new HashMap<Integer,Double>(2*_map60.size);
                  int _key61;
                  double _val62;
                  for (int _i63 = 0; _i63 < _map60.size; ++_i63)
                  {
                    _key61 = iprot.readI32();
                    _val62 = iprot.readDouble();
                    struct.success.put(_key61, _val62);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryMonthKPIByApp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, struct.success.size()));
            for (Map.Entry<Integer, Double> _iter64 : struct.success.entrySet())
            {
              oprot.writeI32(_iter64.getKey());
              oprot.writeDouble(_iter64.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryMonthKPIByApp_resultTupleSchemeFactory implements SchemeFactory {
      public queryMonthKPIByApp_resultTupleScheme getScheme() {
        return new queryMonthKPIByApp_resultTupleScheme();
      }
    }

    private static class queryMonthKPIByApp_resultTupleScheme extends TupleScheme<queryMonthKPIByApp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryMonthKPIByApp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<Integer, Double> _iter65 : struct.success.entrySet())
            {
              oprot.writeI32(_iter65.getKey());
              oprot.writeDouble(_iter65.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryMonthKPIByApp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map66 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.success = new HashMap<Integer,Double>(2*_map66.size);
            int _key67;
            double _val68;
            for (int _i69 = 0; _i69 < _map66.size; ++_i69)
            {
              _key67 = iprot.readI32();
              _val68 = iprot.readDouble();
              struct.success.put(_key67, _val68);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryMonthKPI_args implements org.apache.thrift.TBase<queryMonthKPI_args, queryMonthKPI_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryMonthKPI_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryMonthKPI_args");

    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BEGINDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("begindate", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField ENDDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("enddate", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryMonthKPI_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryMonthKPI_argsTupleSchemeFactory());
    }

    public String code; // required
    public int begindate; // required
    public int enddate; // required
    public String platform; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CODE((short)1, "code"),
      BEGINDATE((short)2, "begindate"),
      ENDDATE((short)3, "enddate"),
      PLATFORM((short)4, "platform");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CODE
            return CODE;
          case 2: // BEGINDATE
            return BEGINDATE;
          case 3: // ENDDATE
            return ENDDATE;
          case 4: // PLATFORM
            return PLATFORM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BEGINDATE_ISSET_ID = 0;
    private static final int __ENDDATE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEGINDATE, new org.apache.thrift.meta_data.FieldMetaData("begindate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ENDDATE, new org.apache.thrift.meta_data.FieldMetaData("enddate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryMonthKPI_args.class, metaDataMap);
    }

    public queryMonthKPI_args() {
    }

    public queryMonthKPI_args(
      String code,
      int begindate,
      int enddate,
      String platform)
    {
      this();
      this.code = code;
      this.begindate = begindate;
      setBegindateIsSet(true);
      this.enddate = enddate;
      setEnddateIsSet(true);
      this.platform = platform;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryMonthKPI_args(queryMonthKPI_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCode()) {
        this.code = other.code;
      }
      this.begindate = other.begindate;
      this.enddate = other.enddate;
      if (other.isSetPlatform()) {
        this.platform = other.platform;
      }
    }

    public queryMonthKPI_args deepCopy() {
      return new queryMonthKPI_args(this);
    }

    @Override
    public void clear() {
      this.code = null;
      setBegindateIsSet(false);
      this.begindate = 0;
      setEnddateIsSet(false);
      this.enddate = 0;
      this.platform = null;
    }

    public String getCode() {
      return this.code;
    }

    public queryMonthKPI_args setCode(String code) {
      this.code = code;
      return this;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public int getBegindate() {
      return this.begindate;
    }

    public queryMonthKPI_args setBegindate(int begindate) {
      this.begindate = begindate;
      setBegindateIsSet(true);
      return this;
    }

    public void unsetBegindate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGINDATE_ISSET_ID);
    }

    /** Returns true if field begindate is set (has been assigned a value) and false otherwise */
    public boolean isSetBegindate() {
      return EncodingUtils.testBit(__isset_bitfield, __BEGINDATE_ISSET_ID);
    }

    public void setBegindateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGINDATE_ISSET_ID, value);
    }

    public int getEnddate() {
      return this.enddate;
    }

    public queryMonthKPI_args setEnddate(int enddate) {
      this.enddate = enddate;
      setEnddateIsSet(true);
      return this;
    }

    public void unsetEnddate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    /** Returns true if field enddate is set (has been assigned a value) and false otherwise */
    public boolean isSetEnddate() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    public void setEnddateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDATE_ISSET_ID, value);
    }

    public String getPlatform() {
      return this.platform;
    }

    public queryMonthKPI_args setPlatform(String platform) {
      this.platform = platform;
      return this;
    }

    public void unsetPlatform() {
      this.platform = null;
    }

    /** Returns true if field platform is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatform() {
      return this.platform != null;
    }

    public void setPlatformIsSet(boolean value) {
      if (!value) {
        this.platform = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((String)value);
        }
        break;

      case BEGINDATE:
        if (value == null) {
          unsetBegindate();
        } else {
          setBegindate((Integer)value);
        }
        break;

      case ENDDATE:
        if (value == null) {
          unsetEnddate();
        } else {
          setEnddate((Integer)value);
        }
        break;

      case PLATFORM:
        if (value == null) {
          unsetPlatform();
        } else {
          setPlatform((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CODE:
        return getCode();

      case BEGINDATE:
        return Integer.valueOf(getBegindate());

      case ENDDATE:
        return Integer.valueOf(getEnddate());

      case PLATFORM:
        return getPlatform();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CODE:
        return isSetCode();
      case BEGINDATE:
        return isSetBegindate();
      case ENDDATE:
        return isSetEnddate();
      case PLATFORM:
        return isSetPlatform();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryMonthKPI_args)
        return this.equals((queryMonthKPI_args)that);
      return false;
    }

    public boolean equals(queryMonthKPI_args that) {
      if (that == null)
        return false;

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      boolean this_present_begindate = true;
      boolean that_present_begindate = true;
      if (this_present_begindate || that_present_begindate) {
        if (!(this_present_begindate && that_present_begindate))
          return false;
        if (this.begindate != that.begindate)
          return false;
      }

      boolean this_present_enddate = true;
      boolean that_present_enddate = true;
      if (this_present_enddate || that_present_enddate) {
        if (!(this_present_enddate && that_present_enddate))
          return false;
        if (this.enddate != that.enddate)
          return false;
      }

      boolean this_present_platform = true && this.isSetPlatform();
      boolean that_present_platform = true && that.isSetPlatform();
      if (this_present_platform || that_present_platform) {
        if (!(this_present_platform && that_present_platform))
          return false;
        if (!this.platform.equals(that.platform))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_code = true && (isSetCode());
      list.add(present_code);
      if (present_code)
        list.add(code);

      boolean present_begindate = true;
      list.add(present_begindate);
      if (present_begindate)
        list.add(begindate);

      boolean present_enddate = true;
      list.add(present_enddate);
      if (present_enddate)
        list.add(enddate);

      boolean present_platform = true && (isSetPlatform());
      list.add(present_platform);
      if (present_platform)
        list.add(platform);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryMonthKPI_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBegindate()).compareTo(other.isSetBegindate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBegindate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.begindate, other.begindate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnddate()).compareTo(other.isSetEnddate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnddate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enddate, other.enddate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(other.isSetPlatform());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatform()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, other.platform);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryMonthKPI_args(");
      boolean first = true;

      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("begindate:");
      sb.append(this.begindate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("enddate:");
      sb.append(this.enddate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("platform:");
      if (this.platform == null) {
        sb.append("null");
      } else {
        sb.append(this.platform);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryMonthKPI_argsStandardSchemeFactory implements SchemeFactory {
      public queryMonthKPI_argsStandardScheme getScheme() {
        return new queryMonthKPI_argsStandardScheme();
      }
    }

    private static class queryMonthKPI_argsStandardScheme extends StandardScheme<queryMonthKPI_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryMonthKPI_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BEGINDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.begindate = iprot.readI32();
                struct.setBegindateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ENDDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.enddate = iprot.readI32();
                struct.setEnddateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PLATFORM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.platform = iprot.readString();
                struct.setPlatformIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryMonthKPI_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BEGINDATE_FIELD_DESC);
        oprot.writeI32(struct.begindate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ENDDATE_FIELD_DESC);
        oprot.writeI32(struct.enddate);
        oprot.writeFieldEnd();
        if (struct.platform != null) {
          oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
          oprot.writeString(struct.platform);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryMonthKPI_argsTupleSchemeFactory implements SchemeFactory {
      public queryMonthKPI_argsTupleScheme getScheme() {
        return new queryMonthKPI_argsTupleScheme();
      }
    }

    private static class queryMonthKPI_argsTupleScheme extends TupleScheme<queryMonthKPI_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryMonthKPI_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCode()) {
          optionals.set(0);
        }
        if (struct.isSetBegindate()) {
          optionals.set(1);
        }
        if (struct.isSetEnddate()) {
          optionals.set(2);
        }
        if (struct.isSetPlatform()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCode()) {
          oprot.writeString(struct.code);
        }
        if (struct.isSetBegindate()) {
          oprot.writeI32(struct.begindate);
        }
        if (struct.isSetEnddate()) {
          oprot.writeI32(struct.enddate);
        }
        if (struct.isSetPlatform()) {
          oprot.writeString(struct.platform);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryMonthKPI_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.code = iprot.readString();
          struct.setCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.begindate = iprot.readI32();
          struct.setBegindateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.enddate = iprot.readI32();
          struct.setEnddateIsSet(true);
        }
        if (incoming.get(3)) {
          struct.platform = iprot.readString();
          struct.setPlatformIsSet(true);
        }
      }
    }

  }

  public static class queryMonthKPI_result implements org.apache.thrift.TBase<queryMonthKPI_result, queryMonthKPI_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryMonthKPI_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryMonthKPI_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryMonthKPI_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryMonthKPI_resultTupleSchemeFactory());
    }

    public Map<Integer,Double> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryMonthKPI_result.class, metaDataMap);
    }

    public queryMonthKPI_result() {
    }

    public queryMonthKPI_result(
      Map<Integer,Double> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryMonthKPI_result(queryMonthKPI_result other) {
      if (other.isSetSuccess()) {
        Map<Integer,Double> __this__success = new HashMap<Integer,Double>(other.success);
        this.success = __this__success;
      }
    }

    public queryMonthKPI_result deepCopy() {
      return new queryMonthKPI_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(int key, double val) {
      if (this.success == null) {
        this.success = new HashMap<Integer,Double>();
      }
      this.success.put(key, val);
    }

    public Map<Integer,Double> getSuccess() {
      return this.success;
    }

    public queryMonthKPI_result setSuccess(Map<Integer,Double> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<Integer,Double>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryMonthKPI_result)
        return this.equals((queryMonthKPI_result)that);
      return false;
    }

    public boolean equals(queryMonthKPI_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryMonthKPI_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryMonthKPI_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryMonthKPI_resultStandardSchemeFactory implements SchemeFactory {
      public queryMonthKPI_resultStandardScheme getScheme() {
        return new queryMonthKPI_resultStandardScheme();
      }
    }

    private static class queryMonthKPI_resultStandardScheme extends StandardScheme<queryMonthKPI_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryMonthKPI_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map70 = iprot.readMapBegin();
                  struct.success = new HashMap<Integer,Double>(2*_map70.size);
                  int _key71;
                  double _val72;
                  for (int _i73 = 0; _i73 < _map70.size; ++_i73)
                  {
                    _key71 = iprot.readI32();
                    _val72 = iprot.readDouble();
                    struct.success.put(_key71, _val72);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryMonthKPI_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, struct.success.size()));
            for (Map.Entry<Integer, Double> _iter74 : struct.success.entrySet())
            {
              oprot.writeI32(_iter74.getKey());
              oprot.writeDouble(_iter74.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryMonthKPI_resultTupleSchemeFactory implements SchemeFactory {
      public queryMonthKPI_resultTupleScheme getScheme() {
        return new queryMonthKPI_resultTupleScheme();
      }
    }

    private static class queryMonthKPI_resultTupleScheme extends TupleScheme<queryMonthKPI_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryMonthKPI_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<Integer, Double> _iter75 : struct.success.entrySet())
            {
              oprot.writeI32(_iter75.getKey());
              oprot.writeDouble(_iter75.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryMonthKPI_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map76 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.success = new HashMap<Integer,Double>(2*_map76.size);
            int _key77;
            double _val78;
            for (int _i79 = 0; _i79 < _map76.size; ++_i79)
            {
              _key77 = iprot.readI32();
              _val78 = iprot.readDouble();
              struct.success.put(_key77, _val78);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryRetention_args implements org.apache.thrift.TBase<queryRetention_args, queryRetention_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryRetention_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRetention_args");

    private static final org.apache.thrift.protocol.TField APPKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appkey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SCOPE_FIELD_DESC = new org.apache.thrift.protocol.TField("scope", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BEGINDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("begindate", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ENDDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("enddate", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRetention_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRetention_argsTupleSchemeFactory());
    }

    public String appkey; // required
    public String scope; // required
    public int begindate; // required
    public int enddate; // required
    public String platform; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPKEY((short)1, "appkey"),
      SCOPE((short)2, "scope"),
      BEGINDATE((short)3, "begindate"),
      ENDDATE((short)4, "enddate"),
      PLATFORM((short)5, "platform");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPKEY
            return APPKEY;
          case 2: // SCOPE
            return SCOPE;
          case 3: // BEGINDATE
            return BEGINDATE;
          case 4: // ENDDATE
            return ENDDATE;
          case 5: // PLATFORM
            return PLATFORM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BEGINDATE_ISSET_ID = 0;
    private static final int __ENDDATE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPKEY, new org.apache.thrift.meta_data.FieldMetaData("appkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCOPE, new org.apache.thrift.meta_data.FieldMetaData("scope", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEGINDATE, new org.apache.thrift.meta_data.FieldMetaData("begindate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ENDDATE, new org.apache.thrift.meta_data.FieldMetaData("enddate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRetention_args.class, metaDataMap);
    }

    public queryRetention_args() {
    }

    public queryRetention_args(
      String appkey,
      String scope,
      int begindate,
      int enddate,
      String platform)
    {
      this();
      this.appkey = appkey;
      this.scope = scope;
      this.begindate = begindate;
      setBegindateIsSet(true);
      this.enddate = enddate;
      setEnddateIsSet(true);
      this.platform = platform;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRetention_args(queryRetention_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAppkey()) {
        this.appkey = other.appkey;
      }
      if (other.isSetScope()) {
        this.scope = other.scope;
      }
      this.begindate = other.begindate;
      this.enddate = other.enddate;
      if (other.isSetPlatform()) {
        this.platform = other.platform;
      }
    }

    public queryRetention_args deepCopy() {
      return new queryRetention_args(this);
    }

    @Override
    public void clear() {
      this.appkey = null;
      this.scope = null;
      setBegindateIsSet(false);
      this.begindate = 0;
      setEnddateIsSet(false);
      this.enddate = 0;
      this.platform = null;
    }

    public String getAppkey() {
      return this.appkey;
    }

    public queryRetention_args setAppkey(String appkey) {
      this.appkey = appkey;
      return this;
    }

    public void unsetAppkey() {
      this.appkey = null;
    }

    /** Returns true if field appkey is set (has been assigned a value) and false otherwise */
    public boolean isSetAppkey() {
      return this.appkey != null;
    }

    public void setAppkeyIsSet(boolean value) {
      if (!value) {
        this.appkey = null;
      }
    }

    public String getScope() {
      return this.scope;
    }

    public queryRetention_args setScope(String scope) {
      this.scope = scope;
      return this;
    }

    public void unsetScope() {
      this.scope = null;
    }

    /** Returns true if field scope is set (has been assigned a value) and false otherwise */
    public boolean isSetScope() {
      return this.scope != null;
    }

    public void setScopeIsSet(boolean value) {
      if (!value) {
        this.scope = null;
      }
    }

    public int getBegindate() {
      return this.begindate;
    }

    public queryRetention_args setBegindate(int begindate) {
      this.begindate = begindate;
      setBegindateIsSet(true);
      return this;
    }

    public void unsetBegindate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGINDATE_ISSET_ID);
    }

    /** Returns true if field begindate is set (has been assigned a value) and false otherwise */
    public boolean isSetBegindate() {
      return EncodingUtils.testBit(__isset_bitfield, __BEGINDATE_ISSET_ID);
    }

    public void setBegindateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGINDATE_ISSET_ID, value);
    }

    public int getEnddate() {
      return this.enddate;
    }

    public queryRetention_args setEnddate(int enddate) {
      this.enddate = enddate;
      setEnddateIsSet(true);
      return this;
    }

    public void unsetEnddate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    /** Returns true if field enddate is set (has been assigned a value) and false otherwise */
    public boolean isSetEnddate() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    public void setEnddateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDATE_ISSET_ID, value);
    }

    public String getPlatform() {
      return this.platform;
    }

    public queryRetention_args setPlatform(String platform) {
      this.platform = platform;
      return this;
    }

    public void unsetPlatform() {
      this.platform = null;
    }

    /** Returns true if field platform is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatform() {
      return this.platform != null;
    }

    public void setPlatformIsSet(boolean value) {
      if (!value) {
        this.platform = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPKEY:
        if (value == null) {
          unsetAppkey();
        } else {
          setAppkey((String)value);
        }
        break;

      case SCOPE:
        if (value == null) {
          unsetScope();
        } else {
          setScope((String)value);
        }
        break;

      case BEGINDATE:
        if (value == null) {
          unsetBegindate();
        } else {
          setBegindate((Integer)value);
        }
        break;

      case ENDDATE:
        if (value == null) {
          unsetEnddate();
        } else {
          setEnddate((Integer)value);
        }
        break;

      case PLATFORM:
        if (value == null) {
          unsetPlatform();
        } else {
          setPlatform((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPKEY:
        return getAppkey();

      case SCOPE:
        return getScope();

      case BEGINDATE:
        return Integer.valueOf(getBegindate());

      case ENDDATE:
        return Integer.valueOf(getEnddate());

      case PLATFORM:
        return getPlatform();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPKEY:
        return isSetAppkey();
      case SCOPE:
        return isSetScope();
      case BEGINDATE:
        return isSetBegindate();
      case ENDDATE:
        return isSetEnddate();
      case PLATFORM:
        return isSetPlatform();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRetention_args)
        return this.equals((queryRetention_args)that);
      return false;
    }

    public boolean equals(queryRetention_args that) {
      if (that == null)
        return false;

      boolean this_present_appkey = true && this.isSetAppkey();
      boolean that_present_appkey = true && that.isSetAppkey();
      if (this_present_appkey || that_present_appkey) {
        if (!(this_present_appkey && that_present_appkey))
          return false;
        if (!this.appkey.equals(that.appkey))
          return false;
      }

      boolean this_present_scope = true && this.isSetScope();
      boolean that_present_scope = true && that.isSetScope();
      if (this_present_scope || that_present_scope) {
        if (!(this_present_scope && that_present_scope))
          return false;
        if (!this.scope.equals(that.scope))
          return false;
      }

      boolean this_present_begindate = true;
      boolean that_present_begindate = true;
      if (this_present_begindate || that_present_begindate) {
        if (!(this_present_begindate && that_present_begindate))
          return false;
        if (this.begindate != that.begindate)
          return false;
      }

      boolean this_present_enddate = true;
      boolean that_present_enddate = true;
      if (this_present_enddate || that_present_enddate) {
        if (!(this_present_enddate && that_present_enddate))
          return false;
        if (this.enddate != that.enddate)
          return false;
      }

      boolean this_present_platform = true && this.isSetPlatform();
      boolean that_present_platform = true && that.isSetPlatform();
      if (this_present_platform || that_present_platform) {
        if (!(this_present_platform && that_present_platform))
          return false;
        if (!this.platform.equals(that.platform))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_appkey = true && (isSetAppkey());
      list.add(present_appkey);
      if (present_appkey)
        list.add(appkey);

      boolean present_scope = true && (isSetScope());
      list.add(present_scope);
      if (present_scope)
        list.add(scope);

      boolean present_begindate = true;
      list.add(present_begindate);
      if (present_begindate)
        list.add(begindate);

      boolean present_enddate = true;
      list.add(present_enddate);
      if (present_enddate)
        list.add(enddate);

      boolean present_platform = true && (isSetPlatform());
      list.add(present_platform);
      if (present_platform)
        list.add(platform);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRetention_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppkey()).compareTo(other.isSetAppkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appkey, other.appkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetScope()).compareTo(other.isSetScope());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScope()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scope, other.scope);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBegindate()).compareTo(other.isSetBegindate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBegindate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.begindate, other.begindate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnddate()).compareTo(other.isSetEnddate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnddate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enddate, other.enddate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(other.isSetPlatform());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatform()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, other.platform);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRetention_args(");
      boolean first = true;

      sb.append("appkey:");
      if (this.appkey == null) {
        sb.append("null");
      } else {
        sb.append(this.appkey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("scope:");
      if (this.scope == null) {
        sb.append("null");
      } else {
        sb.append(this.scope);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("begindate:");
      sb.append(this.begindate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("enddate:");
      sb.append(this.enddate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("platform:");
      if (this.platform == null) {
        sb.append("null");
      } else {
        sb.append(this.platform);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRetention_argsStandardSchemeFactory implements SchemeFactory {
      public queryRetention_argsStandardScheme getScheme() {
        return new queryRetention_argsStandardScheme();
      }
    }

    private static class queryRetention_argsStandardScheme extends StandardScheme<queryRetention_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRetention_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPKEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appkey = iprot.readString();
                struct.setAppkeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SCOPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.scope = iprot.readString();
                struct.setScopeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BEGINDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.begindate = iprot.readI32();
                struct.setBegindateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ENDDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.enddate = iprot.readI32();
                struct.setEnddateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PLATFORM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.platform = iprot.readString();
                struct.setPlatformIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRetention_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appkey != null) {
          oprot.writeFieldBegin(APPKEY_FIELD_DESC);
          oprot.writeString(struct.appkey);
          oprot.writeFieldEnd();
        }
        if (struct.scope != null) {
          oprot.writeFieldBegin(SCOPE_FIELD_DESC);
          oprot.writeString(struct.scope);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BEGINDATE_FIELD_DESC);
        oprot.writeI32(struct.begindate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ENDDATE_FIELD_DESC);
        oprot.writeI32(struct.enddate);
        oprot.writeFieldEnd();
        if (struct.platform != null) {
          oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
          oprot.writeString(struct.platform);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRetention_argsTupleSchemeFactory implements SchemeFactory {
      public queryRetention_argsTupleScheme getScheme() {
        return new queryRetention_argsTupleScheme();
      }
    }

    private static class queryRetention_argsTupleScheme extends TupleScheme<queryRetention_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRetention_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppkey()) {
          optionals.set(0);
        }
        if (struct.isSetScope()) {
          optionals.set(1);
        }
        if (struct.isSetBegindate()) {
          optionals.set(2);
        }
        if (struct.isSetEnddate()) {
          optionals.set(3);
        }
        if (struct.isSetPlatform()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetAppkey()) {
          oprot.writeString(struct.appkey);
        }
        if (struct.isSetScope()) {
          oprot.writeString(struct.scope);
        }
        if (struct.isSetBegindate()) {
          oprot.writeI32(struct.begindate);
        }
        if (struct.isSetEnddate()) {
          oprot.writeI32(struct.enddate);
        }
        if (struct.isSetPlatform()) {
          oprot.writeString(struct.platform);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRetention_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.appkey = iprot.readString();
          struct.setAppkeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.scope = iprot.readString();
          struct.setScopeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.begindate = iprot.readI32();
          struct.setBegindateIsSet(true);
        }
        if (incoming.get(3)) {
          struct.enddate = iprot.readI32();
          struct.setEnddateIsSet(true);
        }
        if (incoming.get(4)) {
          struct.platform = iprot.readString();
          struct.setPlatformIsSet(true);
        }
      }
    }

  }

  public static class queryRetention_result implements org.apache.thrift.TBase<queryRetention_result, queryRetention_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryRetention_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRetention_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRetention_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRetention_resultTupleSchemeFactory());
    }

    public Map<Integer,Map<Integer,Double>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRetention_result.class, metaDataMap);
    }

    public queryRetention_result() {
    }

    public queryRetention_result(
      Map<Integer,Map<Integer,Double>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryRetention_result(queryRetention_result other) {
      if (other.isSetSuccess()) {
        Map<Integer,Map<Integer,Double>> __this__success = new HashMap<Integer,Map<Integer,Double>>(other.success.size());
        for (Map.Entry<Integer, Map<Integer,Double>> other_element : other.success.entrySet()) {

          Integer other_element_key = other_element.getKey();
          Map<Integer,Double> other_element_value = other_element.getValue();

          Integer __this__success_copy_key = other_element_key;

          Map<Integer,Double> __this__success_copy_value = new HashMap<Integer,Double>(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public queryRetention_result deepCopy() {
      return new queryRetention_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(int key, Map<Integer,Double> val) {
      if (this.success == null) {
        this.success = new HashMap<Integer,Map<Integer,Double>>();
      }
      this.success.put(key, val);
    }

    public Map<Integer,Map<Integer,Double>> getSuccess() {
      return this.success;
    }

    public queryRetention_result setSuccess(Map<Integer,Map<Integer,Double>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<Integer,Map<Integer,Double>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRetention_result)
        return this.equals((queryRetention_result)that);
      return false;
    }

    public boolean equals(queryRetention_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryRetention_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRetention_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryRetention_resultStandardSchemeFactory implements SchemeFactory {
      public queryRetention_resultStandardScheme getScheme() {
        return new queryRetention_resultStandardScheme();
      }
    }

    private static class queryRetention_resultStandardScheme extends StandardScheme<queryRetention_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRetention_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map80 = iprot.readMapBegin();
                  struct.success = new HashMap<Integer,Map<Integer,Double>>(2*_map80.size);
                  int _key81;
                  Map<Integer,Double> _val82;
                  for (int _i83 = 0; _i83 < _map80.size; ++_i83)
                  {
                    _key81 = iprot.readI32();
                    {
                      org.apache.thrift.protocol.TMap _map84 = iprot.readMapBegin();
                      _val82 = new HashMap<Integer,Double>(2*_map84.size);
                      int _key85;
                      double _val86;
                      for (int _i87 = 0; _i87 < _map84.size; ++_i87)
                      {
                        _key85 = iprot.readI32();
                        _val86 = iprot.readDouble();
                        _val82.put(_key85, _val86);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.put(_key81, _val82);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRetention_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map.Entry<Integer, Map<Integer,Double>> _iter88 : struct.success.entrySet())
            {
              oprot.writeI32(_iter88.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, _iter88.getValue().size()));
                for (Map.Entry<Integer, Double> _iter89 : _iter88.getValue().entrySet())
                {
                  oprot.writeI32(_iter89.getKey());
                  oprot.writeDouble(_iter89.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryRetention_resultTupleSchemeFactory implements SchemeFactory {
      public queryRetention_resultTupleScheme getScheme() {
        return new queryRetention_resultTupleScheme();
      }
    }

    private static class queryRetention_resultTupleScheme extends TupleScheme<queryRetention_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRetention_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<Integer, Map<Integer,Double>> _iter90 : struct.success.entrySet())
            {
              oprot.writeI32(_iter90.getKey());
              {
                oprot.writeI32(_iter90.getValue().size());
                for (Map.Entry<Integer, Double> _iter91 : _iter90.getValue().entrySet())
                {
                  oprot.writeI32(_iter91.getKey());
                  oprot.writeDouble(_iter91.getValue());
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRetention_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map92 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new HashMap<Integer,Map<Integer,Double>>(2*_map92.size);
            int _key93;
            Map<Integer,Double> _val94;
            for (int _i95 = 0; _i95 < _map92.size; ++_i95)
            {
              _key93 = iprot.readI32();
              {
                org.apache.thrift.protocol.TMap _map96 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
                _val94 = new HashMap<Integer,Double>(2*_map96.size);
                int _key97;
                double _val98;
                for (int _i99 = 0; _i99 < _map96.size; ++_i99)
                {
                  _key97 = iprot.readI32();
                  _val98 = iprot.readDouble();
                  _val94.put(_key97, _val98);
                }
              }
              struct.success.put(_key93, _val94);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryHourKPIByGroup_args implements org.apache.thrift.TBase<queryHourKPIByGroup_args, queryHourKPIByGroup_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryHourKPIByGroup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryHourKPIByGroup_args");

    private static final org.apache.thrift.protocol.TField APPLIST_FIELD_DESC = new org.apache.thrift.protocol.TField("applist", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BEGINDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("begindate", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ENDDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("enddate", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryHourKPIByGroup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryHourKPIByGroup_argsTupleSchemeFactory());
    }

    public List<String> applist; // required
    public String code; // required
    public int begindate; // required
    public int enddate; // required
    public String platform; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLIST((short)1, "applist"),
      CODE((short)2, "code"),
      BEGINDATE((short)3, "begindate"),
      ENDDATE((short)4, "enddate"),
      PLATFORM((short)5, "platform");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLIST
            return APPLIST;
          case 2: // CODE
            return CODE;
          case 3: // BEGINDATE
            return BEGINDATE;
          case 4: // ENDDATE
            return ENDDATE;
          case 5: // PLATFORM
            return PLATFORM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BEGINDATE_ISSET_ID = 0;
    private static final int __ENDDATE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLIST, new org.apache.thrift.meta_data.FieldMetaData("applist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEGINDATE, new org.apache.thrift.meta_data.FieldMetaData("begindate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ENDDATE, new org.apache.thrift.meta_data.FieldMetaData("enddate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryHourKPIByGroup_args.class, metaDataMap);
    }

    public queryHourKPIByGroup_args() {
    }

    public queryHourKPIByGroup_args(
      List<String> applist,
      String code,
      int begindate,
      int enddate,
      String platform)
    {
      this();
      this.applist = applist;
      this.code = code;
      this.begindate = begindate;
      setBegindateIsSet(true);
      this.enddate = enddate;
      setEnddateIsSet(true);
      this.platform = platform;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryHourKPIByGroup_args(queryHourKPIByGroup_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetApplist()) {
        List<String> __this__applist = new ArrayList<String>(other.applist);
        this.applist = __this__applist;
      }
      if (other.isSetCode()) {
        this.code = other.code;
      }
      this.begindate = other.begindate;
      this.enddate = other.enddate;
      if (other.isSetPlatform()) {
        this.platform = other.platform;
      }
    }

    public queryHourKPIByGroup_args deepCopy() {
      return new queryHourKPIByGroup_args(this);
    }

    @Override
    public void clear() {
      this.applist = null;
      this.code = null;
      setBegindateIsSet(false);
      this.begindate = 0;
      setEnddateIsSet(false);
      this.enddate = 0;
      this.platform = null;
    }

    public int getApplistSize() {
      return (this.applist == null) ? 0 : this.applist.size();
    }

    public java.util.Iterator<String> getApplistIterator() {
      return (this.applist == null) ? null : this.applist.iterator();
    }

    public void addToApplist(String elem) {
      if (this.applist == null) {
        this.applist = new ArrayList<String>();
      }
      this.applist.add(elem);
    }

    public List<String> getApplist() {
      return this.applist;
    }

    public queryHourKPIByGroup_args setApplist(List<String> applist) {
      this.applist = applist;
      return this;
    }

    public void unsetApplist() {
      this.applist = null;
    }

    /** Returns true if field applist is set (has been assigned a value) and false otherwise */
    public boolean isSetApplist() {
      return this.applist != null;
    }

    public void setApplistIsSet(boolean value) {
      if (!value) {
        this.applist = null;
      }
    }

    public String getCode() {
      return this.code;
    }

    public queryHourKPIByGroup_args setCode(String code) {
      this.code = code;
      return this;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public int getBegindate() {
      return this.begindate;
    }

    public queryHourKPIByGroup_args setBegindate(int begindate) {
      this.begindate = begindate;
      setBegindateIsSet(true);
      return this;
    }

    public void unsetBegindate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGINDATE_ISSET_ID);
    }

    /** Returns true if field begindate is set (has been assigned a value) and false otherwise */
    public boolean isSetBegindate() {
      return EncodingUtils.testBit(__isset_bitfield, __BEGINDATE_ISSET_ID);
    }

    public void setBegindateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGINDATE_ISSET_ID, value);
    }

    public int getEnddate() {
      return this.enddate;
    }

    public queryHourKPIByGroup_args setEnddate(int enddate) {
      this.enddate = enddate;
      setEnddateIsSet(true);
      return this;
    }

    public void unsetEnddate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    /** Returns true if field enddate is set (has been assigned a value) and false otherwise */
    public boolean isSetEnddate() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    public void setEnddateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDATE_ISSET_ID, value);
    }

    public String getPlatform() {
      return this.platform;
    }

    public queryHourKPIByGroup_args setPlatform(String platform) {
      this.platform = platform;
      return this;
    }

    public void unsetPlatform() {
      this.platform = null;
    }

    /** Returns true if field platform is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatform() {
      return this.platform != null;
    }

    public void setPlatformIsSet(boolean value) {
      if (!value) {
        this.platform = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLIST:
        if (value == null) {
          unsetApplist();
        } else {
          setApplist((List<String>)value);
        }
        break;

      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((String)value);
        }
        break;

      case BEGINDATE:
        if (value == null) {
          unsetBegindate();
        } else {
          setBegindate((Integer)value);
        }
        break;

      case ENDDATE:
        if (value == null) {
          unsetEnddate();
        } else {
          setEnddate((Integer)value);
        }
        break;

      case PLATFORM:
        if (value == null) {
          unsetPlatform();
        } else {
          setPlatform((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLIST:
        return getApplist();

      case CODE:
        return getCode();

      case BEGINDATE:
        return Integer.valueOf(getBegindate());

      case ENDDATE:
        return Integer.valueOf(getEnddate());

      case PLATFORM:
        return getPlatform();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLIST:
        return isSetApplist();
      case CODE:
        return isSetCode();
      case BEGINDATE:
        return isSetBegindate();
      case ENDDATE:
        return isSetEnddate();
      case PLATFORM:
        return isSetPlatform();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryHourKPIByGroup_args)
        return this.equals((queryHourKPIByGroup_args)that);
      return false;
    }

    public boolean equals(queryHourKPIByGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_applist = true && this.isSetApplist();
      boolean that_present_applist = true && that.isSetApplist();
      if (this_present_applist || that_present_applist) {
        if (!(this_present_applist && that_present_applist))
          return false;
        if (!this.applist.equals(that.applist))
          return false;
      }

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      boolean this_present_begindate = true;
      boolean that_present_begindate = true;
      if (this_present_begindate || that_present_begindate) {
        if (!(this_present_begindate && that_present_begindate))
          return false;
        if (this.begindate != that.begindate)
          return false;
      }

      boolean this_present_enddate = true;
      boolean that_present_enddate = true;
      if (this_present_enddate || that_present_enddate) {
        if (!(this_present_enddate && that_present_enddate))
          return false;
        if (this.enddate != that.enddate)
          return false;
      }

      boolean this_present_platform = true && this.isSetPlatform();
      boolean that_present_platform = true && that.isSetPlatform();
      if (this_present_platform || that_present_platform) {
        if (!(this_present_platform && that_present_platform))
          return false;
        if (!this.platform.equals(that.platform))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_applist = true && (isSetApplist());
      list.add(present_applist);
      if (present_applist)
        list.add(applist);

      boolean present_code = true && (isSetCode());
      list.add(present_code);
      if (present_code)
        list.add(code);

      boolean present_begindate = true;
      list.add(present_begindate);
      if (present_begindate)
        list.add(begindate);

      boolean present_enddate = true;
      list.add(present_enddate);
      if (present_enddate)
        list.add(enddate);

      boolean present_platform = true && (isSetPlatform());
      list.add(present_platform);
      if (present_platform)
        list.add(platform);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryHourKPIByGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplist()).compareTo(other.isSetApplist());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplist()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applist, other.applist);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBegindate()).compareTo(other.isSetBegindate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBegindate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.begindate, other.begindate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnddate()).compareTo(other.isSetEnddate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnddate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enddate, other.enddate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(other.isSetPlatform());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatform()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, other.platform);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryHourKPIByGroup_args(");
      boolean first = true;

      sb.append("applist:");
      if (this.applist == null) {
        sb.append("null");
      } else {
        sb.append(this.applist);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("begindate:");
      sb.append(this.begindate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("enddate:");
      sb.append(this.enddate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("platform:");
      if (this.platform == null) {
        sb.append("null");
      } else {
        sb.append(this.platform);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryHourKPIByGroup_argsStandardSchemeFactory implements SchemeFactory {
      public queryHourKPIByGroup_argsStandardScheme getScheme() {
        return new queryHourKPIByGroup_argsStandardScheme();
      }
    }

    private static class queryHourKPIByGroup_argsStandardScheme extends StandardScheme<queryHourKPIByGroup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryHourKPIByGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list100 = iprot.readListBegin();
                  struct.applist = new ArrayList<String>(_list100.size);
                  String _elem101;
                  for (int _i102 = 0; _i102 < _list100.size; ++_i102)
                  {
                    _elem101 = iprot.readString();
                    struct.applist.add(_elem101);
                  }
                  iprot.readListEnd();
                }
                struct.setApplistIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BEGINDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.begindate = iprot.readI32();
                struct.setBegindateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ENDDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.enddate = iprot.readI32();
                struct.setEnddateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PLATFORM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.platform = iprot.readString();
                struct.setPlatformIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryHourKPIByGroup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applist != null) {
          oprot.writeFieldBegin(APPLIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.applist.size()));
            for (String _iter103 : struct.applist)
            {
              oprot.writeString(_iter103);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BEGINDATE_FIELD_DESC);
        oprot.writeI32(struct.begindate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ENDDATE_FIELD_DESC);
        oprot.writeI32(struct.enddate);
        oprot.writeFieldEnd();
        if (struct.platform != null) {
          oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
          oprot.writeString(struct.platform);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryHourKPIByGroup_argsTupleSchemeFactory implements SchemeFactory {
      public queryHourKPIByGroup_argsTupleScheme getScheme() {
        return new queryHourKPIByGroup_argsTupleScheme();
      }
    }

    private static class queryHourKPIByGroup_argsTupleScheme extends TupleScheme<queryHourKPIByGroup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryHourKPIByGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplist()) {
          optionals.set(0);
        }
        if (struct.isSetCode()) {
          optionals.set(1);
        }
        if (struct.isSetBegindate()) {
          optionals.set(2);
        }
        if (struct.isSetEnddate()) {
          optionals.set(3);
        }
        if (struct.isSetPlatform()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetApplist()) {
          {
            oprot.writeI32(struct.applist.size());
            for (String _iter104 : struct.applist)
            {
              oprot.writeString(_iter104);
            }
          }
        }
        if (struct.isSetCode()) {
          oprot.writeString(struct.code);
        }
        if (struct.isSetBegindate()) {
          oprot.writeI32(struct.begindate);
        }
        if (struct.isSetEnddate()) {
          oprot.writeI32(struct.enddate);
        }
        if (struct.isSetPlatform()) {
          oprot.writeString(struct.platform);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryHourKPIByGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list105 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.applist = new ArrayList<String>(_list105.size);
            String _elem106;
            for (int _i107 = 0; _i107 < _list105.size; ++_i107)
            {
              _elem106 = iprot.readString();
              struct.applist.add(_elem106);
            }
          }
          struct.setApplistIsSet(true);
        }
        if (incoming.get(1)) {
          struct.code = iprot.readString();
          struct.setCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.begindate = iprot.readI32();
          struct.setBegindateIsSet(true);
        }
        if (incoming.get(3)) {
          struct.enddate = iprot.readI32();
          struct.setEnddateIsSet(true);
        }
        if (incoming.get(4)) {
          struct.platform = iprot.readString();
          struct.setPlatformIsSet(true);
        }
      }
    }

  }

  public static class queryHourKPIByGroup_result implements org.apache.thrift.TBase<queryHourKPIByGroup_result, queryHourKPIByGroup_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryHourKPIByGroup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryHourKPIByGroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryHourKPIByGroup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryHourKPIByGroup_resultTupleSchemeFactory());
    }

    public Map<Integer,Map<Integer,Double>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryHourKPIByGroup_result.class, metaDataMap);
    }

    public queryHourKPIByGroup_result() {
    }

    public queryHourKPIByGroup_result(
      Map<Integer,Map<Integer,Double>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryHourKPIByGroup_result(queryHourKPIByGroup_result other) {
      if (other.isSetSuccess()) {
        Map<Integer,Map<Integer,Double>> __this__success = new HashMap<Integer,Map<Integer,Double>>(other.success.size());
        for (Map.Entry<Integer, Map<Integer,Double>> other_element : other.success.entrySet()) {

          Integer other_element_key = other_element.getKey();
          Map<Integer,Double> other_element_value = other_element.getValue();

          Integer __this__success_copy_key = other_element_key;

          Map<Integer,Double> __this__success_copy_value = new HashMap<Integer,Double>(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public queryHourKPIByGroup_result deepCopy() {
      return new queryHourKPIByGroup_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(int key, Map<Integer,Double> val) {
      if (this.success == null) {
        this.success = new HashMap<Integer,Map<Integer,Double>>();
      }
      this.success.put(key, val);
    }

    public Map<Integer,Map<Integer,Double>> getSuccess() {
      return this.success;
    }

    public queryHourKPIByGroup_result setSuccess(Map<Integer,Map<Integer,Double>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<Integer,Map<Integer,Double>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryHourKPIByGroup_result)
        return this.equals((queryHourKPIByGroup_result)that);
      return false;
    }

    public boolean equals(queryHourKPIByGroup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryHourKPIByGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryHourKPIByGroup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryHourKPIByGroup_resultStandardSchemeFactory implements SchemeFactory {
      public queryHourKPIByGroup_resultStandardScheme getScheme() {
        return new queryHourKPIByGroup_resultStandardScheme();
      }
    }

    private static class queryHourKPIByGroup_resultStandardScheme extends StandardScheme<queryHourKPIByGroup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryHourKPIByGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map108 = iprot.readMapBegin();
                  struct.success = new HashMap<Integer,Map<Integer,Double>>(2*_map108.size);
                  int _key109;
                  Map<Integer,Double> _val110;
                  for (int _i111 = 0; _i111 < _map108.size; ++_i111)
                  {
                    _key109 = iprot.readI32();
                    {
                      org.apache.thrift.protocol.TMap _map112 = iprot.readMapBegin();
                      _val110 = new HashMap<Integer,Double>(2*_map112.size);
                      int _key113;
                      double _val114;
                      for (int _i115 = 0; _i115 < _map112.size; ++_i115)
                      {
                        _key113 = iprot.readI32();
                        _val114 = iprot.readDouble();
                        _val110.put(_key113, _val114);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.put(_key109, _val110);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryHourKPIByGroup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map.Entry<Integer, Map<Integer,Double>> _iter116 : struct.success.entrySet())
            {
              oprot.writeI32(_iter116.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, _iter116.getValue().size()));
                for (Map.Entry<Integer, Double> _iter117 : _iter116.getValue().entrySet())
                {
                  oprot.writeI32(_iter117.getKey());
                  oprot.writeDouble(_iter117.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryHourKPIByGroup_resultTupleSchemeFactory implements SchemeFactory {
      public queryHourKPIByGroup_resultTupleScheme getScheme() {
        return new queryHourKPIByGroup_resultTupleScheme();
      }
    }

    private static class queryHourKPIByGroup_resultTupleScheme extends TupleScheme<queryHourKPIByGroup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryHourKPIByGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<Integer, Map<Integer,Double>> _iter118 : struct.success.entrySet())
            {
              oprot.writeI32(_iter118.getKey());
              {
                oprot.writeI32(_iter118.getValue().size());
                for (Map.Entry<Integer, Double> _iter119 : _iter118.getValue().entrySet())
                {
                  oprot.writeI32(_iter119.getKey());
                  oprot.writeDouble(_iter119.getValue());
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryHourKPIByGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map120 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new HashMap<Integer,Map<Integer,Double>>(2*_map120.size);
            int _key121;
            Map<Integer,Double> _val122;
            for (int _i123 = 0; _i123 < _map120.size; ++_i123)
            {
              _key121 = iprot.readI32();
              {
                org.apache.thrift.protocol.TMap _map124 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
                _val122 = new HashMap<Integer,Double>(2*_map124.size);
                int _key125;
                double _val126;
                for (int _i127 = 0; _i127 < _map124.size; ++_i127)
                {
                  _key125 = iprot.readI32();
                  _val126 = iprot.readDouble();
                  _val122.put(_key125, _val126);
                }
              }
              struct.success.put(_key121, _val122);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryDayKPIByGroup_args implements org.apache.thrift.TBase<queryDayKPIByGroup_args, queryDayKPIByGroup_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryDayKPIByGroup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryDayKPIByGroup_args");

    private static final org.apache.thrift.protocol.TField APPLIST_FIELD_DESC = new org.apache.thrift.protocol.TField("applist", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BEGINDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("begindate", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ENDDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("enddate", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryDayKPIByGroup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryDayKPIByGroup_argsTupleSchemeFactory());
    }

    public List<String> applist; // required
    public String code; // required
    public int begindate; // required
    public int enddate; // required
    public String platform; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLIST((short)1, "applist"),
      CODE((short)2, "code"),
      BEGINDATE((short)3, "begindate"),
      ENDDATE((short)4, "enddate"),
      PLATFORM((short)5, "platform");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLIST
            return APPLIST;
          case 2: // CODE
            return CODE;
          case 3: // BEGINDATE
            return BEGINDATE;
          case 4: // ENDDATE
            return ENDDATE;
          case 5: // PLATFORM
            return PLATFORM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BEGINDATE_ISSET_ID = 0;
    private static final int __ENDDATE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLIST, new org.apache.thrift.meta_data.FieldMetaData("applist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEGINDATE, new org.apache.thrift.meta_data.FieldMetaData("begindate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ENDDATE, new org.apache.thrift.meta_data.FieldMetaData("enddate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryDayKPIByGroup_args.class, metaDataMap);
    }

    public queryDayKPIByGroup_args() {
    }

    public queryDayKPIByGroup_args(
      List<String> applist,
      String code,
      int begindate,
      int enddate,
      String platform)
    {
      this();
      this.applist = applist;
      this.code = code;
      this.begindate = begindate;
      setBegindateIsSet(true);
      this.enddate = enddate;
      setEnddateIsSet(true);
      this.platform = platform;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryDayKPIByGroup_args(queryDayKPIByGroup_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetApplist()) {
        List<String> __this__applist = new ArrayList<String>(other.applist);
        this.applist = __this__applist;
      }
      if (other.isSetCode()) {
        this.code = other.code;
      }
      this.begindate = other.begindate;
      this.enddate = other.enddate;
      if (other.isSetPlatform()) {
        this.platform = other.platform;
      }
    }

    public queryDayKPIByGroup_args deepCopy() {
      return new queryDayKPIByGroup_args(this);
    }

    @Override
    public void clear() {
      this.applist = null;
      this.code = null;
      setBegindateIsSet(false);
      this.begindate = 0;
      setEnddateIsSet(false);
      this.enddate = 0;
      this.platform = null;
    }

    public int getApplistSize() {
      return (this.applist == null) ? 0 : this.applist.size();
    }

    public java.util.Iterator<String> getApplistIterator() {
      return (this.applist == null) ? null : this.applist.iterator();
    }

    public void addToApplist(String elem) {
      if (this.applist == null) {
        this.applist = new ArrayList<String>();
      }
      this.applist.add(elem);
    }

    public List<String> getApplist() {
      return this.applist;
    }

    public queryDayKPIByGroup_args setApplist(List<String> applist) {
      this.applist = applist;
      return this;
    }

    public void unsetApplist() {
      this.applist = null;
    }

    /** Returns true if field applist is set (has been assigned a value) and false otherwise */
    public boolean isSetApplist() {
      return this.applist != null;
    }

    public void setApplistIsSet(boolean value) {
      if (!value) {
        this.applist = null;
      }
    }

    public String getCode() {
      return this.code;
    }

    public queryDayKPIByGroup_args setCode(String code) {
      this.code = code;
      return this;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public int getBegindate() {
      return this.begindate;
    }

    public queryDayKPIByGroup_args setBegindate(int begindate) {
      this.begindate = begindate;
      setBegindateIsSet(true);
      return this;
    }

    public void unsetBegindate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGINDATE_ISSET_ID);
    }

    /** Returns true if field begindate is set (has been assigned a value) and false otherwise */
    public boolean isSetBegindate() {
      return EncodingUtils.testBit(__isset_bitfield, __BEGINDATE_ISSET_ID);
    }

    public void setBegindateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGINDATE_ISSET_ID, value);
    }

    public int getEnddate() {
      return this.enddate;
    }

    public queryDayKPIByGroup_args setEnddate(int enddate) {
      this.enddate = enddate;
      setEnddateIsSet(true);
      return this;
    }

    public void unsetEnddate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    /** Returns true if field enddate is set (has been assigned a value) and false otherwise */
    public boolean isSetEnddate() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    public void setEnddateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDATE_ISSET_ID, value);
    }

    public String getPlatform() {
      return this.platform;
    }

    public queryDayKPIByGroup_args setPlatform(String platform) {
      this.platform = platform;
      return this;
    }

    public void unsetPlatform() {
      this.platform = null;
    }

    /** Returns true if field platform is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatform() {
      return this.platform != null;
    }

    public void setPlatformIsSet(boolean value) {
      if (!value) {
        this.platform = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLIST:
        if (value == null) {
          unsetApplist();
        } else {
          setApplist((List<String>)value);
        }
        break;

      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((String)value);
        }
        break;

      case BEGINDATE:
        if (value == null) {
          unsetBegindate();
        } else {
          setBegindate((Integer)value);
        }
        break;

      case ENDDATE:
        if (value == null) {
          unsetEnddate();
        } else {
          setEnddate((Integer)value);
        }
        break;

      case PLATFORM:
        if (value == null) {
          unsetPlatform();
        } else {
          setPlatform((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLIST:
        return getApplist();

      case CODE:
        return getCode();

      case BEGINDATE:
        return Integer.valueOf(getBegindate());

      case ENDDATE:
        return Integer.valueOf(getEnddate());

      case PLATFORM:
        return getPlatform();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLIST:
        return isSetApplist();
      case CODE:
        return isSetCode();
      case BEGINDATE:
        return isSetBegindate();
      case ENDDATE:
        return isSetEnddate();
      case PLATFORM:
        return isSetPlatform();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryDayKPIByGroup_args)
        return this.equals((queryDayKPIByGroup_args)that);
      return false;
    }

    public boolean equals(queryDayKPIByGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_applist = true && this.isSetApplist();
      boolean that_present_applist = true && that.isSetApplist();
      if (this_present_applist || that_present_applist) {
        if (!(this_present_applist && that_present_applist))
          return false;
        if (!this.applist.equals(that.applist))
          return false;
      }

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      boolean this_present_begindate = true;
      boolean that_present_begindate = true;
      if (this_present_begindate || that_present_begindate) {
        if (!(this_present_begindate && that_present_begindate))
          return false;
        if (this.begindate != that.begindate)
          return false;
      }

      boolean this_present_enddate = true;
      boolean that_present_enddate = true;
      if (this_present_enddate || that_present_enddate) {
        if (!(this_present_enddate && that_present_enddate))
          return false;
        if (this.enddate != that.enddate)
          return false;
      }

      boolean this_present_platform = true && this.isSetPlatform();
      boolean that_present_platform = true && that.isSetPlatform();
      if (this_present_platform || that_present_platform) {
        if (!(this_present_platform && that_present_platform))
          return false;
        if (!this.platform.equals(that.platform))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_applist = true && (isSetApplist());
      list.add(present_applist);
      if (present_applist)
        list.add(applist);

      boolean present_code = true && (isSetCode());
      list.add(present_code);
      if (present_code)
        list.add(code);

      boolean present_begindate = true;
      list.add(present_begindate);
      if (present_begindate)
        list.add(begindate);

      boolean present_enddate = true;
      list.add(present_enddate);
      if (present_enddate)
        list.add(enddate);

      boolean present_platform = true && (isSetPlatform());
      list.add(present_platform);
      if (present_platform)
        list.add(platform);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryDayKPIByGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplist()).compareTo(other.isSetApplist());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplist()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applist, other.applist);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBegindate()).compareTo(other.isSetBegindate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBegindate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.begindate, other.begindate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnddate()).compareTo(other.isSetEnddate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnddate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enddate, other.enddate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(other.isSetPlatform());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatform()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, other.platform);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryDayKPIByGroup_args(");
      boolean first = true;

      sb.append("applist:");
      if (this.applist == null) {
        sb.append("null");
      } else {
        sb.append(this.applist);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("begindate:");
      sb.append(this.begindate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("enddate:");
      sb.append(this.enddate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("platform:");
      if (this.platform == null) {
        sb.append("null");
      } else {
        sb.append(this.platform);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryDayKPIByGroup_argsStandardSchemeFactory implements SchemeFactory {
      public queryDayKPIByGroup_argsStandardScheme getScheme() {
        return new queryDayKPIByGroup_argsStandardScheme();
      }
    }

    private static class queryDayKPIByGroup_argsStandardScheme extends StandardScheme<queryDayKPIByGroup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryDayKPIByGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                  struct.applist = new ArrayList<String>(_list128.size);
                  String _elem129;
                  for (int _i130 = 0; _i130 < _list128.size; ++_i130)
                  {
                    _elem129 = iprot.readString();
                    struct.applist.add(_elem129);
                  }
                  iprot.readListEnd();
                }
                struct.setApplistIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BEGINDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.begindate = iprot.readI32();
                struct.setBegindateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ENDDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.enddate = iprot.readI32();
                struct.setEnddateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PLATFORM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.platform = iprot.readString();
                struct.setPlatformIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryDayKPIByGroup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applist != null) {
          oprot.writeFieldBegin(APPLIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.applist.size()));
            for (String _iter131 : struct.applist)
            {
              oprot.writeString(_iter131);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BEGINDATE_FIELD_DESC);
        oprot.writeI32(struct.begindate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ENDDATE_FIELD_DESC);
        oprot.writeI32(struct.enddate);
        oprot.writeFieldEnd();
        if (struct.platform != null) {
          oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
          oprot.writeString(struct.platform);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryDayKPIByGroup_argsTupleSchemeFactory implements SchemeFactory {
      public queryDayKPIByGroup_argsTupleScheme getScheme() {
        return new queryDayKPIByGroup_argsTupleScheme();
      }
    }

    private static class queryDayKPIByGroup_argsTupleScheme extends TupleScheme<queryDayKPIByGroup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryDayKPIByGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplist()) {
          optionals.set(0);
        }
        if (struct.isSetCode()) {
          optionals.set(1);
        }
        if (struct.isSetBegindate()) {
          optionals.set(2);
        }
        if (struct.isSetEnddate()) {
          optionals.set(3);
        }
        if (struct.isSetPlatform()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetApplist()) {
          {
            oprot.writeI32(struct.applist.size());
            for (String _iter132 : struct.applist)
            {
              oprot.writeString(_iter132);
            }
          }
        }
        if (struct.isSetCode()) {
          oprot.writeString(struct.code);
        }
        if (struct.isSetBegindate()) {
          oprot.writeI32(struct.begindate);
        }
        if (struct.isSetEnddate()) {
          oprot.writeI32(struct.enddate);
        }
        if (struct.isSetPlatform()) {
          oprot.writeString(struct.platform);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryDayKPIByGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list133 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.applist = new ArrayList<String>(_list133.size);
            String _elem134;
            for (int _i135 = 0; _i135 < _list133.size; ++_i135)
            {
              _elem134 = iprot.readString();
              struct.applist.add(_elem134);
            }
          }
          struct.setApplistIsSet(true);
        }
        if (incoming.get(1)) {
          struct.code = iprot.readString();
          struct.setCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.begindate = iprot.readI32();
          struct.setBegindateIsSet(true);
        }
        if (incoming.get(3)) {
          struct.enddate = iprot.readI32();
          struct.setEnddateIsSet(true);
        }
        if (incoming.get(4)) {
          struct.platform = iprot.readString();
          struct.setPlatformIsSet(true);
        }
      }
    }

  }

  public static class queryDayKPIByGroup_result implements org.apache.thrift.TBase<queryDayKPIByGroup_result, queryDayKPIByGroup_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryDayKPIByGroup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryDayKPIByGroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryDayKPIByGroup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryDayKPIByGroup_resultTupleSchemeFactory());
    }

    public Map<Integer,Double> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryDayKPIByGroup_result.class, metaDataMap);
    }

    public queryDayKPIByGroup_result() {
    }

    public queryDayKPIByGroup_result(
      Map<Integer,Double> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryDayKPIByGroup_result(queryDayKPIByGroup_result other) {
      if (other.isSetSuccess()) {
        Map<Integer,Double> __this__success = new HashMap<Integer,Double>(other.success);
        this.success = __this__success;
      }
    }

    public queryDayKPIByGroup_result deepCopy() {
      return new queryDayKPIByGroup_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(int key, double val) {
      if (this.success == null) {
        this.success = new HashMap<Integer,Double>();
      }
      this.success.put(key, val);
    }

    public Map<Integer,Double> getSuccess() {
      return this.success;
    }

    public queryDayKPIByGroup_result setSuccess(Map<Integer,Double> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<Integer,Double>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryDayKPIByGroup_result)
        return this.equals((queryDayKPIByGroup_result)that);
      return false;
    }

    public boolean equals(queryDayKPIByGroup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryDayKPIByGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryDayKPIByGroup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryDayKPIByGroup_resultStandardSchemeFactory implements SchemeFactory {
      public queryDayKPIByGroup_resultStandardScheme getScheme() {
        return new queryDayKPIByGroup_resultStandardScheme();
      }
    }

    private static class queryDayKPIByGroup_resultStandardScheme extends StandardScheme<queryDayKPIByGroup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryDayKPIByGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map136 = iprot.readMapBegin();
                  struct.success = new HashMap<Integer,Double>(2*_map136.size);
                  int _key137;
                  double _val138;
                  for (int _i139 = 0; _i139 < _map136.size; ++_i139)
                  {
                    _key137 = iprot.readI32();
                    _val138 = iprot.readDouble();
                    struct.success.put(_key137, _val138);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryDayKPIByGroup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, struct.success.size()));
            for (Map.Entry<Integer, Double> _iter140 : struct.success.entrySet())
            {
              oprot.writeI32(_iter140.getKey());
              oprot.writeDouble(_iter140.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryDayKPIByGroup_resultTupleSchemeFactory implements SchemeFactory {
      public queryDayKPIByGroup_resultTupleScheme getScheme() {
        return new queryDayKPIByGroup_resultTupleScheme();
      }
    }

    private static class queryDayKPIByGroup_resultTupleScheme extends TupleScheme<queryDayKPIByGroup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryDayKPIByGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<Integer, Double> _iter141 : struct.success.entrySet())
            {
              oprot.writeI32(_iter141.getKey());
              oprot.writeDouble(_iter141.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryDayKPIByGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map142 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.success = new HashMap<Integer,Double>(2*_map142.size);
            int _key143;
            double _val144;
            for (int _i145 = 0; _i145 < _map142.size; ++_i145)
            {
              _key143 = iprot.readI32();
              _val144 = iprot.readDouble();
              struct.success.put(_key143, _val144);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryMonthKPIByGroup_args implements org.apache.thrift.TBase<queryMonthKPIByGroup_args, queryMonthKPIByGroup_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryMonthKPIByGroup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryMonthKPIByGroup_args");

    private static final org.apache.thrift.protocol.TField APPLIST_FIELD_DESC = new org.apache.thrift.protocol.TField("applist", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BEGINDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("begindate", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ENDDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("enddate", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryMonthKPIByGroup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryMonthKPIByGroup_argsTupleSchemeFactory());
    }

    public List<String> applist; // required
    public String code; // required
    public int begindate; // required
    public int enddate; // required
    public String platform; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPLIST((short)1, "applist"),
      CODE((short)2, "code"),
      BEGINDATE((short)3, "begindate"),
      ENDDATE((short)4, "enddate"),
      PLATFORM((short)5, "platform");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPLIST
            return APPLIST;
          case 2: // CODE
            return CODE;
          case 3: // BEGINDATE
            return BEGINDATE;
          case 4: // ENDDATE
            return ENDDATE;
          case 5: // PLATFORM
            return PLATFORM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BEGINDATE_ISSET_ID = 0;
    private static final int __ENDDATE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPLIST, new org.apache.thrift.meta_data.FieldMetaData("applist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEGINDATE, new org.apache.thrift.meta_data.FieldMetaData("begindate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ENDDATE, new org.apache.thrift.meta_data.FieldMetaData("enddate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryMonthKPIByGroup_args.class, metaDataMap);
    }

    public queryMonthKPIByGroup_args() {
    }

    public queryMonthKPIByGroup_args(
      List<String> applist,
      String code,
      int begindate,
      int enddate,
      String platform)
    {
      this();
      this.applist = applist;
      this.code = code;
      this.begindate = begindate;
      setBegindateIsSet(true);
      this.enddate = enddate;
      setEnddateIsSet(true);
      this.platform = platform;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryMonthKPIByGroup_args(queryMonthKPIByGroup_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetApplist()) {
        List<String> __this__applist = new ArrayList<String>(other.applist);
        this.applist = __this__applist;
      }
      if (other.isSetCode()) {
        this.code = other.code;
      }
      this.begindate = other.begindate;
      this.enddate = other.enddate;
      if (other.isSetPlatform()) {
        this.platform = other.platform;
      }
    }

    public queryMonthKPIByGroup_args deepCopy() {
      return new queryMonthKPIByGroup_args(this);
    }

    @Override
    public void clear() {
      this.applist = null;
      this.code = null;
      setBegindateIsSet(false);
      this.begindate = 0;
      setEnddateIsSet(false);
      this.enddate = 0;
      this.platform = null;
    }

    public int getApplistSize() {
      return (this.applist == null) ? 0 : this.applist.size();
    }

    public java.util.Iterator<String> getApplistIterator() {
      return (this.applist == null) ? null : this.applist.iterator();
    }

    public void addToApplist(String elem) {
      if (this.applist == null) {
        this.applist = new ArrayList<String>();
      }
      this.applist.add(elem);
    }

    public List<String> getApplist() {
      return this.applist;
    }

    public queryMonthKPIByGroup_args setApplist(List<String> applist) {
      this.applist = applist;
      return this;
    }

    public void unsetApplist() {
      this.applist = null;
    }

    /** Returns true if field applist is set (has been assigned a value) and false otherwise */
    public boolean isSetApplist() {
      return this.applist != null;
    }

    public void setApplistIsSet(boolean value) {
      if (!value) {
        this.applist = null;
      }
    }

    public String getCode() {
      return this.code;
    }

    public queryMonthKPIByGroup_args setCode(String code) {
      this.code = code;
      return this;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public int getBegindate() {
      return this.begindate;
    }

    public queryMonthKPIByGroup_args setBegindate(int begindate) {
      this.begindate = begindate;
      setBegindateIsSet(true);
      return this;
    }

    public void unsetBegindate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGINDATE_ISSET_ID);
    }

    /** Returns true if field begindate is set (has been assigned a value) and false otherwise */
    public boolean isSetBegindate() {
      return EncodingUtils.testBit(__isset_bitfield, __BEGINDATE_ISSET_ID);
    }

    public void setBegindateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGINDATE_ISSET_ID, value);
    }

    public int getEnddate() {
      return this.enddate;
    }

    public queryMonthKPIByGroup_args setEnddate(int enddate) {
      this.enddate = enddate;
      setEnddateIsSet(true);
      return this;
    }

    public void unsetEnddate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    /** Returns true if field enddate is set (has been assigned a value) and false otherwise */
    public boolean isSetEnddate() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    public void setEnddateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDATE_ISSET_ID, value);
    }

    public String getPlatform() {
      return this.platform;
    }

    public queryMonthKPIByGroup_args setPlatform(String platform) {
      this.platform = platform;
      return this;
    }

    public void unsetPlatform() {
      this.platform = null;
    }

    /** Returns true if field platform is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatform() {
      return this.platform != null;
    }

    public void setPlatformIsSet(boolean value) {
      if (!value) {
        this.platform = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPLIST:
        if (value == null) {
          unsetApplist();
        } else {
          setApplist((List<String>)value);
        }
        break;

      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((String)value);
        }
        break;

      case BEGINDATE:
        if (value == null) {
          unsetBegindate();
        } else {
          setBegindate((Integer)value);
        }
        break;

      case ENDDATE:
        if (value == null) {
          unsetEnddate();
        } else {
          setEnddate((Integer)value);
        }
        break;

      case PLATFORM:
        if (value == null) {
          unsetPlatform();
        } else {
          setPlatform((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPLIST:
        return getApplist();

      case CODE:
        return getCode();

      case BEGINDATE:
        return Integer.valueOf(getBegindate());

      case ENDDATE:
        return Integer.valueOf(getEnddate());

      case PLATFORM:
        return getPlatform();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPLIST:
        return isSetApplist();
      case CODE:
        return isSetCode();
      case BEGINDATE:
        return isSetBegindate();
      case ENDDATE:
        return isSetEnddate();
      case PLATFORM:
        return isSetPlatform();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryMonthKPIByGroup_args)
        return this.equals((queryMonthKPIByGroup_args)that);
      return false;
    }

    public boolean equals(queryMonthKPIByGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_applist = true && this.isSetApplist();
      boolean that_present_applist = true && that.isSetApplist();
      if (this_present_applist || that_present_applist) {
        if (!(this_present_applist && that_present_applist))
          return false;
        if (!this.applist.equals(that.applist))
          return false;
      }

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      boolean this_present_begindate = true;
      boolean that_present_begindate = true;
      if (this_present_begindate || that_present_begindate) {
        if (!(this_present_begindate && that_present_begindate))
          return false;
        if (this.begindate != that.begindate)
          return false;
      }

      boolean this_present_enddate = true;
      boolean that_present_enddate = true;
      if (this_present_enddate || that_present_enddate) {
        if (!(this_present_enddate && that_present_enddate))
          return false;
        if (this.enddate != that.enddate)
          return false;
      }

      boolean this_present_platform = true && this.isSetPlatform();
      boolean that_present_platform = true && that.isSetPlatform();
      if (this_present_platform || that_present_platform) {
        if (!(this_present_platform && that_present_platform))
          return false;
        if (!this.platform.equals(that.platform))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_applist = true && (isSetApplist());
      list.add(present_applist);
      if (present_applist)
        list.add(applist);

      boolean present_code = true && (isSetCode());
      list.add(present_code);
      if (present_code)
        list.add(code);

      boolean present_begindate = true;
      list.add(present_begindate);
      if (present_begindate)
        list.add(begindate);

      boolean present_enddate = true;
      list.add(present_enddate);
      if (present_enddate)
        list.add(enddate);

      boolean present_platform = true && (isSetPlatform());
      list.add(present_platform);
      if (present_platform)
        list.add(platform);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryMonthKPIByGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetApplist()).compareTo(other.isSetApplist());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplist()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applist, other.applist);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBegindate()).compareTo(other.isSetBegindate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBegindate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.begindate, other.begindate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnddate()).compareTo(other.isSetEnddate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnddate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enddate, other.enddate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(other.isSetPlatform());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatform()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, other.platform);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryMonthKPIByGroup_args(");
      boolean first = true;

      sb.append("applist:");
      if (this.applist == null) {
        sb.append("null");
      } else {
        sb.append(this.applist);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("begindate:");
      sb.append(this.begindate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("enddate:");
      sb.append(this.enddate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("platform:");
      if (this.platform == null) {
        sb.append("null");
      } else {
        sb.append(this.platform);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryMonthKPIByGroup_argsStandardSchemeFactory implements SchemeFactory {
      public queryMonthKPIByGroup_argsStandardScheme getScheme() {
        return new queryMonthKPIByGroup_argsStandardScheme();
      }
    }

    private static class queryMonthKPIByGroup_argsStandardScheme extends StandardScheme<queryMonthKPIByGroup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryMonthKPIByGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPLIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list146 = iprot.readListBegin();
                  struct.applist = new ArrayList<String>(_list146.size);
                  String _elem147;
                  for (int _i148 = 0; _i148 < _list146.size; ++_i148)
                  {
                    _elem147 = iprot.readString();
                    struct.applist.add(_elem147);
                  }
                  iprot.readListEnd();
                }
                struct.setApplistIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BEGINDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.begindate = iprot.readI32();
                struct.setBegindateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ENDDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.enddate = iprot.readI32();
                struct.setEnddateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PLATFORM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.platform = iprot.readString();
                struct.setPlatformIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryMonthKPIByGroup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.applist != null) {
          oprot.writeFieldBegin(APPLIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.applist.size()));
            for (String _iter149 : struct.applist)
            {
              oprot.writeString(_iter149);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BEGINDATE_FIELD_DESC);
        oprot.writeI32(struct.begindate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ENDDATE_FIELD_DESC);
        oprot.writeI32(struct.enddate);
        oprot.writeFieldEnd();
        if (struct.platform != null) {
          oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
          oprot.writeString(struct.platform);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryMonthKPIByGroup_argsTupleSchemeFactory implements SchemeFactory {
      public queryMonthKPIByGroup_argsTupleScheme getScheme() {
        return new queryMonthKPIByGroup_argsTupleScheme();
      }
    }

    private static class queryMonthKPIByGroup_argsTupleScheme extends TupleScheme<queryMonthKPIByGroup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryMonthKPIByGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApplist()) {
          optionals.set(0);
        }
        if (struct.isSetCode()) {
          optionals.set(1);
        }
        if (struct.isSetBegindate()) {
          optionals.set(2);
        }
        if (struct.isSetEnddate()) {
          optionals.set(3);
        }
        if (struct.isSetPlatform()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetApplist()) {
          {
            oprot.writeI32(struct.applist.size());
            for (String _iter150 : struct.applist)
            {
              oprot.writeString(_iter150);
            }
          }
        }
        if (struct.isSetCode()) {
          oprot.writeString(struct.code);
        }
        if (struct.isSetBegindate()) {
          oprot.writeI32(struct.begindate);
        }
        if (struct.isSetEnddate()) {
          oprot.writeI32(struct.enddate);
        }
        if (struct.isSetPlatform()) {
          oprot.writeString(struct.platform);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryMonthKPIByGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list151 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.applist = new ArrayList<String>(_list151.size);
            String _elem152;
            for (int _i153 = 0; _i153 < _list151.size; ++_i153)
            {
              _elem152 = iprot.readString();
              struct.applist.add(_elem152);
            }
          }
          struct.setApplistIsSet(true);
        }
        if (incoming.get(1)) {
          struct.code = iprot.readString();
          struct.setCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.begindate = iprot.readI32();
          struct.setBegindateIsSet(true);
        }
        if (incoming.get(3)) {
          struct.enddate = iprot.readI32();
          struct.setEnddateIsSet(true);
        }
        if (incoming.get(4)) {
          struct.platform = iprot.readString();
          struct.setPlatformIsSet(true);
        }
      }
    }

  }

  public static class queryMonthKPIByGroup_result implements org.apache.thrift.TBase<queryMonthKPIByGroup_result, queryMonthKPIByGroup_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryMonthKPIByGroup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryMonthKPIByGroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryMonthKPIByGroup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryMonthKPIByGroup_resultTupleSchemeFactory());
    }

    public Map<Integer,Double> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryMonthKPIByGroup_result.class, metaDataMap);
    }

    public queryMonthKPIByGroup_result() {
    }

    public queryMonthKPIByGroup_result(
      Map<Integer,Double> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryMonthKPIByGroup_result(queryMonthKPIByGroup_result other) {
      if (other.isSetSuccess()) {
        Map<Integer,Double> __this__success = new HashMap<Integer,Double>(other.success);
        this.success = __this__success;
      }
    }

    public queryMonthKPIByGroup_result deepCopy() {
      return new queryMonthKPIByGroup_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(int key, double val) {
      if (this.success == null) {
        this.success = new HashMap<Integer,Double>();
      }
      this.success.put(key, val);
    }

    public Map<Integer,Double> getSuccess() {
      return this.success;
    }

    public queryMonthKPIByGroup_result setSuccess(Map<Integer,Double> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<Integer,Double>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryMonthKPIByGroup_result)
        return this.equals((queryMonthKPIByGroup_result)that);
      return false;
    }

    public boolean equals(queryMonthKPIByGroup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryMonthKPIByGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryMonthKPIByGroup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryMonthKPIByGroup_resultStandardSchemeFactory implements SchemeFactory {
      public queryMonthKPIByGroup_resultStandardScheme getScheme() {
        return new queryMonthKPIByGroup_resultStandardScheme();
      }
    }

    private static class queryMonthKPIByGroup_resultStandardScheme extends StandardScheme<queryMonthKPIByGroup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryMonthKPIByGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map154 = iprot.readMapBegin();
                  struct.success = new HashMap<Integer,Double>(2*_map154.size);
                  int _key155;
                  double _val156;
                  for (int _i157 = 0; _i157 < _map154.size; ++_i157)
                  {
                    _key155 = iprot.readI32();
                    _val156 = iprot.readDouble();
                    struct.success.put(_key155, _val156);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryMonthKPIByGroup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, struct.success.size()));
            for (Map.Entry<Integer, Double> _iter158 : struct.success.entrySet())
            {
              oprot.writeI32(_iter158.getKey());
              oprot.writeDouble(_iter158.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryMonthKPIByGroup_resultTupleSchemeFactory implements SchemeFactory {
      public queryMonthKPIByGroup_resultTupleScheme getScheme() {
        return new queryMonthKPIByGroup_resultTupleScheme();
      }
    }

    private static class queryMonthKPIByGroup_resultTupleScheme extends TupleScheme<queryMonthKPIByGroup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryMonthKPIByGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<Integer, Double> _iter159 : struct.success.entrySet())
            {
              oprot.writeI32(_iter159.getKey());
              oprot.writeDouble(_iter159.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryMonthKPIByGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map160 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
            struct.success = new HashMap<Integer,Double>(2*_map160.size);
            int _key161;
            double _val162;
            for (int _i163 = 0; _i163 < _map160.size; ++_i163)
            {
              _key161 = iprot.readI32();
              _val162 = iprot.readDouble();
              struct.success.put(_key161, _val162);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryTOPNByDay_args implements org.apache.thrift.TBase<queryTOPNByDay_args, queryTOPNByDay_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryTOPNByDay_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryTOPNByDay_args");

    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TOPN_FIELD_DESC = new org.apache.thrift.protocol.TField("topn", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField ITIME_FIELD_DESC = new org.apache.thrift.protocol.TField("itime", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryTOPNByDay_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryTOPNByDay_argsTupleSchemeFactory());
    }

    public String code; // required
    public int topn; // required
    public int itime; // required
    public String platform; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CODE((short)1, "code"),
      TOPN((short)2, "topn"),
      ITIME((short)3, "itime"),
      PLATFORM((short)4, "platform");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CODE
            return CODE;
          case 2: // TOPN
            return TOPN;
          case 3: // ITIME
            return ITIME;
          case 4: // PLATFORM
            return PLATFORM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TOPN_ISSET_ID = 0;
    private static final int __ITIME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOPN, new org.apache.thrift.meta_data.FieldMetaData("topn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ITIME, new org.apache.thrift.meta_data.FieldMetaData("itime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryTOPNByDay_args.class, metaDataMap);
    }

    public queryTOPNByDay_args() {
    }

    public queryTOPNByDay_args(
      String code,
      int topn,
      int itime,
      String platform)
    {
      this();
      this.code = code;
      this.topn = topn;
      setTopnIsSet(true);
      this.itime = itime;
      setItimeIsSet(true);
      this.platform = platform;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryTOPNByDay_args(queryTOPNByDay_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCode()) {
        this.code = other.code;
      }
      this.topn = other.topn;
      this.itime = other.itime;
      if (other.isSetPlatform()) {
        this.platform = other.platform;
      }
    }

    public queryTOPNByDay_args deepCopy() {
      return new queryTOPNByDay_args(this);
    }

    @Override
    public void clear() {
      this.code = null;
      setTopnIsSet(false);
      this.topn = 0;
      setItimeIsSet(false);
      this.itime = 0;
      this.platform = null;
    }

    public String getCode() {
      return this.code;
    }

    public queryTOPNByDay_args setCode(String code) {
      this.code = code;
      return this;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public int getTopn() {
      return this.topn;
    }

    public queryTOPNByDay_args setTopn(int topn) {
      this.topn = topn;
      setTopnIsSet(true);
      return this;
    }

    public void unsetTopn() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOPN_ISSET_ID);
    }

    /** Returns true if field topn is set (has been assigned a value) and false otherwise */
    public boolean isSetTopn() {
      return EncodingUtils.testBit(__isset_bitfield, __TOPN_ISSET_ID);
    }

    public void setTopnIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOPN_ISSET_ID, value);
    }

    public int getItime() {
      return this.itime;
    }

    public queryTOPNByDay_args setItime(int itime) {
      this.itime = itime;
      setItimeIsSet(true);
      return this;
    }

    public void unsetItime() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ITIME_ISSET_ID);
    }

    /** Returns true if field itime is set (has been assigned a value) and false otherwise */
    public boolean isSetItime() {
      return EncodingUtils.testBit(__isset_bitfield, __ITIME_ISSET_ID);
    }

    public void setItimeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ITIME_ISSET_ID, value);
    }

    public String getPlatform() {
      return this.platform;
    }

    public queryTOPNByDay_args setPlatform(String platform) {
      this.platform = platform;
      return this;
    }

    public void unsetPlatform() {
      this.platform = null;
    }

    /** Returns true if field platform is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatform() {
      return this.platform != null;
    }

    public void setPlatformIsSet(boolean value) {
      if (!value) {
        this.platform = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((String)value);
        }
        break;

      case TOPN:
        if (value == null) {
          unsetTopn();
        } else {
          setTopn((Integer)value);
        }
        break;

      case ITIME:
        if (value == null) {
          unsetItime();
        } else {
          setItime((Integer)value);
        }
        break;

      case PLATFORM:
        if (value == null) {
          unsetPlatform();
        } else {
          setPlatform((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CODE:
        return getCode();

      case TOPN:
        return Integer.valueOf(getTopn());

      case ITIME:
        return Integer.valueOf(getItime());

      case PLATFORM:
        return getPlatform();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CODE:
        return isSetCode();
      case TOPN:
        return isSetTopn();
      case ITIME:
        return isSetItime();
      case PLATFORM:
        return isSetPlatform();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryTOPNByDay_args)
        return this.equals((queryTOPNByDay_args)that);
      return false;
    }

    public boolean equals(queryTOPNByDay_args that) {
      if (that == null)
        return false;

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      boolean this_present_topn = true;
      boolean that_present_topn = true;
      if (this_present_topn || that_present_topn) {
        if (!(this_present_topn && that_present_topn))
          return false;
        if (this.topn != that.topn)
          return false;
      }

      boolean this_present_itime = true;
      boolean that_present_itime = true;
      if (this_present_itime || that_present_itime) {
        if (!(this_present_itime && that_present_itime))
          return false;
        if (this.itime != that.itime)
          return false;
      }

      boolean this_present_platform = true && this.isSetPlatform();
      boolean that_present_platform = true && that.isSetPlatform();
      if (this_present_platform || that_present_platform) {
        if (!(this_present_platform && that_present_platform))
          return false;
        if (!this.platform.equals(that.platform))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_code = true && (isSetCode());
      list.add(present_code);
      if (present_code)
        list.add(code);

      boolean present_topn = true;
      list.add(present_topn);
      if (present_topn)
        list.add(topn);

      boolean present_itime = true;
      list.add(present_itime);
      if (present_itime)
        list.add(itime);

      boolean present_platform = true && (isSetPlatform());
      list.add(present_platform);
      if (present_platform)
        list.add(platform);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryTOPNByDay_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTopn()).compareTo(other.isSetTopn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topn, other.topn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetItime()).compareTo(other.isSetItime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetItime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itime, other.itime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(other.isSetPlatform());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatform()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, other.platform);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryTOPNByDay_args(");
      boolean first = true;

      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("topn:");
      sb.append(this.topn);
      first = false;
      if (!first) sb.append(", ");
      sb.append("itime:");
      sb.append(this.itime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("platform:");
      if (this.platform == null) {
        sb.append("null");
      } else {
        sb.append(this.platform);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryTOPNByDay_argsStandardSchemeFactory implements SchemeFactory {
      public queryTOPNByDay_argsStandardScheme getScheme() {
        return new queryTOPNByDay_argsStandardScheme();
      }
    }

    private static class queryTOPNByDay_argsStandardScheme extends StandardScheme<queryTOPNByDay_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryTOPNByDay_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOPN
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.topn = iprot.readI32();
                struct.setTopnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ITIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.itime = iprot.readI32();
                struct.setItimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PLATFORM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.platform = iprot.readString();
                struct.setPlatformIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryTOPNByDay_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TOPN_FIELD_DESC);
        oprot.writeI32(struct.topn);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ITIME_FIELD_DESC);
        oprot.writeI32(struct.itime);
        oprot.writeFieldEnd();
        if (struct.platform != null) {
          oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
          oprot.writeString(struct.platform);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryTOPNByDay_argsTupleSchemeFactory implements SchemeFactory {
      public queryTOPNByDay_argsTupleScheme getScheme() {
        return new queryTOPNByDay_argsTupleScheme();
      }
    }

    private static class queryTOPNByDay_argsTupleScheme extends TupleScheme<queryTOPNByDay_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryTOPNByDay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCode()) {
          optionals.set(0);
        }
        if (struct.isSetTopn()) {
          optionals.set(1);
        }
        if (struct.isSetItime()) {
          optionals.set(2);
        }
        if (struct.isSetPlatform()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCode()) {
          oprot.writeString(struct.code);
        }
        if (struct.isSetTopn()) {
          oprot.writeI32(struct.topn);
        }
        if (struct.isSetItime()) {
          oprot.writeI32(struct.itime);
        }
        if (struct.isSetPlatform()) {
          oprot.writeString(struct.platform);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryTOPNByDay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.code = iprot.readString();
          struct.setCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.topn = iprot.readI32();
          struct.setTopnIsSet(true);
        }
        if (incoming.get(2)) {
          struct.itime = iprot.readI32();
          struct.setItimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.platform = iprot.readString();
          struct.setPlatformIsSet(true);
        }
      }
    }

  }

  public static class queryTOPNByDay_result implements org.apache.thrift.TBase<queryTOPNByDay_result, queryTOPNByDay_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryTOPNByDay_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryTOPNByDay_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryTOPNByDay_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryTOPNByDay_resultTupleSchemeFactory());
    }

    public List<Map<String,String>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryTOPNByDay_result.class, metaDataMap);
    }

    public queryTOPNByDay_result() {
    }

    public queryTOPNByDay_result(
      List<Map<String,String>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryTOPNByDay_result(queryTOPNByDay_result other) {
      if (other.isSetSuccess()) {
        List<Map<String,String>> __this__success = new ArrayList<Map<String,String>>(other.success.size());
        for (Map<String,String> other_element : other.success) {
          Map<String,String> __this__success_copy = new HashMap<String,String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
    }

    public queryTOPNByDay_result deepCopy() {
      return new queryTOPNByDay_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Map<String,String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Map<String,String> elem) {
      if (this.success == null) {
        this.success = new ArrayList<Map<String,String>>();
      }
      this.success.add(elem);
    }

    public List<Map<String,String>> getSuccess() {
      return this.success;
    }

    public queryTOPNByDay_result setSuccess(List<Map<String,String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Map<String,String>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryTOPNByDay_result)
        return this.equals((queryTOPNByDay_result)that);
      return false;
    }

    public boolean equals(queryTOPNByDay_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryTOPNByDay_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryTOPNByDay_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryTOPNByDay_resultStandardSchemeFactory implements SchemeFactory {
      public queryTOPNByDay_resultStandardScheme getScheme() {
        return new queryTOPNByDay_resultStandardScheme();
      }
    }

    private static class queryTOPNByDay_resultStandardScheme extends StandardScheme<queryTOPNByDay_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryTOPNByDay_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list164 = iprot.readListBegin();
                  struct.success = new ArrayList<Map<String,String>>(_list164.size);
                  Map<String,String> _elem165;
                  for (int _i166 = 0; _i166 < _list164.size; ++_i166)
                  {
                    {
                      org.apache.thrift.protocol.TMap _map167 = iprot.readMapBegin();
                      _elem165 = new HashMap<String,String>(2*_map167.size);
                      String _key168;
                      String _val169;
                      for (int _i170 = 0; _i170 < _map167.size; ++_i170)
                      {
                        _key168 = iprot.readString();
                        _val169 = iprot.readString();
                        _elem165.put(_key168, _val169);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.add(_elem165);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryTOPNByDay_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map<String,String> _iter171 : struct.success)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter171.size()));
                for (Map.Entry<String, String> _iter172 : _iter171.entrySet())
                {
                  oprot.writeString(_iter172.getKey());
                  oprot.writeString(_iter172.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryTOPNByDay_resultTupleSchemeFactory implements SchemeFactory {
      public queryTOPNByDay_resultTupleScheme getScheme() {
        return new queryTOPNByDay_resultTupleScheme();
      }
    }

    private static class queryTOPNByDay_resultTupleScheme extends TupleScheme<queryTOPNByDay_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryTOPNByDay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map<String,String> _iter173 : struct.success)
            {
              {
                oprot.writeI32(_iter173.size());
                for (Map.Entry<String, String> _iter174 : _iter173.entrySet())
                {
                  oprot.writeString(_iter174.getKey());
                  oprot.writeString(_iter174.getValue());
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryTOPNByDay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list175 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new ArrayList<Map<String,String>>(_list175.size);
            Map<String,String> _elem176;
            for (int _i177 = 0; _i177 < _list175.size; ++_i177)
            {
              {
                org.apache.thrift.protocol.TMap _map178 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem176 = new HashMap<String,String>(2*_map178.size);
                String _key179;
                String _val180;
                for (int _i181 = 0; _i181 < _map178.size; ++_i181)
                {
                  _key179 = iprot.readString();
                  _val180 = iprot.readString();
                  _elem176.put(_key179, _val180);
                }
              }
              struct.success.add(_elem176);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryTrendByDay_args implements org.apache.thrift.TBase<queryTrendByDay_args, queryTrendByDay_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryTrendByDay_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryTrendByDay_args");

    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NO_FIELD_DESC = new org.apache.thrift.protocol.TField("no", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField BEGINDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("begindate", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ENDDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("enddate", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryTrendByDay_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryTrendByDay_argsTupleSchemeFactory());
    }

    public String code; // required
    public int no; // required
    public int begindate; // required
    public int enddate; // required
    public String platform; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CODE((short)1, "code"),
      NO((short)2, "no"),
      BEGINDATE((short)3, "begindate"),
      ENDDATE((short)4, "enddate"),
      PLATFORM((short)5, "platform");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CODE
            return CODE;
          case 2: // NO
            return NO;
          case 3: // BEGINDATE
            return BEGINDATE;
          case 4: // ENDDATE
            return ENDDATE;
          case 5: // PLATFORM
            return PLATFORM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NO_ISSET_ID = 0;
    private static final int __BEGINDATE_ISSET_ID = 1;
    private static final int __ENDDATE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NO, new org.apache.thrift.meta_data.FieldMetaData("no", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.BEGINDATE, new org.apache.thrift.meta_data.FieldMetaData("begindate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ENDDATE, new org.apache.thrift.meta_data.FieldMetaData("enddate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryTrendByDay_args.class, metaDataMap);
    }

    public queryTrendByDay_args() {
    }

    public queryTrendByDay_args(
      String code,
      int no,
      int begindate,
      int enddate,
      String platform)
    {
      this();
      this.code = code;
      this.no = no;
      setNoIsSet(true);
      this.begindate = begindate;
      setBegindateIsSet(true);
      this.enddate = enddate;
      setEnddateIsSet(true);
      this.platform = platform;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryTrendByDay_args(queryTrendByDay_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCode()) {
        this.code = other.code;
      }
      this.no = other.no;
      this.begindate = other.begindate;
      this.enddate = other.enddate;
      if (other.isSetPlatform()) {
        this.platform = other.platform;
      }
    }

    public queryTrendByDay_args deepCopy() {
      return new queryTrendByDay_args(this);
    }

    @Override
    public void clear() {
      this.code = null;
      setNoIsSet(false);
      this.no = 0;
      setBegindateIsSet(false);
      this.begindate = 0;
      setEnddateIsSet(false);
      this.enddate = 0;
      this.platform = null;
    }

    public String getCode() {
      return this.code;
    }

    public queryTrendByDay_args setCode(String code) {
      this.code = code;
      return this;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public int getNo() {
      return this.no;
    }

    public queryTrendByDay_args setNo(int no) {
      this.no = no;
      setNoIsSet(true);
      return this;
    }

    public void unsetNo() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NO_ISSET_ID);
    }

    /** Returns true if field no is set (has been assigned a value) and false otherwise */
    public boolean isSetNo() {
      return EncodingUtils.testBit(__isset_bitfield, __NO_ISSET_ID);
    }

    public void setNoIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NO_ISSET_ID, value);
    }

    public int getBegindate() {
      return this.begindate;
    }

    public queryTrendByDay_args setBegindate(int begindate) {
      this.begindate = begindate;
      setBegindateIsSet(true);
      return this;
    }

    public void unsetBegindate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGINDATE_ISSET_ID);
    }

    /** Returns true if field begindate is set (has been assigned a value) and false otherwise */
    public boolean isSetBegindate() {
      return EncodingUtils.testBit(__isset_bitfield, __BEGINDATE_ISSET_ID);
    }

    public void setBegindateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGINDATE_ISSET_ID, value);
    }

    public int getEnddate() {
      return this.enddate;
    }

    public queryTrendByDay_args setEnddate(int enddate) {
      this.enddate = enddate;
      setEnddateIsSet(true);
      return this;
    }

    public void unsetEnddate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    /** Returns true if field enddate is set (has been assigned a value) and false otherwise */
    public boolean isSetEnddate() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    public void setEnddateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDATE_ISSET_ID, value);
    }

    public String getPlatform() {
      return this.platform;
    }

    public queryTrendByDay_args setPlatform(String platform) {
      this.platform = platform;
      return this;
    }

    public void unsetPlatform() {
      this.platform = null;
    }

    /** Returns true if field platform is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatform() {
      return this.platform != null;
    }

    public void setPlatformIsSet(boolean value) {
      if (!value) {
        this.platform = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((String)value);
        }
        break;

      case NO:
        if (value == null) {
          unsetNo();
        } else {
          setNo((Integer)value);
        }
        break;

      case BEGINDATE:
        if (value == null) {
          unsetBegindate();
        } else {
          setBegindate((Integer)value);
        }
        break;

      case ENDDATE:
        if (value == null) {
          unsetEnddate();
        } else {
          setEnddate((Integer)value);
        }
        break;

      case PLATFORM:
        if (value == null) {
          unsetPlatform();
        } else {
          setPlatform((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CODE:
        return getCode();

      case NO:
        return Integer.valueOf(getNo());

      case BEGINDATE:
        return Integer.valueOf(getBegindate());

      case ENDDATE:
        return Integer.valueOf(getEnddate());

      case PLATFORM:
        return getPlatform();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CODE:
        return isSetCode();
      case NO:
        return isSetNo();
      case BEGINDATE:
        return isSetBegindate();
      case ENDDATE:
        return isSetEnddate();
      case PLATFORM:
        return isSetPlatform();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryTrendByDay_args)
        return this.equals((queryTrendByDay_args)that);
      return false;
    }

    public boolean equals(queryTrendByDay_args that) {
      if (that == null)
        return false;

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      boolean this_present_no = true;
      boolean that_present_no = true;
      if (this_present_no || that_present_no) {
        if (!(this_present_no && that_present_no))
          return false;
        if (this.no != that.no)
          return false;
      }

      boolean this_present_begindate = true;
      boolean that_present_begindate = true;
      if (this_present_begindate || that_present_begindate) {
        if (!(this_present_begindate && that_present_begindate))
          return false;
        if (this.begindate != that.begindate)
          return false;
      }

      boolean this_present_enddate = true;
      boolean that_present_enddate = true;
      if (this_present_enddate || that_present_enddate) {
        if (!(this_present_enddate && that_present_enddate))
          return false;
        if (this.enddate != that.enddate)
          return false;
      }

      boolean this_present_platform = true && this.isSetPlatform();
      boolean that_present_platform = true && that.isSetPlatform();
      if (this_present_platform || that_present_platform) {
        if (!(this_present_platform && that_present_platform))
          return false;
        if (!this.platform.equals(that.platform))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_code = true && (isSetCode());
      list.add(present_code);
      if (present_code)
        list.add(code);

      boolean present_no = true;
      list.add(present_no);
      if (present_no)
        list.add(no);

      boolean present_begindate = true;
      list.add(present_begindate);
      if (present_begindate)
        list.add(begindate);

      boolean present_enddate = true;
      list.add(present_enddate);
      if (present_enddate)
        list.add(enddate);

      boolean present_platform = true && (isSetPlatform());
      list.add(present_platform);
      if (present_platform)
        list.add(platform);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryTrendByDay_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNo()).compareTo(other.isSetNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.no, other.no);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBegindate()).compareTo(other.isSetBegindate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBegindate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.begindate, other.begindate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnddate()).compareTo(other.isSetEnddate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnddate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enddate, other.enddate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(other.isSetPlatform());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatform()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, other.platform);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryTrendByDay_args(");
      boolean first = true;

      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("no:");
      sb.append(this.no);
      first = false;
      if (!first) sb.append(", ");
      sb.append("begindate:");
      sb.append(this.begindate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("enddate:");
      sb.append(this.enddate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("platform:");
      if (this.platform == null) {
        sb.append("null");
      } else {
        sb.append(this.platform);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryTrendByDay_argsStandardSchemeFactory implements SchemeFactory {
      public queryTrendByDay_argsStandardScheme getScheme() {
        return new queryTrendByDay_argsStandardScheme();
      }
    }

    private static class queryTrendByDay_argsStandardScheme extends StandardScheme<queryTrendByDay_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryTrendByDay_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.no = iprot.readI32();
                struct.setNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BEGINDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.begindate = iprot.readI32();
                struct.setBegindateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ENDDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.enddate = iprot.readI32();
                struct.setEnddateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PLATFORM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.platform = iprot.readString();
                struct.setPlatformIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryTrendByDay_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NO_FIELD_DESC);
        oprot.writeI32(struct.no);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(BEGINDATE_FIELD_DESC);
        oprot.writeI32(struct.begindate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ENDDATE_FIELD_DESC);
        oprot.writeI32(struct.enddate);
        oprot.writeFieldEnd();
        if (struct.platform != null) {
          oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
          oprot.writeString(struct.platform);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryTrendByDay_argsTupleSchemeFactory implements SchemeFactory {
      public queryTrendByDay_argsTupleScheme getScheme() {
        return new queryTrendByDay_argsTupleScheme();
      }
    }

    private static class queryTrendByDay_argsTupleScheme extends TupleScheme<queryTrendByDay_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryTrendByDay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCode()) {
          optionals.set(0);
        }
        if (struct.isSetNo()) {
          optionals.set(1);
        }
        if (struct.isSetBegindate()) {
          optionals.set(2);
        }
        if (struct.isSetEnddate()) {
          optionals.set(3);
        }
        if (struct.isSetPlatform()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetCode()) {
          oprot.writeString(struct.code);
        }
        if (struct.isSetNo()) {
          oprot.writeI32(struct.no);
        }
        if (struct.isSetBegindate()) {
          oprot.writeI32(struct.begindate);
        }
        if (struct.isSetEnddate()) {
          oprot.writeI32(struct.enddate);
        }
        if (struct.isSetPlatform()) {
          oprot.writeString(struct.platform);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryTrendByDay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.code = iprot.readString();
          struct.setCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.no = iprot.readI32();
          struct.setNoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.begindate = iprot.readI32();
          struct.setBegindateIsSet(true);
        }
        if (incoming.get(3)) {
          struct.enddate = iprot.readI32();
          struct.setEnddateIsSet(true);
        }
        if (incoming.get(4)) {
          struct.platform = iprot.readString();
          struct.setPlatformIsSet(true);
        }
      }
    }

  }

  public static class queryTrendByDay_result implements org.apache.thrift.TBase<queryTrendByDay_result, queryTrendByDay_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryTrendByDay_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryTrendByDay_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryTrendByDay_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryTrendByDay_resultTupleSchemeFactory());
    }

    public Map<String,String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryTrendByDay_result.class, metaDataMap);
    }

    public queryTrendByDay_result() {
    }

    public queryTrendByDay_result(
      Map<String,String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryTrendByDay_result(queryTrendByDay_result other) {
      if (other.isSetSuccess()) {
        Map<String,String> __this__success = new HashMap<String,String>(other.success);
        this.success = __this__success;
      }
    }

    public queryTrendByDay_result deepCopy() {
      return new queryTrendByDay_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new HashMap<String,String>();
      }
      this.success.put(key, val);
    }

    public Map<String,String> getSuccess() {
      return this.success;
    }

    public queryTrendByDay_result setSuccess(Map<String,String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryTrendByDay_result)
        return this.equals((queryTrendByDay_result)that);
      return false;
    }

    public boolean equals(queryTrendByDay_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryTrendByDay_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryTrendByDay_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryTrendByDay_resultStandardSchemeFactory implements SchemeFactory {
      public queryTrendByDay_resultStandardScheme getScheme() {
        return new queryTrendByDay_resultStandardScheme();
      }
    }

    private static class queryTrendByDay_resultStandardScheme extends StandardScheme<queryTrendByDay_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryTrendByDay_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map182 = iprot.readMapBegin();
                  struct.success = new HashMap<String,String>(2*_map182.size);
                  String _key183;
                  String _val184;
                  for (int _i185 = 0; _i185 < _map182.size; ++_i185)
                  {
                    _key183 = iprot.readString();
                    _val184 = iprot.readString();
                    struct.success.put(_key183, _val184);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryTrendByDay_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<String, String> _iter186 : struct.success.entrySet())
            {
              oprot.writeString(_iter186.getKey());
              oprot.writeString(_iter186.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryTrendByDay_resultTupleSchemeFactory implements SchemeFactory {
      public queryTrendByDay_resultTupleScheme getScheme() {
        return new queryTrendByDay_resultTupleScheme();
      }
    }

    private static class queryTrendByDay_resultTupleScheme extends TupleScheme<queryTrendByDay_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryTrendByDay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, String> _iter187 : struct.success.entrySet())
            {
              oprot.writeString(_iter187.getKey());
              oprot.writeString(_iter187.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryTrendByDay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map188 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<String,String>(2*_map188.size);
            String _key189;
            String _val190;
            for (int _i191 = 0; _i191 < _map188.size; ++_i191)
            {
              _key189 = iprot.readString();
              _val190 = iprot.readString();
              struct.success.put(_key189, _val190);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryPlatHourKPIByApp_args implements org.apache.thrift.TBase<queryPlatHourKPIByApp_args, queryPlatHourKPIByApp_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryPlatHourKPIByApp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryPlatHourKPIByApp_args");

    private static final org.apache.thrift.protocol.TField APPKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appkey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BEGINDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("begindate", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ENDDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("enddate", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryPlatHourKPIByApp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryPlatHourKPIByApp_argsTupleSchemeFactory());
    }

    public String appkey; // required
    public String code; // required
    public int begindate; // required
    public int enddate; // required
    public String platform; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPKEY((short)1, "appkey"),
      CODE((short)2, "code"),
      BEGINDATE((short)3, "begindate"),
      ENDDATE((short)4, "enddate"),
      PLATFORM((short)5, "platform");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPKEY
            return APPKEY;
          case 2: // CODE
            return CODE;
          case 3: // BEGINDATE
            return BEGINDATE;
          case 4: // ENDDATE
            return ENDDATE;
          case 5: // PLATFORM
            return PLATFORM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BEGINDATE_ISSET_ID = 0;
    private static final int __ENDDATE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPKEY, new org.apache.thrift.meta_data.FieldMetaData("appkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEGINDATE, new org.apache.thrift.meta_data.FieldMetaData("begindate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ENDDATE, new org.apache.thrift.meta_data.FieldMetaData("enddate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryPlatHourKPIByApp_args.class, metaDataMap);
    }

    public queryPlatHourKPIByApp_args() {
    }

    public queryPlatHourKPIByApp_args(
      String appkey,
      String code,
      int begindate,
      int enddate,
      String platform)
    {
      this();
      this.appkey = appkey;
      this.code = code;
      this.begindate = begindate;
      setBegindateIsSet(true);
      this.enddate = enddate;
      setEnddateIsSet(true);
      this.platform = platform;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryPlatHourKPIByApp_args(queryPlatHourKPIByApp_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAppkey()) {
        this.appkey = other.appkey;
      }
      if (other.isSetCode()) {
        this.code = other.code;
      }
      this.begindate = other.begindate;
      this.enddate = other.enddate;
      if (other.isSetPlatform()) {
        this.platform = other.platform;
      }
    }

    public queryPlatHourKPIByApp_args deepCopy() {
      return new queryPlatHourKPIByApp_args(this);
    }

    @Override
    public void clear() {
      this.appkey = null;
      this.code = null;
      setBegindateIsSet(false);
      this.begindate = 0;
      setEnddateIsSet(false);
      this.enddate = 0;
      this.platform = null;
    }

    public String getAppkey() {
      return this.appkey;
    }

    public queryPlatHourKPIByApp_args setAppkey(String appkey) {
      this.appkey = appkey;
      return this;
    }

    public void unsetAppkey() {
      this.appkey = null;
    }

    /** Returns true if field appkey is set (has been assigned a value) and false otherwise */
    public boolean isSetAppkey() {
      return this.appkey != null;
    }

    public void setAppkeyIsSet(boolean value) {
      if (!value) {
        this.appkey = null;
      }
    }

    public String getCode() {
      return this.code;
    }

    public queryPlatHourKPIByApp_args setCode(String code) {
      this.code = code;
      return this;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public int getBegindate() {
      return this.begindate;
    }

    public queryPlatHourKPIByApp_args setBegindate(int begindate) {
      this.begindate = begindate;
      setBegindateIsSet(true);
      return this;
    }

    public void unsetBegindate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGINDATE_ISSET_ID);
    }

    /** Returns true if field begindate is set (has been assigned a value) and false otherwise */
    public boolean isSetBegindate() {
      return EncodingUtils.testBit(__isset_bitfield, __BEGINDATE_ISSET_ID);
    }

    public void setBegindateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGINDATE_ISSET_ID, value);
    }

    public int getEnddate() {
      return this.enddate;
    }

    public queryPlatHourKPIByApp_args setEnddate(int enddate) {
      this.enddate = enddate;
      setEnddateIsSet(true);
      return this;
    }

    public void unsetEnddate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    /** Returns true if field enddate is set (has been assigned a value) and false otherwise */
    public boolean isSetEnddate() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    public void setEnddateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDATE_ISSET_ID, value);
    }

    public String getPlatform() {
      return this.platform;
    }

    public queryPlatHourKPIByApp_args setPlatform(String platform) {
      this.platform = platform;
      return this;
    }

    public void unsetPlatform() {
      this.platform = null;
    }

    /** Returns true if field platform is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatform() {
      return this.platform != null;
    }

    public void setPlatformIsSet(boolean value) {
      if (!value) {
        this.platform = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPKEY:
        if (value == null) {
          unsetAppkey();
        } else {
          setAppkey((String)value);
        }
        break;

      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((String)value);
        }
        break;

      case BEGINDATE:
        if (value == null) {
          unsetBegindate();
        } else {
          setBegindate((Integer)value);
        }
        break;

      case ENDDATE:
        if (value == null) {
          unsetEnddate();
        } else {
          setEnddate((Integer)value);
        }
        break;

      case PLATFORM:
        if (value == null) {
          unsetPlatform();
        } else {
          setPlatform((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPKEY:
        return getAppkey();

      case CODE:
        return getCode();

      case BEGINDATE:
        return Integer.valueOf(getBegindate());

      case ENDDATE:
        return Integer.valueOf(getEnddate());

      case PLATFORM:
        return getPlatform();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPKEY:
        return isSetAppkey();
      case CODE:
        return isSetCode();
      case BEGINDATE:
        return isSetBegindate();
      case ENDDATE:
        return isSetEnddate();
      case PLATFORM:
        return isSetPlatform();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryPlatHourKPIByApp_args)
        return this.equals((queryPlatHourKPIByApp_args)that);
      return false;
    }

    public boolean equals(queryPlatHourKPIByApp_args that) {
      if (that == null)
        return false;

      boolean this_present_appkey = true && this.isSetAppkey();
      boolean that_present_appkey = true && that.isSetAppkey();
      if (this_present_appkey || that_present_appkey) {
        if (!(this_present_appkey && that_present_appkey))
          return false;
        if (!this.appkey.equals(that.appkey))
          return false;
      }

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      boolean this_present_begindate = true;
      boolean that_present_begindate = true;
      if (this_present_begindate || that_present_begindate) {
        if (!(this_present_begindate && that_present_begindate))
          return false;
        if (this.begindate != that.begindate)
          return false;
      }

      boolean this_present_enddate = true;
      boolean that_present_enddate = true;
      if (this_present_enddate || that_present_enddate) {
        if (!(this_present_enddate && that_present_enddate))
          return false;
        if (this.enddate != that.enddate)
          return false;
      }

      boolean this_present_platform = true && this.isSetPlatform();
      boolean that_present_platform = true && that.isSetPlatform();
      if (this_present_platform || that_present_platform) {
        if (!(this_present_platform && that_present_platform))
          return false;
        if (!this.platform.equals(that.platform))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_appkey = true && (isSetAppkey());
      list.add(present_appkey);
      if (present_appkey)
        list.add(appkey);

      boolean present_code = true && (isSetCode());
      list.add(present_code);
      if (present_code)
        list.add(code);

      boolean present_begindate = true;
      list.add(present_begindate);
      if (present_begindate)
        list.add(begindate);

      boolean present_enddate = true;
      list.add(present_enddate);
      if (present_enddate)
        list.add(enddate);

      boolean present_platform = true && (isSetPlatform());
      list.add(present_platform);
      if (present_platform)
        list.add(platform);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryPlatHourKPIByApp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppkey()).compareTo(other.isSetAppkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appkey, other.appkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBegindate()).compareTo(other.isSetBegindate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBegindate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.begindate, other.begindate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnddate()).compareTo(other.isSetEnddate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnddate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enddate, other.enddate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(other.isSetPlatform());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatform()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, other.platform);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryPlatHourKPIByApp_args(");
      boolean first = true;

      sb.append("appkey:");
      if (this.appkey == null) {
        sb.append("null");
      } else {
        sb.append(this.appkey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("begindate:");
      sb.append(this.begindate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("enddate:");
      sb.append(this.enddate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("platform:");
      if (this.platform == null) {
        sb.append("null");
      } else {
        sb.append(this.platform);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryPlatHourKPIByApp_argsStandardSchemeFactory implements SchemeFactory {
      public queryPlatHourKPIByApp_argsStandardScheme getScheme() {
        return new queryPlatHourKPIByApp_argsStandardScheme();
      }
    }

    private static class queryPlatHourKPIByApp_argsStandardScheme extends StandardScheme<queryPlatHourKPIByApp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryPlatHourKPIByApp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPKEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appkey = iprot.readString();
                struct.setAppkeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BEGINDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.begindate = iprot.readI32();
                struct.setBegindateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ENDDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.enddate = iprot.readI32();
                struct.setEnddateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PLATFORM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.platform = iprot.readString();
                struct.setPlatformIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryPlatHourKPIByApp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appkey != null) {
          oprot.writeFieldBegin(APPKEY_FIELD_DESC);
          oprot.writeString(struct.appkey);
          oprot.writeFieldEnd();
        }
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BEGINDATE_FIELD_DESC);
        oprot.writeI32(struct.begindate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ENDDATE_FIELD_DESC);
        oprot.writeI32(struct.enddate);
        oprot.writeFieldEnd();
        if (struct.platform != null) {
          oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
          oprot.writeString(struct.platform);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryPlatHourKPIByApp_argsTupleSchemeFactory implements SchemeFactory {
      public queryPlatHourKPIByApp_argsTupleScheme getScheme() {
        return new queryPlatHourKPIByApp_argsTupleScheme();
      }
    }

    private static class queryPlatHourKPIByApp_argsTupleScheme extends TupleScheme<queryPlatHourKPIByApp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryPlatHourKPIByApp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppkey()) {
          optionals.set(0);
        }
        if (struct.isSetCode()) {
          optionals.set(1);
        }
        if (struct.isSetBegindate()) {
          optionals.set(2);
        }
        if (struct.isSetEnddate()) {
          optionals.set(3);
        }
        if (struct.isSetPlatform()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetAppkey()) {
          oprot.writeString(struct.appkey);
        }
        if (struct.isSetCode()) {
          oprot.writeString(struct.code);
        }
        if (struct.isSetBegindate()) {
          oprot.writeI32(struct.begindate);
        }
        if (struct.isSetEnddate()) {
          oprot.writeI32(struct.enddate);
        }
        if (struct.isSetPlatform()) {
          oprot.writeString(struct.platform);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryPlatHourKPIByApp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.appkey = iprot.readString();
          struct.setAppkeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.code = iprot.readString();
          struct.setCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.begindate = iprot.readI32();
          struct.setBegindateIsSet(true);
        }
        if (incoming.get(3)) {
          struct.enddate = iprot.readI32();
          struct.setEnddateIsSet(true);
        }
        if (incoming.get(4)) {
          struct.platform = iprot.readString();
          struct.setPlatformIsSet(true);
        }
      }
    }

  }

  public static class queryPlatHourKPIByApp_result implements org.apache.thrift.TBase<queryPlatHourKPIByApp_result, queryPlatHourKPIByApp_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryPlatHourKPIByApp_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryPlatHourKPIByApp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryPlatHourKPIByApp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryPlatHourKPIByApp_resultTupleSchemeFactory());
    }

    public Map<String,Map<Integer,Map<Integer,Double>>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
                  new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
                      new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryPlatHourKPIByApp_result.class, metaDataMap);
    }

    public queryPlatHourKPIByApp_result() {
    }

    public queryPlatHourKPIByApp_result(
      Map<String,Map<Integer,Map<Integer,Double>>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryPlatHourKPIByApp_result(queryPlatHourKPIByApp_result other) {
      if (other.isSetSuccess()) {
        Map<String,Map<Integer,Map<Integer,Double>>> __this__success = new HashMap<String,Map<Integer,Map<Integer,Double>>>(other.success.size());
        for (Map.Entry<String, Map<Integer,Map<Integer,Double>>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          Map<Integer,Map<Integer,Double>> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          Map<Integer,Map<Integer,Double>> __this__success_copy_value = new HashMap<Integer,Map<Integer,Double>>(other_element_value.size());
          for (Map.Entry<Integer, Map<Integer,Double>> other_element_value_element : other_element_value.entrySet()) {

            Integer other_element_value_element_key = other_element_value_element.getKey();
            Map<Integer,Double> other_element_value_element_value = other_element_value_element.getValue();

            Integer __this__success_copy_value_copy_key = other_element_value_element_key;

            Map<Integer,Double> __this__success_copy_value_copy_value = new HashMap<Integer,Double>(other_element_value_element_value);

            __this__success_copy_value.put(__this__success_copy_value_copy_key, __this__success_copy_value_copy_value);
          }

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public queryPlatHourKPIByApp_result deepCopy() {
      return new queryPlatHourKPIByApp_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Map<Integer,Map<Integer,Double>> val) {
      if (this.success == null) {
        this.success = new HashMap<String,Map<Integer,Map<Integer,Double>>>();
      }
      this.success.put(key, val);
    }

    public Map<String,Map<Integer,Map<Integer,Double>>> getSuccess() {
      return this.success;
    }

    public queryPlatHourKPIByApp_result setSuccess(Map<String,Map<Integer,Map<Integer,Double>>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Map<Integer,Map<Integer,Double>>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryPlatHourKPIByApp_result)
        return this.equals((queryPlatHourKPIByApp_result)that);
      return false;
    }

    public boolean equals(queryPlatHourKPIByApp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryPlatHourKPIByApp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryPlatHourKPIByApp_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryPlatHourKPIByApp_resultStandardSchemeFactory implements SchemeFactory {
      public queryPlatHourKPIByApp_resultStandardScheme getScheme() {
        return new queryPlatHourKPIByApp_resultStandardScheme();
      }
    }

    private static class queryPlatHourKPIByApp_resultStandardScheme extends StandardScheme<queryPlatHourKPIByApp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryPlatHourKPIByApp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map192 = iprot.readMapBegin();
                  struct.success = new HashMap<String,Map<Integer,Map<Integer,Double>>>(2*_map192.size);
                  String _key193;
                  Map<Integer,Map<Integer,Double>> _val194;
                  for (int _i195 = 0; _i195 < _map192.size; ++_i195)
                  {
                    _key193 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TMap _map196 = iprot.readMapBegin();
                      _val194 = new HashMap<Integer,Map<Integer,Double>>(2*_map196.size);
                      int _key197;
                      Map<Integer,Double> _val198;
                      for (int _i199 = 0; _i199 < _map196.size; ++_i199)
                      {
                        _key197 = iprot.readI32();
                        {
                          org.apache.thrift.protocol.TMap _map200 = iprot.readMapBegin();
                          _val198 = new HashMap<Integer,Double>(2*_map200.size);
                          int _key201;
                          double _val202;
                          for (int _i203 = 0; _i203 < _map200.size; ++_i203)
                          {
                            _key201 = iprot.readI32();
                            _val202 = iprot.readDouble();
                            _val198.put(_key201, _val202);
                          }
                          iprot.readMapEnd();
                        }
                        _val194.put(_key197, _val198);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.put(_key193, _val194);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryPlatHourKPIByApp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map.Entry<String, Map<Integer,Map<Integer,Double>>> _iter204 : struct.success.entrySet())
            {
              oprot.writeString(_iter204.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.MAP, _iter204.getValue().size()));
                for (Map.Entry<Integer, Map<Integer,Double>> _iter205 : _iter204.getValue().entrySet())
                {
                  oprot.writeI32(_iter205.getKey());
                  {
                    oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, _iter205.getValue().size()));
                    for (Map.Entry<Integer, Double> _iter206 : _iter205.getValue().entrySet())
                    {
                      oprot.writeI32(_iter206.getKey());
                      oprot.writeDouble(_iter206.getValue());
                    }
                    oprot.writeMapEnd();
                  }
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryPlatHourKPIByApp_resultTupleSchemeFactory implements SchemeFactory {
      public queryPlatHourKPIByApp_resultTupleScheme getScheme() {
        return new queryPlatHourKPIByApp_resultTupleScheme();
      }
    }

    private static class queryPlatHourKPIByApp_resultTupleScheme extends TupleScheme<queryPlatHourKPIByApp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryPlatHourKPIByApp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Map<Integer,Map<Integer,Double>>> _iter207 : struct.success.entrySet())
            {
              oprot.writeString(_iter207.getKey());
              {
                oprot.writeI32(_iter207.getValue().size());
                for (Map.Entry<Integer, Map<Integer,Double>> _iter208 : _iter207.getValue().entrySet())
                {
                  oprot.writeI32(_iter208.getKey());
                  {
                    oprot.writeI32(_iter208.getValue().size());
                    for (Map.Entry<Integer, Double> _iter209 : _iter208.getValue().entrySet())
                    {
                      oprot.writeI32(_iter209.getKey());
                      oprot.writeDouble(_iter209.getValue());
                    }
                  }
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryPlatHourKPIByApp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map210 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new HashMap<String,Map<Integer,Map<Integer,Double>>>(2*_map210.size);
            String _key211;
            Map<Integer,Map<Integer,Double>> _val212;
            for (int _i213 = 0; _i213 < _map210.size; ++_i213)
            {
              _key211 = iprot.readString();
              {
                org.apache.thrift.protocol.TMap _map214 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
                _val212 = new HashMap<Integer,Map<Integer,Double>>(2*_map214.size);
                int _key215;
                Map<Integer,Double> _val216;
                for (int _i217 = 0; _i217 < _map214.size; ++_i217)
                {
                  _key215 = iprot.readI32();
                  {
                    org.apache.thrift.protocol.TMap _map218 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
                    _val216 = new HashMap<Integer,Double>(2*_map218.size);
                    int _key219;
                    double _val220;
                    for (int _i221 = 0; _i221 < _map218.size; ++_i221)
                    {
                      _key219 = iprot.readI32();
                      _val220 = iprot.readDouble();
                      _val216.put(_key219, _val220);
                    }
                  }
                  _val212.put(_key215, _val216);
                }
              }
              struct.success.put(_key211, _val212);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryPlatDayKPIByApp_args implements org.apache.thrift.TBase<queryPlatDayKPIByApp_args, queryPlatDayKPIByApp_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryPlatDayKPIByApp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryPlatDayKPIByApp_args");

    private static final org.apache.thrift.protocol.TField APPKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appkey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BEGINDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("begindate", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ENDDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("enddate", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryPlatDayKPIByApp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryPlatDayKPIByApp_argsTupleSchemeFactory());
    }

    public String appkey; // required
    public String code; // required
    public int begindate; // required
    public int enddate; // required
    public String platform; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPKEY((short)1, "appkey"),
      CODE((short)2, "code"),
      BEGINDATE((short)3, "begindate"),
      ENDDATE((short)4, "enddate"),
      PLATFORM((short)5, "platform");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPKEY
            return APPKEY;
          case 2: // CODE
            return CODE;
          case 3: // BEGINDATE
            return BEGINDATE;
          case 4: // ENDDATE
            return ENDDATE;
          case 5: // PLATFORM
            return PLATFORM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BEGINDATE_ISSET_ID = 0;
    private static final int __ENDDATE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPKEY, new org.apache.thrift.meta_data.FieldMetaData("appkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEGINDATE, new org.apache.thrift.meta_data.FieldMetaData("begindate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ENDDATE, new org.apache.thrift.meta_data.FieldMetaData("enddate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryPlatDayKPIByApp_args.class, metaDataMap);
    }

    public queryPlatDayKPIByApp_args() {
    }

    public queryPlatDayKPIByApp_args(
      String appkey,
      String code,
      int begindate,
      int enddate,
      String platform)
    {
      this();
      this.appkey = appkey;
      this.code = code;
      this.begindate = begindate;
      setBegindateIsSet(true);
      this.enddate = enddate;
      setEnddateIsSet(true);
      this.platform = platform;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryPlatDayKPIByApp_args(queryPlatDayKPIByApp_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAppkey()) {
        this.appkey = other.appkey;
      }
      if (other.isSetCode()) {
        this.code = other.code;
      }
      this.begindate = other.begindate;
      this.enddate = other.enddate;
      if (other.isSetPlatform()) {
        this.platform = other.platform;
      }
    }

    public queryPlatDayKPIByApp_args deepCopy() {
      return new queryPlatDayKPIByApp_args(this);
    }

    @Override
    public void clear() {
      this.appkey = null;
      this.code = null;
      setBegindateIsSet(false);
      this.begindate = 0;
      setEnddateIsSet(false);
      this.enddate = 0;
      this.platform = null;
    }

    public String getAppkey() {
      return this.appkey;
    }

    public queryPlatDayKPIByApp_args setAppkey(String appkey) {
      this.appkey = appkey;
      return this;
    }

    public void unsetAppkey() {
      this.appkey = null;
    }

    /** Returns true if field appkey is set (has been assigned a value) and false otherwise */
    public boolean isSetAppkey() {
      return this.appkey != null;
    }

    public void setAppkeyIsSet(boolean value) {
      if (!value) {
        this.appkey = null;
      }
    }

    public String getCode() {
      return this.code;
    }

    public queryPlatDayKPIByApp_args setCode(String code) {
      this.code = code;
      return this;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public int getBegindate() {
      return this.begindate;
    }

    public queryPlatDayKPIByApp_args setBegindate(int begindate) {
      this.begindate = begindate;
      setBegindateIsSet(true);
      return this;
    }

    public void unsetBegindate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGINDATE_ISSET_ID);
    }

    /** Returns true if field begindate is set (has been assigned a value) and false otherwise */
    public boolean isSetBegindate() {
      return EncodingUtils.testBit(__isset_bitfield, __BEGINDATE_ISSET_ID);
    }

    public void setBegindateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGINDATE_ISSET_ID, value);
    }

    public int getEnddate() {
      return this.enddate;
    }

    public queryPlatDayKPIByApp_args setEnddate(int enddate) {
      this.enddate = enddate;
      setEnddateIsSet(true);
      return this;
    }

    public void unsetEnddate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    /** Returns true if field enddate is set (has been assigned a value) and false otherwise */
    public boolean isSetEnddate() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    public void setEnddateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDATE_ISSET_ID, value);
    }

    public String getPlatform() {
      return this.platform;
    }

    public queryPlatDayKPIByApp_args setPlatform(String platform) {
      this.platform = platform;
      return this;
    }

    public void unsetPlatform() {
      this.platform = null;
    }

    /** Returns true if field platform is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatform() {
      return this.platform != null;
    }

    public void setPlatformIsSet(boolean value) {
      if (!value) {
        this.platform = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPKEY:
        if (value == null) {
          unsetAppkey();
        } else {
          setAppkey((String)value);
        }
        break;

      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((String)value);
        }
        break;

      case BEGINDATE:
        if (value == null) {
          unsetBegindate();
        } else {
          setBegindate((Integer)value);
        }
        break;

      case ENDDATE:
        if (value == null) {
          unsetEnddate();
        } else {
          setEnddate((Integer)value);
        }
        break;

      case PLATFORM:
        if (value == null) {
          unsetPlatform();
        } else {
          setPlatform((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPKEY:
        return getAppkey();

      case CODE:
        return getCode();

      case BEGINDATE:
        return Integer.valueOf(getBegindate());

      case ENDDATE:
        return Integer.valueOf(getEnddate());

      case PLATFORM:
        return getPlatform();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPKEY:
        return isSetAppkey();
      case CODE:
        return isSetCode();
      case BEGINDATE:
        return isSetBegindate();
      case ENDDATE:
        return isSetEnddate();
      case PLATFORM:
        return isSetPlatform();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryPlatDayKPIByApp_args)
        return this.equals((queryPlatDayKPIByApp_args)that);
      return false;
    }

    public boolean equals(queryPlatDayKPIByApp_args that) {
      if (that == null)
        return false;

      boolean this_present_appkey = true && this.isSetAppkey();
      boolean that_present_appkey = true && that.isSetAppkey();
      if (this_present_appkey || that_present_appkey) {
        if (!(this_present_appkey && that_present_appkey))
          return false;
        if (!this.appkey.equals(that.appkey))
          return false;
      }

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      boolean this_present_begindate = true;
      boolean that_present_begindate = true;
      if (this_present_begindate || that_present_begindate) {
        if (!(this_present_begindate && that_present_begindate))
          return false;
        if (this.begindate != that.begindate)
          return false;
      }

      boolean this_present_enddate = true;
      boolean that_present_enddate = true;
      if (this_present_enddate || that_present_enddate) {
        if (!(this_present_enddate && that_present_enddate))
          return false;
        if (this.enddate != that.enddate)
          return false;
      }

      boolean this_present_platform = true && this.isSetPlatform();
      boolean that_present_platform = true && that.isSetPlatform();
      if (this_present_platform || that_present_platform) {
        if (!(this_present_platform && that_present_platform))
          return false;
        if (!this.platform.equals(that.platform))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_appkey = true && (isSetAppkey());
      list.add(present_appkey);
      if (present_appkey)
        list.add(appkey);

      boolean present_code = true && (isSetCode());
      list.add(present_code);
      if (present_code)
        list.add(code);

      boolean present_begindate = true;
      list.add(present_begindate);
      if (present_begindate)
        list.add(begindate);

      boolean present_enddate = true;
      list.add(present_enddate);
      if (present_enddate)
        list.add(enddate);

      boolean present_platform = true && (isSetPlatform());
      list.add(present_platform);
      if (present_platform)
        list.add(platform);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryPlatDayKPIByApp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppkey()).compareTo(other.isSetAppkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appkey, other.appkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBegindate()).compareTo(other.isSetBegindate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBegindate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.begindate, other.begindate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnddate()).compareTo(other.isSetEnddate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnddate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enddate, other.enddate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(other.isSetPlatform());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatform()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, other.platform);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryPlatDayKPIByApp_args(");
      boolean first = true;

      sb.append("appkey:");
      if (this.appkey == null) {
        sb.append("null");
      } else {
        sb.append(this.appkey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("begindate:");
      sb.append(this.begindate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("enddate:");
      sb.append(this.enddate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("platform:");
      if (this.platform == null) {
        sb.append("null");
      } else {
        sb.append(this.platform);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryPlatDayKPIByApp_argsStandardSchemeFactory implements SchemeFactory {
      public queryPlatDayKPIByApp_argsStandardScheme getScheme() {
        return new queryPlatDayKPIByApp_argsStandardScheme();
      }
    }

    private static class queryPlatDayKPIByApp_argsStandardScheme extends StandardScheme<queryPlatDayKPIByApp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryPlatDayKPIByApp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPKEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appkey = iprot.readString();
                struct.setAppkeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BEGINDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.begindate = iprot.readI32();
                struct.setBegindateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ENDDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.enddate = iprot.readI32();
                struct.setEnddateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PLATFORM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.platform = iprot.readString();
                struct.setPlatformIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryPlatDayKPIByApp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appkey != null) {
          oprot.writeFieldBegin(APPKEY_FIELD_DESC);
          oprot.writeString(struct.appkey);
          oprot.writeFieldEnd();
        }
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BEGINDATE_FIELD_DESC);
        oprot.writeI32(struct.begindate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ENDDATE_FIELD_DESC);
        oprot.writeI32(struct.enddate);
        oprot.writeFieldEnd();
        if (struct.platform != null) {
          oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
          oprot.writeString(struct.platform);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryPlatDayKPIByApp_argsTupleSchemeFactory implements SchemeFactory {
      public queryPlatDayKPIByApp_argsTupleScheme getScheme() {
        return new queryPlatDayKPIByApp_argsTupleScheme();
      }
    }

    private static class queryPlatDayKPIByApp_argsTupleScheme extends TupleScheme<queryPlatDayKPIByApp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryPlatDayKPIByApp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppkey()) {
          optionals.set(0);
        }
        if (struct.isSetCode()) {
          optionals.set(1);
        }
        if (struct.isSetBegindate()) {
          optionals.set(2);
        }
        if (struct.isSetEnddate()) {
          optionals.set(3);
        }
        if (struct.isSetPlatform()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetAppkey()) {
          oprot.writeString(struct.appkey);
        }
        if (struct.isSetCode()) {
          oprot.writeString(struct.code);
        }
        if (struct.isSetBegindate()) {
          oprot.writeI32(struct.begindate);
        }
        if (struct.isSetEnddate()) {
          oprot.writeI32(struct.enddate);
        }
        if (struct.isSetPlatform()) {
          oprot.writeString(struct.platform);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryPlatDayKPIByApp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.appkey = iprot.readString();
          struct.setAppkeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.code = iprot.readString();
          struct.setCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.begindate = iprot.readI32();
          struct.setBegindateIsSet(true);
        }
        if (incoming.get(3)) {
          struct.enddate = iprot.readI32();
          struct.setEnddateIsSet(true);
        }
        if (incoming.get(4)) {
          struct.platform = iprot.readString();
          struct.setPlatformIsSet(true);
        }
      }
    }

  }

  public static class queryPlatDayKPIByApp_result implements org.apache.thrift.TBase<queryPlatDayKPIByApp_result, queryPlatDayKPIByApp_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryPlatDayKPIByApp_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryPlatDayKPIByApp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryPlatDayKPIByApp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryPlatDayKPIByApp_resultTupleSchemeFactory());
    }

    public Map<String,Map<Integer,Double>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryPlatDayKPIByApp_result.class, metaDataMap);
    }

    public queryPlatDayKPIByApp_result() {
    }

    public queryPlatDayKPIByApp_result(
      Map<String,Map<Integer,Double>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryPlatDayKPIByApp_result(queryPlatDayKPIByApp_result other) {
      if (other.isSetSuccess()) {
        Map<String,Map<Integer,Double>> __this__success = new HashMap<String,Map<Integer,Double>>(other.success.size());
        for (Map.Entry<String, Map<Integer,Double>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          Map<Integer,Double> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          Map<Integer,Double> __this__success_copy_value = new HashMap<Integer,Double>(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public queryPlatDayKPIByApp_result deepCopy() {
      return new queryPlatDayKPIByApp_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Map<Integer,Double> val) {
      if (this.success == null) {
        this.success = new HashMap<String,Map<Integer,Double>>();
      }
      this.success.put(key, val);
    }

    public Map<String,Map<Integer,Double>> getSuccess() {
      return this.success;
    }

    public queryPlatDayKPIByApp_result setSuccess(Map<String,Map<Integer,Double>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Map<Integer,Double>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryPlatDayKPIByApp_result)
        return this.equals((queryPlatDayKPIByApp_result)that);
      return false;
    }

    public boolean equals(queryPlatDayKPIByApp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryPlatDayKPIByApp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryPlatDayKPIByApp_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryPlatDayKPIByApp_resultStandardSchemeFactory implements SchemeFactory {
      public queryPlatDayKPIByApp_resultStandardScheme getScheme() {
        return new queryPlatDayKPIByApp_resultStandardScheme();
      }
    }

    private static class queryPlatDayKPIByApp_resultStandardScheme extends StandardScheme<queryPlatDayKPIByApp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryPlatDayKPIByApp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map222 = iprot.readMapBegin();
                  struct.success = new HashMap<String,Map<Integer,Double>>(2*_map222.size);
                  String _key223;
                  Map<Integer,Double> _val224;
                  for (int _i225 = 0; _i225 < _map222.size; ++_i225)
                  {
                    _key223 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TMap _map226 = iprot.readMapBegin();
                      _val224 = new HashMap<Integer,Double>(2*_map226.size);
                      int _key227;
                      double _val228;
                      for (int _i229 = 0; _i229 < _map226.size; ++_i229)
                      {
                        _key227 = iprot.readI32();
                        _val228 = iprot.readDouble();
                        _val224.put(_key227, _val228);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.put(_key223, _val224);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryPlatDayKPIByApp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map.Entry<String, Map<Integer,Double>> _iter230 : struct.success.entrySet())
            {
              oprot.writeString(_iter230.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, _iter230.getValue().size()));
                for (Map.Entry<Integer, Double> _iter231 : _iter230.getValue().entrySet())
                {
                  oprot.writeI32(_iter231.getKey());
                  oprot.writeDouble(_iter231.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryPlatDayKPIByApp_resultTupleSchemeFactory implements SchemeFactory {
      public queryPlatDayKPIByApp_resultTupleScheme getScheme() {
        return new queryPlatDayKPIByApp_resultTupleScheme();
      }
    }

    private static class queryPlatDayKPIByApp_resultTupleScheme extends TupleScheme<queryPlatDayKPIByApp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryPlatDayKPIByApp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Map<Integer,Double>> _iter232 : struct.success.entrySet())
            {
              oprot.writeString(_iter232.getKey());
              {
                oprot.writeI32(_iter232.getValue().size());
                for (Map.Entry<Integer, Double> _iter233 : _iter232.getValue().entrySet())
                {
                  oprot.writeI32(_iter233.getKey());
                  oprot.writeDouble(_iter233.getValue());
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryPlatDayKPIByApp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map234 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new HashMap<String,Map<Integer,Double>>(2*_map234.size);
            String _key235;
            Map<Integer,Double> _val236;
            for (int _i237 = 0; _i237 < _map234.size; ++_i237)
            {
              _key235 = iprot.readString();
              {
                org.apache.thrift.protocol.TMap _map238 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
                _val236 = new HashMap<Integer,Double>(2*_map238.size);
                int _key239;
                double _val240;
                for (int _i241 = 0; _i241 < _map238.size; ++_i241)
                {
                  _key239 = iprot.readI32();
                  _val240 = iprot.readDouble();
                  _val236.put(_key239, _val240);
                }
              }
              struct.success.put(_key235, _val236);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class queryPlatMonthKPIByApp_args implements org.apache.thrift.TBase<queryPlatMonthKPIByApp_args, queryPlatMonthKPIByApp_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryPlatMonthKPIByApp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryPlatMonthKPIByApp_args");

    private static final org.apache.thrift.protocol.TField APPKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appkey", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BEGINDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("begindate", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ENDDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("enddate", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryPlatMonthKPIByApp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryPlatMonthKPIByApp_argsTupleSchemeFactory());
    }

    public String appkey; // required
    public String code; // required
    public int begindate; // required
    public int enddate; // required
    public String platform; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APPKEY((short)1, "appkey"),
      CODE((short)2, "code"),
      BEGINDATE((short)3, "begindate"),
      ENDDATE((short)4, "enddate"),
      PLATFORM((short)5, "platform");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APPKEY
            return APPKEY;
          case 2: // CODE
            return CODE;
          case 3: // BEGINDATE
            return BEGINDATE;
          case 4: // ENDDATE
            return ENDDATE;
          case 5: // PLATFORM
            return PLATFORM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BEGINDATE_ISSET_ID = 0;
    private static final int __ENDDATE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APPKEY, new org.apache.thrift.meta_data.FieldMetaData("appkey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BEGINDATE, new org.apache.thrift.meta_data.FieldMetaData("begindate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ENDDATE, new org.apache.thrift.meta_data.FieldMetaData("enddate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryPlatMonthKPIByApp_args.class, metaDataMap);
    }

    public queryPlatMonthKPIByApp_args() {
    }

    public queryPlatMonthKPIByApp_args(
      String appkey,
      String code,
      int begindate,
      int enddate,
      String platform)
    {
      this();
      this.appkey = appkey;
      this.code = code;
      this.begindate = begindate;
      setBegindateIsSet(true);
      this.enddate = enddate;
      setEnddateIsSet(true);
      this.platform = platform;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryPlatMonthKPIByApp_args(queryPlatMonthKPIByApp_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAppkey()) {
        this.appkey = other.appkey;
      }
      if (other.isSetCode()) {
        this.code = other.code;
      }
      this.begindate = other.begindate;
      this.enddate = other.enddate;
      if (other.isSetPlatform()) {
        this.platform = other.platform;
      }
    }

    public queryPlatMonthKPIByApp_args deepCopy() {
      return new queryPlatMonthKPIByApp_args(this);
    }

    @Override
    public void clear() {
      this.appkey = null;
      this.code = null;
      setBegindateIsSet(false);
      this.begindate = 0;
      setEnddateIsSet(false);
      this.enddate = 0;
      this.platform = null;
    }

    public String getAppkey() {
      return this.appkey;
    }

    public queryPlatMonthKPIByApp_args setAppkey(String appkey) {
      this.appkey = appkey;
      return this;
    }

    public void unsetAppkey() {
      this.appkey = null;
    }

    /** Returns true if field appkey is set (has been assigned a value) and false otherwise */
    public boolean isSetAppkey() {
      return this.appkey != null;
    }

    public void setAppkeyIsSet(boolean value) {
      if (!value) {
        this.appkey = null;
      }
    }

    public String getCode() {
      return this.code;
    }

    public queryPlatMonthKPIByApp_args setCode(String code) {
      this.code = code;
      return this;
    }

    public void unsetCode() {
      this.code = null;
    }

    /** Returns true if field code is set (has been assigned a value) and false otherwise */
    public boolean isSetCode() {
      return this.code != null;
    }

    public void setCodeIsSet(boolean value) {
      if (!value) {
        this.code = null;
      }
    }

    public int getBegindate() {
      return this.begindate;
    }

    public queryPlatMonthKPIByApp_args setBegindate(int begindate) {
      this.begindate = begindate;
      setBegindateIsSet(true);
      return this;
    }

    public void unsetBegindate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGINDATE_ISSET_ID);
    }

    /** Returns true if field begindate is set (has been assigned a value) and false otherwise */
    public boolean isSetBegindate() {
      return EncodingUtils.testBit(__isset_bitfield, __BEGINDATE_ISSET_ID);
    }

    public void setBegindateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGINDATE_ISSET_ID, value);
    }

    public int getEnddate() {
      return this.enddate;
    }

    public queryPlatMonthKPIByApp_args setEnddate(int enddate) {
      this.enddate = enddate;
      setEnddateIsSet(true);
      return this;
    }

    public void unsetEnddate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    /** Returns true if field enddate is set (has been assigned a value) and false otherwise */
    public boolean isSetEnddate() {
      return EncodingUtils.testBit(__isset_bitfield, __ENDDATE_ISSET_ID);
    }

    public void setEnddateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDDATE_ISSET_ID, value);
    }

    public String getPlatform() {
      return this.platform;
    }

    public queryPlatMonthKPIByApp_args setPlatform(String platform) {
      this.platform = platform;
      return this;
    }

    public void unsetPlatform() {
      this.platform = null;
    }

    /** Returns true if field platform is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatform() {
      return this.platform != null;
    }

    public void setPlatformIsSet(boolean value) {
      if (!value) {
        this.platform = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APPKEY:
        if (value == null) {
          unsetAppkey();
        } else {
          setAppkey((String)value);
        }
        break;

      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          setCode((String)value);
        }
        break;

      case BEGINDATE:
        if (value == null) {
          unsetBegindate();
        } else {
          setBegindate((Integer)value);
        }
        break;

      case ENDDATE:
        if (value == null) {
          unsetEnddate();
        } else {
          setEnddate((Integer)value);
        }
        break;

      case PLATFORM:
        if (value == null) {
          unsetPlatform();
        } else {
          setPlatform((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APPKEY:
        return getAppkey();

      case CODE:
        return getCode();

      case BEGINDATE:
        return Integer.valueOf(getBegindate());

      case ENDDATE:
        return Integer.valueOf(getEnddate());

      case PLATFORM:
        return getPlatform();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APPKEY:
        return isSetAppkey();
      case CODE:
        return isSetCode();
      case BEGINDATE:
        return isSetBegindate();
      case ENDDATE:
        return isSetEnddate();
      case PLATFORM:
        return isSetPlatform();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryPlatMonthKPIByApp_args)
        return this.equals((queryPlatMonthKPIByApp_args)that);
      return false;
    }

    public boolean equals(queryPlatMonthKPIByApp_args that) {
      if (that == null)
        return false;

      boolean this_present_appkey = true && this.isSetAppkey();
      boolean that_present_appkey = true && that.isSetAppkey();
      if (this_present_appkey || that_present_appkey) {
        if (!(this_present_appkey && that_present_appkey))
          return false;
        if (!this.appkey.equals(that.appkey))
          return false;
      }

      boolean this_present_code = true && this.isSetCode();
      boolean that_present_code = true && that.isSetCode();
      if (this_present_code || that_present_code) {
        if (!(this_present_code && that_present_code))
          return false;
        if (!this.code.equals(that.code))
          return false;
      }

      boolean this_present_begindate = true;
      boolean that_present_begindate = true;
      if (this_present_begindate || that_present_begindate) {
        if (!(this_present_begindate && that_present_begindate))
          return false;
        if (this.begindate != that.begindate)
          return false;
      }

      boolean this_present_enddate = true;
      boolean that_present_enddate = true;
      if (this_present_enddate || that_present_enddate) {
        if (!(this_present_enddate && that_present_enddate))
          return false;
        if (this.enddate != that.enddate)
          return false;
      }

      boolean this_present_platform = true && this.isSetPlatform();
      boolean that_present_platform = true && that.isSetPlatform();
      if (this_present_platform || that_present_platform) {
        if (!(this_present_platform && that_present_platform))
          return false;
        if (!this.platform.equals(that.platform))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_appkey = true && (isSetAppkey());
      list.add(present_appkey);
      if (present_appkey)
        list.add(appkey);

      boolean present_code = true && (isSetCode());
      list.add(present_code);
      if (present_code)
        list.add(code);

      boolean present_begindate = true;
      list.add(present_begindate);
      if (present_begindate)
        list.add(begindate);

      boolean present_enddate = true;
      list.add(present_enddate);
      if (present_enddate)
        list.add(enddate);

      boolean present_platform = true && (isSetPlatform());
      list.add(present_platform);
      if (present_platform)
        list.add(platform);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryPlatMonthKPIByApp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAppkey()).compareTo(other.isSetAppkey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppkey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appkey, other.appkey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCode()).compareTo(other.isSetCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBegindate()).compareTo(other.isSetBegindate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBegindate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.begindate, other.begindate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnddate()).compareTo(other.isSetEnddate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnddate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enddate, other.enddate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(other.isSetPlatform());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatform()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, other.platform);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryPlatMonthKPIByApp_args(");
      boolean first = true;

      sb.append("appkey:");
      if (this.appkey == null) {
        sb.append("null");
      } else {
        sb.append(this.appkey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code:");
      if (this.code == null) {
        sb.append("null");
      } else {
        sb.append(this.code);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("begindate:");
      sb.append(this.begindate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("enddate:");
      sb.append(this.enddate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("platform:");
      if (this.platform == null) {
        sb.append("null");
      } else {
        sb.append(this.platform);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryPlatMonthKPIByApp_argsStandardSchemeFactory implements SchemeFactory {
      public queryPlatMonthKPIByApp_argsStandardScheme getScheme() {
        return new queryPlatMonthKPIByApp_argsStandardScheme();
      }
    }

    private static class queryPlatMonthKPIByApp_argsStandardScheme extends StandardScheme<queryPlatMonthKPIByApp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryPlatMonthKPIByApp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APPKEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.appkey = iprot.readString();
                struct.setAppkeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.code = iprot.readString();
                struct.setCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BEGINDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.begindate = iprot.readI32();
                struct.setBegindateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ENDDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.enddate = iprot.readI32();
                struct.setEnddateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PLATFORM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.platform = iprot.readString();
                struct.setPlatformIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryPlatMonthKPIByApp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.appkey != null) {
          oprot.writeFieldBegin(APPKEY_FIELD_DESC);
          oprot.writeString(struct.appkey);
          oprot.writeFieldEnd();
        }
        if (struct.code != null) {
          oprot.writeFieldBegin(CODE_FIELD_DESC);
          oprot.writeString(struct.code);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BEGINDATE_FIELD_DESC);
        oprot.writeI32(struct.begindate);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ENDDATE_FIELD_DESC);
        oprot.writeI32(struct.enddate);
        oprot.writeFieldEnd();
        if (struct.platform != null) {
          oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
          oprot.writeString(struct.platform);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryPlatMonthKPIByApp_argsTupleSchemeFactory implements SchemeFactory {
      public queryPlatMonthKPIByApp_argsTupleScheme getScheme() {
        return new queryPlatMonthKPIByApp_argsTupleScheme();
      }
    }

    private static class queryPlatMonthKPIByApp_argsTupleScheme extends TupleScheme<queryPlatMonthKPIByApp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryPlatMonthKPIByApp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAppkey()) {
          optionals.set(0);
        }
        if (struct.isSetCode()) {
          optionals.set(1);
        }
        if (struct.isSetBegindate()) {
          optionals.set(2);
        }
        if (struct.isSetEnddate()) {
          optionals.set(3);
        }
        if (struct.isSetPlatform()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetAppkey()) {
          oprot.writeString(struct.appkey);
        }
        if (struct.isSetCode()) {
          oprot.writeString(struct.code);
        }
        if (struct.isSetBegindate()) {
          oprot.writeI32(struct.begindate);
        }
        if (struct.isSetEnddate()) {
          oprot.writeI32(struct.enddate);
        }
        if (struct.isSetPlatform()) {
          oprot.writeString(struct.platform);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryPlatMonthKPIByApp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.appkey = iprot.readString();
          struct.setAppkeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.code = iprot.readString();
          struct.setCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.begindate = iprot.readI32();
          struct.setBegindateIsSet(true);
        }
        if (incoming.get(3)) {
          struct.enddate = iprot.readI32();
          struct.setEnddateIsSet(true);
        }
        if (incoming.get(4)) {
          struct.platform = iprot.readString();
          struct.setPlatformIsSet(true);
        }
      }
    }

  }

  public static class queryPlatMonthKPIByApp_result implements org.apache.thrift.TBase<queryPlatMonthKPIByApp_result, queryPlatMonthKPIByApp_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryPlatMonthKPIByApp_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryPlatMonthKPIByApp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryPlatMonthKPIByApp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryPlatMonthKPIByApp_resultTupleSchemeFactory());
    }

    public Map<String,Map<Integer,Double>> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryPlatMonthKPIByApp_result.class, metaDataMap);
    }

    public queryPlatMonthKPIByApp_result() {
    }

    public queryPlatMonthKPIByApp_result(
      Map<String,Map<Integer,Double>> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryPlatMonthKPIByApp_result(queryPlatMonthKPIByApp_result other) {
      if (other.isSetSuccess()) {
        Map<String,Map<Integer,Double>> __this__success = new HashMap<String,Map<Integer,Double>>(other.success.size());
        for (Map.Entry<String, Map<Integer,Double>> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          Map<Integer,Double> other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          Map<Integer,Double> __this__success_copy_value = new HashMap<Integer,Double>(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
    }

    public queryPlatMonthKPIByApp_result deepCopy() {
      return new queryPlatMonthKPIByApp_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Map<Integer,Double> val) {
      if (this.success == null) {
        this.success = new HashMap<String,Map<Integer,Double>>();
      }
      this.success.put(key, val);
    }

    public Map<String,Map<Integer,Double>> getSuccess() {
      return this.success;
    }

    public queryPlatMonthKPIByApp_result setSuccess(Map<String,Map<Integer,Double>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,Map<Integer,Double>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryPlatMonthKPIByApp_result)
        return this.equals((queryPlatMonthKPIByApp_result)that);
      return false;
    }

    public boolean equals(queryPlatMonthKPIByApp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(queryPlatMonthKPIByApp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryPlatMonthKPIByApp_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryPlatMonthKPIByApp_resultStandardSchemeFactory implements SchemeFactory {
      public queryPlatMonthKPIByApp_resultStandardScheme getScheme() {
        return new queryPlatMonthKPIByApp_resultStandardScheme();
      }
    }

    private static class queryPlatMonthKPIByApp_resultStandardScheme extends StandardScheme<queryPlatMonthKPIByApp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryPlatMonthKPIByApp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map242 = iprot.readMapBegin();
                  struct.success = new HashMap<String,Map<Integer,Double>>(2*_map242.size);
                  String _key243;
                  Map<Integer,Double> _val244;
                  for (int _i245 = 0; _i245 < _map242.size; ++_i245)
                  {
                    _key243 = iprot.readString();
                    {
                      org.apache.thrift.protocol.TMap _map246 = iprot.readMapBegin();
                      _val244 = new HashMap<Integer,Double>(2*_map246.size);
                      int _key247;
                      double _val248;
                      for (int _i249 = 0; _i249 < _map246.size; ++_i249)
                      {
                        _key247 = iprot.readI32();
                        _val248 = iprot.readDouble();
                        _val244.put(_key247, _val248);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.put(_key243, _val244);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryPlatMonthKPIByApp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (Map.Entry<String, Map<Integer,Double>> _iter250 : struct.success.entrySet())
            {
              oprot.writeString(_iter250.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, _iter250.getValue().size()));
                for (Map.Entry<Integer, Double> _iter251 : _iter250.getValue().entrySet())
                {
                  oprot.writeI32(_iter251.getKey());
                  oprot.writeDouble(_iter251.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryPlatMonthKPIByApp_resultTupleSchemeFactory implements SchemeFactory {
      public queryPlatMonthKPIByApp_resultTupleScheme getScheme() {
        return new queryPlatMonthKPIByApp_resultTupleScheme();
      }
    }

    private static class queryPlatMonthKPIByApp_resultTupleScheme extends TupleScheme<queryPlatMonthKPIByApp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryPlatMonthKPIByApp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, Map<Integer,Double>> _iter252 : struct.success.entrySet())
            {
              oprot.writeString(_iter252.getKey());
              {
                oprot.writeI32(_iter252.getValue().size());
                for (Map.Entry<Integer, Double> _iter253 : _iter252.getValue().entrySet())
                {
                  oprot.writeI32(_iter253.getKey());
                  oprot.writeDouble(_iter253.getValue());
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryPlatMonthKPIByApp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map254 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new HashMap<String,Map<Integer,Double>>(2*_map254.size);
            String _key255;
            Map<Integer,Double> _val256;
            for (int _i257 = 0; _i257 < _map254.size; ++_i257)
            {
              _key255 = iprot.readString();
              {
                org.apache.thrift.protocol.TMap _map258 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
                _val256 = new HashMap<Integer,Double>(2*_map258.size);
                int _key259;
                double _val260;
                for (int _i261 = 0; _i261 < _map258.size; ++_i261)
                {
                  _key259 = iprot.readI32();
                  _val260 = iprot.readDouble();
                  _val256.put(_key259, _val260);
                }
              }
              struct.success.put(_key255, _val256);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
